[
    {
        "id": "7c7a09edf982e2f4",
        "type": "tab",
        "label": "全局配置(边缘)",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "e783d53461d94d52",
        "type": "tab",
        "label": "影子设备",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "0d352f1d7c785601",
        "type": "tab",
        "label": "订阅发布",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "258449913ea08d71",
        "type": "tab",
        "label": "流程 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "acbe893ce0e86722",
        "type": "mqtt-broker",
        "name": "south_input",
        "broker": "push-access.sdp.101.com",
        "port": "11882",
        "clientid": "",
        "autoConnect": false,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "b5ef31a7a90ee4e8",
        "type": "mqtt-broker",
        "name": "north_input",
        "broker": "push-access.sdp.101.com",
        "port": "11882",
        "clientid": "",
        "autoConnect": false,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "38d4df9bbbc86ac8",
        "type": "mqtt-broker",
        "name": "south_output",
        "broker": "push-access.sdp.101.com",
        "port": "1883",
        "clientid": "",
        "autoConnect": false,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "9d3969c0e96fa621",
        "type": "mqtt-broker",
        "name": "south_status",
        "broker": "push-access.sdp.101.com",
        "port": "1883",
        "clientid": "",
        "autoConnect": false,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "e0b970ba11de7cc5",
        "type": "mqtt-broker",
        "name": "north_output",
        "broker": "push-access.sdp.101.com",
        "port": "1883",
        "clientid": "",
        "autoConnect": false,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "ccc535250cd7677b",
        "type": "mqtt-broker",
        "name": "dataio_output",
        "broker": "127.0.0.1",
        "port": "1883",
        "clientid": "",
        "autoConnect": false,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "340486ab3bf5bf39",
        "type": "mqtt-broker",
        "name": "dataio_input",
        "broker": "127.0.0.1",
        "port": "1883",
        "clientid": "",
        "autoConnect": false,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "f544f205.d51a7",
        "type": "inject",
        "z": "7c7a09edf982e2f4",
        "name": "初始化",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 100,
        "wires": [
            [
                "683f9c514d3dc3f8"
            ]
        ]
    },
    {
        "id": "52f82eb73840e302",
        "type": "OS",
        "z": "7c7a09edf982e2f4",
        "name": "",
        "x": 410,
        "y": 100,
        "wires": [
            [
                "705cd1a4e7548610"
            ]
        ]
    },
    {
        "id": "705cd1a4e7548610",
        "type": "change",
        "z": "7c7a09edf982e2f4",
        "name": "OS",
        "rules": [
            {
                "t": "set",
                "p": "os",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 550,
        "y": 100,
        "wires": [
            [
                "c27b74647cc92e82"
            ]
        ]
    },
    {
        "id": "c27b74647cc92e82",
        "type": "home-dir",
        "z": "7c7a09edf982e2f4",
        "x": 700,
        "y": 100,
        "wires": [
            [
                "3e822ed879b8777e"
            ]
        ]
    },
    {
        "id": "3e822ed879b8777e",
        "type": "change",
        "z": "7c7a09edf982e2f4",
        "name": "datadir",
        "rules": [
            {
                "t": "set",
                "p": "os.datadir",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 850,
        "y": 100,
        "wires": [
            [
                "a6a4ebf94a8b8924"
            ]
        ]
    },
    {
        "id": "f70a2bb4819417da",
        "type": "link out",
        "z": "7c7a09edf982e2f4",
        "name": "配置完成",
        "mode": "link",
        "links": [
            "3fdb98726d73125a",
            "906bb62a708b4c0c",
            "b2168926188a5904"
        ],
        "x": 825,
        "y": 600,
        "wires": []
    },
    {
        "id": "4aa5b949a197bcb7",
        "type": "inject",
        "z": "7c7a09edf982e2f4",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "data",
        "payloadType": "global",
        "x": 180,
        "y": 900,
        "wires": [
            [
                "61299e55f08ac3e1"
            ]
        ]
    },
    {
        "id": "61299e55f08ac3e1",
        "type": "debug",
        "z": "7c7a09edf982e2f4",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 370,
        "y": 900,
        "wires": []
    },
    {
        "id": "a6a4ebf94a8b8924",
        "type": "switch",
        "z": "7c7a09edf982e2f4",
        "name": "是否激活边缘？",
        "property": "IOT_ENABLE_EDG",
        "propertyType": "env",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 300,
        "y": 200,
        "wires": [
            [
                "c0624055eec65ac4"
            ]
        ]
    },
    {
        "id": "c0624055eec65ac4",
        "type": "function",
        "z": "7c7a09edf982e2f4",
        "name": "配置文件",
        "func": "\nreturn {\n    filename: env.get(\"IOT_CONFIG_FILE\")\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 200,
        "wires": [
            [
                "387bc8ba683df91f"
            ]
        ]
    },
    {
        "id": "874e2ff0304f3dd7",
        "type": "json",
        "z": "7c7a09edf982e2f4",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 830,
        "y": 200,
        "wires": [
            [
                "292cc7137106f66e"
            ]
        ]
    },
    {
        "id": "387bc8ba683df91f",
        "type": "file in",
        "z": "7c7a09edf982e2f4",
        "name": "读配置文件",
        "filename": "",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 670,
        "y": 200,
        "wires": [
            [
                "874e2ff0304f3dd7"
            ]
        ]
    },
    {
        "id": "292cc7137106f66e",
        "type": "function",
        "z": "7c7a09edf982e2f4",
        "name": "数据初始化",
        "func": "let config = msg.payload.edge;\n\nlet _ids = global.get(\"ids\");\n\nObject.keys(config.global).forEach(key => {\n    global.set(key, config.global[key])\n})\n\nlet data = global.get(\"data\");\nif (_ids) global.set(\"ids\", _ids);\nlet ids = global.get(\"ids\");\n\n\n// let host = env.get(\"HOSTNAME\") || env.get(\"COMPUTERNAME\");\n// ids.edg = ids.edg.replace(\"{HOSTNAME}\", host);\n\nlet app = data.app;\nlet dom = app.domain;\nlet dsp = dom.dispatcher;\nlet edg = dsp.edge;\n\n\ndata.dispatcher = dsp;\ndata.edge = edg;\ndata.devices = edg.devices;\ndata.mqtt = edg.mqtt;\ndata.topics = edg.mqtt.topics;\ndata.mongodb = edg.mongodb;\ndata.shadows = edg.shadows;\ndata.ids = ids;\n\n\nreturn {payload: data};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 360,
        "wires": [
            [
                "0666cb29a70a9804"
            ]
        ]
    },
    {
        "id": "068d75ddb00dcc52",
        "type": "debug",
        "z": "7c7a09edf982e2f4",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 870,
        "y": 680,
        "wires": []
    },
    {
        "id": "32b635bc5bbe8de1",
        "type": "function",
        "z": "7c7a09edf982e2f4",
        "name": "展开主题函数",
        "func": "let data = global.get(\"data\");\nlet common = global.get(\"common\");\nlet gids = global.get(\"ids\");\n\n\nlet expandTopic = {\n    expandStr : function(v, _ids) {\n        let ids = Object.assign({}, gids);\n        ids = Object.assign(ids, _ids || {});\n\n        if (typeof v == \"string\") {\n            v = v.replace(/\\{APP_ID\\}/g, env.get(\"IOT_APP_ID\") || \"\");\n            v = v.replace(/\\{DOM_ID\\}/g, env.get(\"IOT_DOM_ID\") || \"\");\n            v = v.replace(/\\{DSP_ID\\}/g, env.get(\"IOT_DSP_ID\") || \"\");\n            v = v.replace(/\\{EDG_ID\\}/g, env.get(\"IOT_EDG_ID\") || \"\");\n            v = v.replace(/\\{DIO_ID\\}/g, env.get(\"IOT_DIO_ID\") || \"\");\n            v = v.replace(/\\{PLF_ID\\}/g, env.get(\"IOT_PLF_ID\") || \"\");\n            v = v.replace(/\\{HOSTNAME\\}/g, env.get(\"HOSTNAME\") || env.get(\"COMPUTERNAME\") || \"\");\n            \n            v = v.replace(/\\{app\\}/g, ids.app || \"\");\n            v = v.replace(/\\{dom\\}/g, ids.dom || \"\");\n            v = v.replace(/\\{dsp\\}/g, ids.dsp || \"\");\n            v = v.replace(/\\{edg\\}/g, ids.edg || \"\");\n            v = v.replace(/\\{dio\\}/g, ids.dio || \"\");\n            v = v.replace(/\\{plf\\}/g, ids.plf || \"\");\n            if (ids.dev)\n                v = v.replace(/\\{dev\\}/g, ids.dev || \"\");\n        }\n        return v;\n    },\n    expandArray : function(v, _ids) {\n        if (Array.isArray(v)) {\n            for(let i=0; i < v.length; i++) {\n                v[i] = this.expand(v[i], _ids);\n            }\n        }\n        return arr;\n    },\n    expandObj : function(v, _ids) {\n        if (typeof v == \"object\") {\n            let keys = Object.keys(v);\n            keys.forEach(k => {\n                v[k] = this.expand(v[k], _ids);\n            });\n        }\n        return v;        \n    },\n    expand : function(v, _ids) {\n        if (typeof v == \"string\")\n            v = this.expandStr(v, _ids);\n                    \n        if (Array.isArray(v)) {\n            v = expandArray(v, _ids);\n        }\n        \n        if (typeof v == \"object\") {\n            v = this.expandObj(v, _ids)\n        }\n                \n        return v\n    }\n}\n    \n\n\ncommon.expandTopic = expandTopic;\n\nreturn {payload: data};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 400,
        "wires": [
            [
                "28f0789e7c6d7af0"
            ]
        ]
    },
    {
        "id": "28f0789e7c6d7af0",
        "type": "function",
        "z": "7c7a09edf982e2f4",
        "name": "缓存数据函数",
        "func": "let data = global.get(\"data\");\nlet common = global.get(\"common\");\n\nlet online = function(){\n    let events = this.events;\n    if (events && events.status)\n        return events.status.pld.online;\n    return 0;\n}\n\nlet cachePayload = function(payload) {\n    let hd = payload.hd;\n    let pld = payload.pld;\n    if (hd.from.type == \"dev\") {\n        let dysub = false;\n        let dev = data.devices[hd.from.id];\n        if (!dev) {\n            dev = {};\n            dysub = true;\n        }\n        dev.id = hd.from.id;\n        dev.events = dev.events || {};\n        if (hd.from.pid)\n            dev.pid = hd.from.pid;\n        dev.events[hd.entry.id] = payload;\n        dev.online = online;\n        data.devices[hd.from.id] = dev;\n        if (dysub) node.send({device: dev}, null);\n    }\n    \n    let dsp = data.dispatcher;\n    if (hd.from.type == \"dsp\" && hd.from.id == dsp.id ) {\n        if (hd.entry.type == \"evt\"){\n            dsp.events = dsp.events || {};\n            dsp.events[hd.entry.id] = payload;\n            dsp.online = online;\n        }\n    }\n}\n\ncommon.cachePayload = cachePayload;\n\nreturn [null, {payload: data}];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 440,
        "wires": [
            [
                "b15bbbcec428c762"
            ],
            [
                "53f8f8933a1a8726"
            ]
        ]
    },
    {
        "id": "53f8f8933a1a8726",
        "type": "function",
        "z": "7c7a09edf982e2f4",
        "name": "键值转ID函数",
        "func": "let common = global.get(\"common\");\n\nlet keyToObjId = function(objs) {\n        let keys = Object.keys(objs);\n        keys.forEach(key => {\n            let obj = objs[key];\n            if (typeof obj == \"object\") \n                obj.id = key;\n        })        \n    }\n\n\ncommon.keyToObjId = keyToObjId;\n\nreturn {payload: common};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 480,
        "wires": [
            [
                "c983ab7963d0f975"
            ]
        ]
    },
    {
        "id": "c983ab7963d0f975",
        "type": "function",
        "z": "7c7a09edf982e2f4",
        "name": "获取HD主题函数",
        "func": "let common = global.get(\"common\");\nlet ids = global.get(\"data\").ids;\n\nlet getHDTopic = function(hd) {\n    let tpc = \"\";\n    if (!hd.pref) hd.pref = {};\n    if (!hd.pref.app) hd.pref.app = (ids.app ? ids.app : \"0\");\n    if (!hd.pref.dom) hd.pref.dom = (ids.dom ? ids.dom : \"0\");\n    \n    if (!hd.from) hd.from = {};\n    if (!hd.from.type) hd.from.type = \"edg\";\n    if (!hd.from.id) hd.from.id = ids.edg;\n    if (!hd.to) hd.to = {};\n    if (!hd.to.type) hd.to.type = \"0\";\n    if (!hd.to.id) hd.to.id = \"0\";\n    if (!hd.entry) hd.entry = {};\n    if (!hd.entry.type) hd.entry.type = \"0\";\n    if (!hd.entry.id) hd.entry.id = \"0\";\n    if (!hd.sid) hd.sid = \"0\";\n    if (!hd.stp) hd.stp = 0;\n    if (!hd.version) hd.version = global.get(\"version\")\n\n    tpc =   hd.pref.app + \"/\" + hd.pref.dom + \"/\" + \n            hd.from.type + \"/\" + hd.from.id + \"/\" + \n            hd.to.type + \"/\" + hd.to.id + \"/\" + \n            hd.entry.type + \"/\" + hd.entry.id;\n    return tpc;\n}\n\n\ncommon.getHDTopic = getHDTopic;\n\nreturn {payload: common};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 520,
        "wires": [
            [
                "a135c4a79efe2dc9"
            ]
        ]
    },
    {
        "id": "a135c4a79efe2dc9",
        "type": "function",
        "z": "7c7a09edf982e2f4",
        "name": "Z3协调器初始化函数",
        "func": "let data = global.get(\"data\");\nlet common = global.get(\"common\");\nlet os = global.get(\"os\");\nlet devices = data.devices;\nlet topics = data.topics;\nlet edgz2m =  data.edge.z2m;\nlet tcpPort = edgz2m.tcpPort;\nlet frontendPort = edgz2m.frontendPort;\nlet z2mDir = edgz2m.z2mDir;\nlet dataDir = edgz2m.dataDir;\nif (os.platform == \"win32\") {\n    z2mDir = edgz2m.z2mDir_win;\n    dataDir = edgz2m.dataDir_win;   \n}\n\nlet running = function() {\n    return  this.z2m && this.z2m.status && \n            (this.z2m.status == \"running\" || this.z2m.status == \"online\")\n}\n\nlet setDevice = (device) => {\n    let devDataDir = dataDir + \"/\" + device.id; \n    let spawnArgs = \"../zigbee2mqtt/index.js\";\n    let execStr = \"cd \" + z2mDir;\n    if (os.platform == \"win32\"){\n        execStr =execStr + \"&& set ZIGBEE2MQTT_DATA=\" + devDataDir;\n        execStr =execStr + \"&& npm start\";\n    } else {\n        execStr =execStr + \"&& ZIGBEE2MQTT_DATA=\" + devDataDir;\n        execStr =execStr + \" npm start\";\n    }\n\n    let z2m = device.z2m || {};\n    z2m.tcp = {\n            port: tcpPort,\n            status: null\n        };\n    z2m.z2m = {\n            configuration: {\n                mqtt: {\n                    base_topic: device.id,\n                    server: \"mqtt://127.0.0.1:1883\",\n                    user: \"device\"\n                },\n                serial: {\n                    port: \"tcp://127.0.0.1:\" + (tcpPort++)\n                },\n                frontend: {\n                    port: (frontendPort++)\n                }\n            },\n\n            datadir: devDataDir,\n            configfile: \"configuration.yaml\",\n            configfullfile: devDataDir + \"/configuration.yaml\",\n            databasefile: \"database.db\",\n            databasefullfile: devDataDir + \"/database.db\",\n            backfilenames:[\"configuration.yaml\",\"database.db\", \"coordinator_backup.json\"],\n            backfiles: {},\n            exec: execStr,\n            spawn: spawnArgs,\n            status: null,\n            datafile: z2m.z2m && z2m.z2m.datafile\n        };\n    z2m.running = running;\n    device.z2m = z2m;\n}\n\n\nlet initZ2MDevice = function(did) {\n    let device = devices[did];\n    if (device && (!device.z2m || !device.z2m.tcp || !device.z2m.z2m)) {\n        setDevice(device);\n    }\n    \n    return device;\n}\n\n\nlet getZ2MStatus = function(did, status) {\n    let device = devices[did];\n    if (device && device.z2m && device.z2m.z2m) {\n        return device.z2m.z2m.status\n    }\n}\n\nlet setZ2MStatus = function(did, status) {\n    let device = devices[did];\n    if (device && device.z2m && device.z2m.z2m) {\n        device.z2m.z2m.status = status\n    }\n    \n    return device;\n}\n\n\ncommon.initZ2MDevice = initZ2MDevice;\ncommon.setZ2MStatus = setZ2MStatus;\ncommon.getZ2MStatus = getZ2MStatus;\n\nreturn {payload: common};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 560,
        "wires": [
            [
                "37b0602a95288c0b"
            ]
        ]
    },
    {
        "id": "f77d15f0cc88c3d7",
        "type": "function",
        "z": "7c7a09edf982e2f4",
        "name": "数据补全",
        "func": "let data = global.get(\"data\");\nlet common = global.get(\"common\");\n\ncommon.expandTopic.expand(data.ids);    \ncommon.expandTopic.expand(data.topics.subs);\ncommon.expandTopic.expand(data.topics.services);\ncommon.keyToObjId(data.devices);\n\ndata.app.id = data.ids.app;\ndata.domain.id = data.ids.dom;\ndata.dispatcher.id = data.ids.dsp;\ndata.edge.id = data.ids.edg;\n\n\n\nreturn {payload: data};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 640,
        "wires": [
            [
                "068d75ddb00dcc52",
                "f70a2bb4819417da"
            ]
        ]
    },
    {
        "id": "ac60446b2e2fd797",
        "type": "link in",
        "z": "7c7a09edf982e2f4",
        "name": "重载配置",
        "links": [
            "3be6aa741efc38c0"
        ],
        "x": 135,
        "y": 200,
        "wires": [
            [
                "85b2a20bb5e50604",
                "a6a4ebf94a8b8924"
            ]
        ]
    },
    {
        "id": "85b2a20bb5e50604",
        "type": "debug",
        "z": "7c7a09edf982e2f4",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 250,
        "y": 260,
        "wires": []
    },
    {
        "id": "683f9c514d3dc3f8",
        "type": "change",
        "z": "7c7a09edf982e2f4",
        "name": "version",
        "rules": [
            {
                "t": "set",
                "p": "version",
                "pt": "global",
                "to": "0.0.1",
                "tot": "str"
            },
            {
                "t": "delete",
                "p": "ids",
                "pt": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 280,
        "y": 100,
        "wires": [
            [
                "52f82eb73840e302"
            ]
        ]
    },
    {
        "id": "2a5bed3b693562e4",
        "type": "link out",
        "z": "7c7a09edf982e2f4",
        "name": "设备状态订阅",
        "mode": "link",
        "links": [
            "1fbea7baf2a0c450"
        ],
        "x": 825,
        "y": 440,
        "wires": []
    },
    {
        "id": "b15bbbcec428c762",
        "type": "function",
        "z": "7c7a09edf982e2f4",
        "name": "订阅上下线主题",
        "func": "let data = global.get(\"data\");\nlet common = global.get(\"common\");\nlet topic;\nlet ids = {};\nif (msg.dispatcher) {\n    topic = data.topics.dysubs.dsp_evt_status;\n    ids.dsp = msg.dispatcher.id;\n}\n\nif (msg.edge) {\n    topic = data.topics.dysubs.edg_evt_status;\n    ids.edg = msg.edge.id;    \n}\n\nif (msg.device) {\n    topic = data.topics.dysubs.dev_evt_status;\n    ids.dev = msg.device.id;    \n}\n\nif (msg.platform) {\n    topic = data.topics.dysubs.plf_evt_status;\n    ids.plf = msg.platform.id;      \n}\n\nif (topic) {\n    topic = common.expandTopic.expandStr(topic, ids);\n\n    node.send({\n            action: \"unsubscribe\",\n            topic: topic\n    })\n    \n    node.send({\n            action: \"subscribe\",\n            topic: topic\n    })\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 440,
        "wires": [
            [
                "2a5bed3b693562e4"
            ]
        ]
    },
    {
        "id": "0666cb29a70a9804",
        "type": "function",
        "z": "7c7a09edf982e2f4",
        "name": "GUID函数",
        "func": "let data = global.get(\"data\");\nlet common = global.get(\"common\");\n   \nlet guid = function(len, start) {\n    let result = 'xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx'.replace(/[xy]/g, function(c){\n        let r = Math.random()*16|0;\n        let v = c == 'x' ? r : (r&0x3|0x8);\n        return v.toString(16);\n    })\n    len = len ? len : result.length;\n    return result.substr(start, len);\n}\n\ncommon.guid = guid;\n\nreturn {payload: data};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 360,
        "wires": [
            [
                "32b635bc5bbe8de1"
            ]
        ]
    },
    {
        "id": "37b0602a95288c0b",
        "type": "function",
        "z": "7c7a09edf982e2f4",
        "name": "Modbus解析函数",
        "func": "let data = global.get(\"data\");\nlet common = global.get(\"common\");\n\n\nvar CRCMaster = {\n    StringToCheck: \"\",\n    CleanedString: \"\",\n    CRCTableDNP: [],\n    init: function() {\n        this.CRCDNPInit();\n    },\n    CleanString: function(inputType) {\n        if (inputType == \"ASCII\") {\n            this.CleanedString = this.StringToCheck;\n        } else {\n            if (this.StringToCheck.match(/^[0-9A-F \\t]+$/gi) !== null) {\n                this.CleanedString = this._hexStringToString(this.StringToCheck.toUpperCase().replace(/[\\t ]/g, ''));\n            } else {\n                window.alert(\"String doesn't seem to be a valid Hex input.\");\n                return false;\n            }\n        }\n        return true;\n    },\n    CRCDNPInit: function() {\n        var i, j, crc, c;\n        for (i = 0; i < 256; i++) {\n            crc = 0;\n            c = i;\n            for (j = 0; j < 8; j++) {\n                if ((crc ^ c) & 0x0001) crc = (crc >> 1) ^ 0xA6BC;\n                else crc = crc >> 1;\n                c = c >> 1;\n            }\n            this.CRCTableDNP[i] = crc;\n        }\n    },\n    CRC16Modbus: function() {\n        var crc = 0xFFFF;\n        var str = this.CleanedString;\n        for (var pos = 0; pos < str.length; pos++) {\n            crc ^= str.charCodeAt(pos);\n            for (var i = 8; i !== 0; i--) {\n                if ((crc & 0x0001) !== 0) {\n                    crc >>= 1;\n                    crc ^= 0xA001;\n                } else\n                    crc >>= 1;\n            }\n        }\n        return crc;\n    },\n    _stringToBytes: function(str) {\n        var ch, st, re = [];\n        for (var i = 0; i < str.length; i++) {\n            ch = str.charCodeAt(i); // get char\n            st = []; // set up \"stack\"\n            do {\n                st.push(ch & 0xFF); // push byte to stack\n                ch = ch >> 8; // shift value down by 1 byte\n            }\n            while (ch);\n            // add stack contents to result\n            // done because chars have \"wrong\" endianness\n            re = re.concat(st.reverse());\n        }\n        // return an array of bytes\n        return re;\n    },\n    _byteToHexString: function(byte) {\n        let hex =\"00\" + byte.toString(16).toUpperCase();\n        hex = hex.substr(hex.length - 2);\n        return hex;\n    }, \n    _bytesToHexString: function(bytes) {\n        let str = \"\";\n        bytes.forEach(byte => {\n           str = str + \" \" + this._byteToHexString(byte);\n        })\n        return str.trim();\n    },    \n    _hexStringToString: function(inputstr) {\n        var hex = inputstr.toString(); //force conversion\n        var str = '';\n        for (var i = 0; i < hex.length; i += 2)\n            str += String.fromCharCode(parseInt(hex.substr(i, 2), 16));\n        return str;\n    },\n    CalculateStr: function(str, inputType) {\n        this.StringToCheck = str;\n        if (this.CleanString(inputType)) {\n            let crc = this.CRC16Modbus();\n            return {\n                low: crc & 0xFF,\n                high: crc >> 8 & 0xFF\n            }\n        }\n    },\n    CalculateBytes: function(bytes) {\n        let str = this._bytesToHexString(bytes);\n        return this.CalculateStr(str, \"HEX\");\n    }    \n};\n\nCRCMaster.init();\n\nlet splitRegAddr = function(regAddr, writeOffset ) {\n    let type = Math.floor(regAddr / 10000);\n    let addr = regAddr % 10000;\n    let func = -1;\n\n    if (writeOffset >=0) {\n        if (type == 0) func = 5 + writeOffset;\n        else if (type == 4) func = 6 + writeOffset;\n    } else {\n        if (type == 0) func = 1;\n        else if (type == 1) func = 2;\n        else if (type == 3) func = 4;\n        else if (type == 4) func = 3;\n    }\n\n    return {\n        func: func,\n        addr: addr\n    };\n}\n\n\nlet getRegOne = function(modAddr, regAddr) {\n    let funcAddr = splitRegAddr(regAddr, -1);\n    if (funcAddr.func != -1) {\n        let bytes = [];\n        bytes.push(modAddr);\n        bytes.push(funcAddr.func);\n        bytes.push(funcAddr.addr >> 8 & 0xFF);\n        bytes.push(funcAddr.addr & 0xFF);\n        bytes.push(0);\n        bytes.push(1);\n        let sum = common.CRC16.CalculateBytes(bytes);\n        bytes.push(sum.low);\n        bytes.push(sum.high);\n        return Buffer.from(bytes);\n    }\n    return funcAddr;\n}\n\n\nlet Modbus = function() {\n    this.addr = 1;\n    this.func = 0;\n    this.err = 0;\n    this.regs={};\n}\n\nModbus.prototype.CRC16 = CRCMaster;\nModbus.prototype.getRaw = function() {\n    \n};\n\ncommon.CRC16 = CRCMaster;\ncommon.modbus = {};\ncommon.modbus.splitRegAddr = splitRegAddr;\ncommon.modbus.getRegOne = getRegOne;\ncommon.modbus.setRegOne = null;\n\n\n\nreturn {payload: common};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 600,
        "wires": [
            [
                "f77d15f0cc88c3d7"
            ]
        ]
    },
    {
        "id": "e5bb14890b0c38d9",
        "type": "nd-device-shadow",
        "z": "e783d53461d94d52",
        "name": "影子设备管理器",
        "x": 640,
        "y": 480,
        "wires": [
            [
                "05d8271694e66a5a",
                "8a709b1a39d198bd"
            ],
            [
                "fcbb294d52e343ff",
                "49a8b560db5011dd"
            ],
            [
                "462f9b9b4c1c9686",
                "b4077782b22895dd"
            ],
            [
                "18a8e92bbcd0e565",
                "77c9ae202d6e4d40"
            ],
            [
                "03fa3e9086488ab0",
                "081fe17ea9c64ad5"
            ],
            [
                "9ebe84f46287f3a3",
                "f4e66866333b0f4e"
            ]
        ]
    },
    {
        "id": "03fa3e9086488ab0",
        "type": "debug",
        "z": "e783d53461d94d52",
        "name": "插件输出",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 360,
        "wires": []
    },
    {
        "id": "f57ff54afe0d2ac4",
        "type": "function",
        "z": "e783d53461d94d52",
        "name": "注册插件",
        "func": "let plugins = msg.payload;\n\nfunction regPlugin(plugin){\n    let msg = {\n        type: \"plugins\",\n        action: \"reg\",\n        payload: plugin\n    }\n    node.send(msg)\n}\n\nplugins.forEach(plugin => {\n    regPlugin(plugin)\n})\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 640,
        "wires": [
            [
                "3004876b5acc9d67"
            ]
        ]
    },
    {
        "id": "ce1d4ec51b7252a1",
        "type": "function",
        "z": "e783d53461d94d52",
        "name": "创建影子",
        "func": "let shadows = msg.payload;\n\nfunction newShadow(shadow){\n    let _msg = {\n        id: shadow.id,\n        action: \"create\",\n        payload: shadow\n    }\n    _msg._payload = _msg.payload\n    node.send(_msg)\n}\n\nlet len = shadows.length;\nlet pos = 0;\n\nfunction newPosShadow() {\n    if (pos < len) {\n        let shadow = shadows[pos];\n        newShadow(shadow);\n        pos++;\n        setTimeout(() => {\n             newPosShadow();\n        }, 100)\n    }\n}\n\n\nif (Array.isArray(shadows))\n    newPosShadow();\nelse\n    newShadow(shadows);\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 680,
        "wires": [
            [
                "33a3e92a73a4235c",
                "4803076b7899fa1c"
            ]
        ]
    },
    {
        "id": "2b520716dd63ab85",
        "type": "function",
        "z": "e783d53461d94d52",
        "name": "南向输入",
        "func": "msg.type = \"south\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 360,
        "wires": [
            [
                "e5bb14890b0c38d9",
                "1997dbb1a196a827"
            ]
        ]
    },
    {
        "id": "6e1b243376ea48e3",
        "type": "link in",
        "z": "e783d53461d94d52",
        "name": "南向输入",
        "links": [
            "160e3ce504dc0b49"
        ],
        "x": 265,
        "y": 360,
        "wires": [
            [
                "2b520716dd63ab85"
            ]
        ]
    },
    {
        "id": "459f1ef5e966022c",
        "type": "function",
        "z": "e783d53461d94d52",
        "name": "北向输入",
        "func": "msg.type = \"north\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 400,
        "wires": [
            [
                "e5bb14890b0c38d9",
                "37e02526c2d97328"
            ]
        ]
    },
    {
        "id": "44b456873768ef74",
        "type": "link in",
        "z": "e783d53461d94d52",
        "name": "北向输入",
        "links": [
            "adeb7a4edd9ba86a"
        ],
        "x": 265,
        "y": 400,
        "wires": [
            [
                "459f1ef5e966022c"
            ]
        ]
    },
    {
        "id": "05d8271694e66a5a",
        "type": "debug",
        "z": "e783d53461d94d52",
        "name": "南向输出",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 200,
        "wires": []
    },
    {
        "id": "fcbb294d52e343ff",
        "type": "debug",
        "z": "e783d53461d94d52",
        "name": "北向输出",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 240,
        "wires": []
    },
    {
        "id": "462f9b9b4c1c9686",
        "type": "debug",
        "z": "e783d53461d94d52",
        "name": "配置输出",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 280,
        "wires": []
    },
    {
        "id": "18a8e92bbcd0e565",
        "type": "debug",
        "z": "e783d53461d94d52",
        "name": "通知输出",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 320,
        "wires": []
    },
    {
        "id": "9ebe84f46287f3a3",
        "type": "debug",
        "z": "e783d53461d94d52",
        "name": "影子输出",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 400,
        "wires": []
    },
    {
        "id": "d36460ad49511b88",
        "type": "link in",
        "z": "e783d53461d94d52",
        "name": "注册插件输入",
        "links": [
            "aa6bdebe7db93d5a",
            "d10a7d8322cab14b"
        ],
        "x": 265,
        "y": 640,
        "wires": [
            [
                "f57ff54afe0d2ac4"
            ]
        ]
    },
    {
        "id": "b5034fa324ebdc56",
        "type": "link in",
        "z": "e783d53461d94d52",
        "name": "创建影子输入",
        "links": [
            "094870fa884c4cc9",
            "fd0f21d14e7ee260",
            "c277da7464c9b62a"
        ],
        "x": 265,
        "y": 680,
        "wires": [
            [
                "ce1d4ec51b7252a1"
            ]
        ]
    },
    {
        "id": "8a709b1a39d198bd",
        "type": "link out",
        "z": "e783d53461d94d52",
        "name": "南向输出",
        "mode": "link",
        "links": [
            "28e8b108665f9a11"
        ],
        "x": 1015,
        "y": 380,
        "wires": []
    },
    {
        "id": "49a8b560db5011dd",
        "type": "link out",
        "z": "e783d53461d94d52",
        "name": "北向输出",
        "mode": "link",
        "links": [
            "1cc085b57aa685b5"
        ],
        "x": 1015,
        "y": 420,
        "wires": []
    },
    {
        "id": "b4077782b22895dd",
        "type": "link out",
        "z": "e783d53461d94d52",
        "name": "配置输出",
        "mode": "link",
        "links": [
            "f60b95809d6e732b"
        ],
        "x": 1015,
        "y": 460,
        "wires": []
    },
    {
        "id": "77c9ae202d6e4d40",
        "type": "link out",
        "z": "e783d53461d94d52",
        "name": "通知输出",
        "mode": "link",
        "links": [],
        "x": 1015,
        "y": 500,
        "wires": []
    },
    {
        "id": "081fe17ea9c64ad5",
        "type": "link out",
        "z": "e783d53461d94d52",
        "name": "插件输出",
        "mode": "link",
        "links": [],
        "x": 1015,
        "y": 540,
        "wires": []
    },
    {
        "id": "f4e66866333b0f4e",
        "type": "link out",
        "z": "e783d53461d94d52",
        "name": "影子输出",
        "mode": "link",
        "links": [
            "804af47f31f5f402"
        ],
        "x": 1015,
        "y": 580,
        "wires": []
    },
    {
        "id": "51d05361be283073",
        "type": "function",
        "z": "e783d53461d94d52",
        "name": "配置输入",
        "func": "msg.type = \"config\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 440,
        "wires": [
            [
                "e5bb14890b0c38d9",
                "913f2e6c52706b09"
            ]
        ]
    },
    {
        "id": "c7c8fd1da752ce1a",
        "type": "link in",
        "z": "e783d53461d94d52",
        "name": "配置输入",
        "links": [
            "1aa48ea6374ea037"
        ],
        "x": 265,
        "y": 440,
        "wires": [
            [
                "51d05361be283073"
            ]
        ]
    },
    {
        "id": "b920dc1beead3090",
        "type": "function",
        "z": "e783d53461d94d52",
        "name": "通知输入",
        "func": "msg.type = \"notify\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 480,
        "wires": [
            [
                "e5bb14890b0c38d9",
                "5df5ead538de5405"
            ]
        ]
    },
    {
        "id": "5096ed59a325110f",
        "type": "link in",
        "z": "e783d53461d94d52",
        "name": "通知输入",
        "links": [],
        "x": 265,
        "y": 480,
        "wires": [
            [
                "b920dc1beead3090"
            ]
        ]
    },
    {
        "id": "3004876b5acc9d67",
        "type": "function",
        "z": "e783d53461d94d52",
        "name": "插件输入",
        "func": "msg.type = \"plugins\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 520,
        "wires": [
            [
                "e5bb14890b0c38d9",
                "4cf7c2fadff8eae2"
            ]
        ]
    },
    {
        "id": "71fdbf8fb9c88d8c",
        "type": "link in",
        "z": "e783d53461d94d52",
        "name": "插件输入",
        "links": [],
        "x": 265,
        "y": 520,
        "wires": [
            [
                "3004876b5acc9d67"
            ]
        ]
    },
    {
        "id": "33a3e92a73a4235c",
        "type": "function",
        "z": "e783d53461d94d52",
        "name": "影子输入",
        "func": "msg.type = \"shadows\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 560,
        "wires": [
            [
                "e5bb14890b0c38d9",
                "23d74eacbd820898"
            ]
        ]
    },
    {
        "id": "e599e319150ce318",
        "type": "link in",
        "z": "e783d53461d94d52",
        "name": "影子输入",
        "links": [],
        "x": 265,
        "y": 560,
        "wires": [
            [
                "33a3e92a73a4235c"
            ]
        ]
    },
    {
        "id": "8df646a780d91426",
        "type": "switch",
        "z": "e783d53461d94d52",
        "name": "配置事件",
        "property": "action",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "get",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "set",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 440,
        "y": 880,
        "wires": [
            [
                "d2c7d04d653f24c0"
            ],
            [
                "95b1a70fd7a5f871"
            ],
            []
        ]
    },
    {
        "id": "f60b95809d6e732b",
        "type": "link in",
        "z": "e783d53461d94d52",
        "name": "",
        "links": [
            "b4077782b22895dd"
        ],
        "x": 255,
        "y": 880,
        "wires": [
            [
                "8df646a780d91426"
            ]
        ]
    },
    {
        "id": "d2c7d04d653f24c0",
        "type": "change",
        "z": "e783d53461d94d52",
        "name": "get",
        "rules": [],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 610,
        "y": 840,
        "wires": [
            [
                "e52b39fce43ad18c",
                "8905f1fd3708ab28"
            ]
        ]
    },
    {
        "id": "95b1a70fd7a5f871",
        "type": "change",
        "z": "e783d53461d94d52",
        "name": "set",
        "rules": [],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 610,
        "y": 880,
        "wires": [
            [
                "c85e3530df64757b",
                "840738339878fdf6"
            ]
        ]
    },
    {
        "id": "af86d00370bfee30",
        "type": "http request",
        "z": "e783d53461d94d52",
        "d": true,
        "name": "shadows_get_device_config",
        "method": "PUT",
        "ret": "txt",
        "paytoqs": "query",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1000,
        "y": 1420,
        "wires": [
            [
                "b05ef4132c44b1f9"
            ]
        ]
    },
    {
        "id": "e52b39fce43ad18c",
        "type": "function",
        "z": "e783d53461d94d52",
        "name": "请求配置数据",
        "func": "let data = global.get(\"data\");\nlet url = data.shadows.dio_url;\n\n\nlet _msg = {}\n_msg.url = url + \"/shadows_get_device_config\";\n_msg.payload = msg\n_msg._msg = msg\nreturn _msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 1420,
        "wires": [
            [
                "af86d00370bfee30"
            ]
        ]
    },
    {
        "id": "1aa48ea6374ea037",
        "type": "link out",
        "z": "e783d53461d94d52",
        "name": "设备配置输出",
        "mode": "link",
        "links": [
            "c7c8fd1da752ce1a"
        ],
        "x": 1355,
        "y": 860,
        "wires": []
    },
    {
        "id": "c85e3530df64757b",
        "type": "function",
        "z": "e783d53461d94d52",
        "name": "保存配置数据",
        "func": "let data = global.get(\"data\");\nlet url = data.shadows.dio_url;\n\n\nlet _msg = {}\n_msg.url = url + \"/shadows_set_device_config\";\n_msg.payload = msg\n_msg._msg = msg\nreturn _msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 1460,
        "wires": [
            [
                "b2bf5b28c83e9460",
                "e4945be5adf93af3"
            ]
        ]
    },
    {
        "id": "b2bf5b28c83e9460",
        "type": "http request",
        "z": "e783d53461d94d52",
        "d": true,
        "name": "shadows_set_device_config",
        "method": "PUT",
        "ret": "txt",
        "paytoqs": "query",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1000,
        "y": 1460,
        "wires": [
            [
                "f5f1917b305b4189"
            ]
        ]
    },
    {
        "id": "f9bddef64b5b0a37",
        "type": "debug",
        "z": "e783d53461d94d52",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1470,
        "y": 1460,
        "wires": []
    },
    {
        "id": "f5f1917b305b4189",
        "type": "function",
        "z": "e783d53461d94d52",
        "name": "设置配置返回",
        "func": "\nreturn {payload:msg};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1260,
        "y": 1460,
        "wires": [
            [
                "f9bddef64b5b0a37"
            ]
        ]
    },
    {
        "id": "b05ef4132c44b1f9",
        "type": "function",
        "z": "e783d53461d94d52",
        "name": "获取配置返回",
        "func": "if (msg.payload) {\n    let payload = msg.payload;\n    if (typeof payload == \"string\")\n        payload = JSON.parse(msg.payload);\n    \n    if (Array.isArray(payload) && payload.length > 0) {\n        payload = payload[0];\n    } else {\n        payload = {}\n    }\n    \n    let _msg = msg._msg;\n    \n    \n    return {\n        action: \"get_res\",\n        id: msg.id || _msg && _msg.id,\n        payload: payload.payload || \"\"\n    };\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 860,
        "wires": [
            [
                "1aa48ea6374ea037"
            ]
        ]
    },
    {
        "id": "4cf7c2fadff8eae2",
        "type": "debug",
        "z": "e783d53461d94d52",
        "name": "插件输入",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 540,
        "y": 280,
        "wires": []
    },
    {
        "id": "1997dbb1a196a827",
        "type": "debug",
        "z": "e783d53461d94d52",
        "name": "南向输入",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 540,
        "y": 120,
        "wires": []
    },
    {
        "id": "37e02526c2d97328",
        "type": "debug",
        "z": "e783d53461d94d52",
        "name": "北向输入",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 540,
        "y": 160,
        "wires": []
    },
    {
        "id": "913f2e6c52706b09",
        "type": "debug",
        "z": "e783d53461d94d52",
        "name": "配置输入",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 540,
        "y": 200,
        "wires": []
    },
    {
        "id": "5df5ead538de5405",
        "type": "debug",
        "z": "e783d53461d94d52",
        "name": "通知输入",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 540,
        "y": 240,
        "wires": []
    },
    {
        "id": "23d74eacbd820898",
        "type": "debug",
        "z": "e783d53461d94d52",
        "name": "影子输入",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 540,
        "y": 320,
        "wires": []
    },
    {
        "id": "f9bd9e62bdf28047",
        "type": "function",
        "z": "e783d53461d94d52",
        "name": "南向订阅设备主题",
        "func": "let id = msg.payload.id;\nnode.send({\n        action: \"subscribe\",\n        topic: \"0/0/dev/\"+id+\"/0/0/0/0\"\n})\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 980,
        "wires": [
            [
                "9e37d384371f67cd"
            ]
        ]
    },
    {
        "id": "df3afa3ce9aebcde",
        "type": "switch",
        "z": "e783d53461d94d52",
        "name": "影子事件",
        "property": "action",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "create",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "remove",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 440,
        "y": 1040,
        "wires": [
            [
                "a723beda39984ef2"
            ],
            [
                "0a86c13670eb8d51"
            ],
            []
        ]
    },
    {
        "id": "a723beda39984ef2",
        "type": "change",
        "z": "e783d53461d94d52",
        "name": "create",
        "rules": [],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 610,
        "y": 1020,
        "wires": [
            [
                "703ca089e7e50630"
            ]
        ]
    },
    {
        "id": "9e37d384371f67cd",
        "type": "link out",
        "z": "e783d53461d94d52",
        "name": "南向订阅设备主题输出",
        "mode": "link",
        "links": [
            "cb11d32cb643517e"
        ],
        "x": 1135,
        "y": 980,
        "wires": []
    },
    {
        "id": "804af47f31f5f402",
        "type": "link in",
        "z": "e783d53461d94d52",
        "name": "",
        "links": [
            "f4e66866333b0f4e"
        ],
        "x": 255,
        "y": 1020,
        "wires": [
            [
                "df3afa3ce9aebcde"
            ]
        ]
    },
    {
        "id": "0c73f0a8b124f48f",
        "type": "function",
        "z": "e783d53461d94d52",
        "name": "北向订阅控制主题",
        "func": "let id = msg.payload.id;\nnode.send([{\n        action: \"subscribe\",\n        topic: \"0/0/0/0/dev/\"+id+\"/0/0\"\n}, null])\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 1060,
        "wires": [
            [
                "717675b7e9e6ca34"
            ]
        ]
    },
    {
        "id": "717675b7e9e6ca34",
        "type": "link out",
        "z": "e783d53461d94d52",
        "name": "北向订阅控制主题输出",
        "mode": "link",
        "links": [
            "0a01171c8c50575e"
        ],
        "x": 1135,
        "y": 1060,
        "wires": []
    },
    {
        "id": "b294625c08bbf52d",
        "type": "debug",
        "z": "e783d53461d94d52",
        "name": "影子创建失败",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 1140,
        "wires": []
    },
    {
        "id": "703ca089e7e50630",
        "type": "function",
        "z": "e783d53461d94d52",
        "name": "创建成功？",
        "func": "if (typeof msg.payload == \"object\" && msg.payload.shadow) {\n    node.send([msg, null])    \n} else {\n    msg.topic = msg._payload.id + \":\" + msg._payload.model\n    node.send([null, msg])    \n}\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 1020,
        "wires": [
            [
                "f9bd9e62bdf28047",
                "0c73f0a8b124f48f",
                "2182b140b7f7102f",
                "7fa151f373825f57"
            ],
            [
                "b294625c08bbf52d"
            ]
        ]
    },
    {
        "id": "2182b140b7f7102f",
        "type": "function",
        "z": "e783d53461d94d52",
        "name": "南向订阅设备状态",
        "func": "let id = msg.payload.id;\nnode.send({\n        action: \"subscribe\",\n        topic: \"0/0/dev/\"+id+\"/0/0/evt/status\"\n})\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 1020,
        "wires": [
            [
                "faa7103ab3cdb32e"
            ]
        ]
    },
    {
        "id": "faa7103ab3cdb32e",
        "type": "link out",
        "z": "e783d53461d94d52",
        "name": "南向订阅设备状态输出",
        "mode": "link",
        "links": [
            "5230373797183e4e"
        ],
        "x": 1135,
        "y": 1020,
        "wires": []
    },
    {
        "id": "4803076b7899fa1c",
        "type": "debug",
        "z": "e783d53461d94d52",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 610,
        "y": 680,
        "wires": []
    },
    {
        "id": "7fa151f373825f57",
        "type": "function",
        "z": "e783d53461d94d52",
        "d": true,
        "name": "北向订阅入网主题",
        "func": "let id = msg.payload.id;\nlet topics = [\n    \"0/0/dev/\"+id+\"/0/0/evt/device_joined\",\n    \"0/0/dev/\"+id+\"/0/0/evt/device_leave\",\n    \"0/0/dev/\"+id+\"/0/0/evt/device_interview\",\n    ]\nnode.send([{\n        action: \"subscribe\",\n        topic: topics\n}, null])\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 1100,
        "wires": [
            [
                "0960e647ecb860f4"
            ]
        ]
    },
    {
        "id": "0960e647ecb860f4",
        "type": "link out",
        "z": "e783d53461d94d52",
        "name": "北向订阅子设备入网主题输出",
        "mode": "link",
        "links": [],
        "x": 1185,
        "y": 1140,
        "wires": []
    },
    {
        "id": "e4945be5adf93af3",
        "type": "debug",
        "z": "e783d53461d94d52",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 970,
        "y": 1520,
        "wires": []
    },
    {
        "id": "27f5ef14479b09fa",
        "type": "function",
        "z": "e783d53461d94d52",
        "name": "删除影子",
        "func": "msg.action = \"remove\";\nreturn msg;\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 720,
        "wires": [
            [
                "33a3e92a73a4235c",
                "486fb7956bcb6667"
            ]
        ]
    },
    {
        "id": "edba0059151c0b88",
        "type": "link in",
        "z": "e783d53461d94d52",
        "name": "删除影子输入",
        "links": [
            "dac082f1f21e208f"
        ],
        "x": 265,
        "y": 720,
        "wires": [
            [
                "27f5ef14479b09fa"
            ]
        ]
    },
    {
        "id": "486fb7956bcb6667",
        "type": "debug",
        "z": "e783d53461d94d52",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "id",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 590,
        "y": 720,
        "wires": []
    },
    {
        "id": "0a86c13670eb8d51",
        "type": "change",
        "z": "e783d53461d94d52",
        "name": "remvoe",
        "rules": [],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 620,
        "y": 1060,
        "wires": [
            [
                "768e5f2daf216c2b"
            ]
        ]
    },
    {
        "id": "768e5f2daf216c2b",
        "type": "function",
        "z": "e783d53461d94d52",
        "d": true,
        "name": "北向退订阅入网主题",
        "func": "let id = msg.id;\nlet topics = [\n    \"0/0/dev/\"+id+\"/0/0/evt/device_joined\",\n    \"0/0/dev/\"+id+\"/0/0/evt/device_leave\",\n    \"0/0/dev/\"+id+\"/0/0/evt/device_interview\",\n    ]\nnode.send([{\n        action: \"unsubscribe\",\n        topic: topics\n}, null])\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 1200,
        "wires": [
            [
                "0960e647ecb860f4",
                "f7fa0a5659e5db88"
            ]
        ]
    },
    {
        "id": "f7fa0a5659e5db88",
        "type": "debug",
        "z": "e783d53461d94d52",
        "name": "北向退订阅入网主题",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1300,
        "y": 1220,
        "wires": []
    },
    {
        "id": "528e66c83327ed6d",
        "type": "inject",
        "z": "e783d53461d94d52",
        "name": "",
        "props": [
            {
                "p": "id",
                "v": "ESP8266x005dce30",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 820,
        "wires": [
            [
                "27f5ef14479b09fa"
            ]
        ]
    },
    {
        "id": "8905f1fd3708ab28",
        "type": "function",
        "z": "e783d53461d94d52",
        "name": "请求配置数据",
        "func": "let data = global.get(\"data\");\n\npayload = {\n    hd: {\n        entry: {\n            type: \"svc\",\n            id: \"shadows_get_device_config\"\n        },\n        sid: msg.id\n    },\n    pld: msg\n    \n}\n\nreturn {payload: payload};\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 840,
        "wires": [
            [
                "4f7045dc033c2a06"
            ]
        ]
    },
    {
        "id": "4f7045dc033c2a06",
        "type": "link out",
        "z": "e783d53461d94d52",
        "name": "请求配置数据输出",
        "mode": "link",
        "links": [
            "77a6699fe0159bd7"
        ],
        "x": 925,
        "y": 860,
        "wires": []
    },
    {
        "id": "ac20d7b05bd8d11e",
        "type": "link in",
        "z": "e783d53461d94d52",
        "name": "获取配置返回输入",
        "links": [
            "bb8da9155e0fae25"
        ],
        "x": 1055,
        "y": 860,
        "wires": [
            [
                "b05ef4132c44b1f9",
                "dd36fe46c42acedb"
            ]
        ]
    },
    {
        "id": "91cc5e6f7ce768b8",
        "type": "inject",
        "z": "e783d53461d94d52",
        "name": "",
        "props": [
            {
                "p": "id",
                "v": "ESP8266x005dce30",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 430,
        "y": 1200,
        "wires": [
            [
                "8905f1fd3708ab28"
            ]
        ]
    },
    {
        "id": "840738339878fdf6",
        "type": "function",
        "z": "e783d53461d94d52",
        "name": "保存配置数据",
        "func": "let data = global.get(\"data\");\n\npayload = {\n    hd: {\n        entry: {\n            type: \"svc\",\n            id: \"shadows_set_device_config\"\n        },\n        sid: msg.id\n    },\n    pld: msg\n    \n}\n\nreturn {payload: payload};\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 880,
        "wires": [
            [
                "4f7045dc033c2a06"
            ]
        ]
    },
    {
        "id": "b5d9eff78b86897c",
        "type": "inject",
        "z": "e783d53461d94d52",
        "name": "",
        "props": [
            {
                "p": "id",
                "v": "ESP8266x00c17ca1",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 810,
        "y": 740,
        "wires": [
            [
                "8905f1fd3708ab28"
            ]
        ]
    },
    {
        "id": "dd36fe46c42acedb",
        "type": "debug",
        "z": "e783d53461d94d52",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1390,
        "y": 720,
        "wires": []
    },
    {
        "id": "a5fab40b8a440bb5",
        "type": "mqtt in",
        "z": "0d352f1d7c785601",
        "name": "南向订阅",
        "topic": "",
        "qos": "2",
        "datatype": "json",
        "broker": "acbe893ce0e86722",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 1,
        "x": 460,
        "y": 400,
        "wires": [
            [
                "821bd3a334fab03b"
            ]
        ]
    },
    {
        "id": "cb11d32cb643517e",
        "type": "link in",
        "z": "0d352f1d7c785601",
        "name": "南向订阅",
        "links": [
            "9e37d384371f67cd"
        ],
        "x": 165,
        "y": 400,
        "wires": [
            [
                "a5fab40b8a440bb5"
            ]
        ]
    },
    {
        "id": "28e8b108665f9a11",
        "type": "link in",
        "z": "0d352f1d7c785601",
        "name": "南向输出",
        "links": [
            "8a709b1a39d198bd"
        ],
        "x": 165,
        "y": 480,
        "wires": [
            [
                "799983fe4c972017"
            ]
        ]
    },
    {
        "id": "799983fe4c972017",
        "type": "function",
        "z": "0d352f1d7c785601",
        "name": "主题",
        "func": "msg.topic = \"0/0/0/0/dev/\" + msg.id + \"/0/0\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 480,
        "wires": [
            [
                "4e176511107e7771",
                "7d341f9dafad9a1d"
            ]
        ]
    },
    {
        "id": "160e3ce504dc0b49",
        "type": "link out",
        "z": "0d352f1d7c785601",
        "name": "南向输入",
        "mode": "link",
        "links": [
            "6e1b243376ea48e3"
        ],
        "x": 805,
        "y": 400,
        "wires": []
    },
    {
        "id": "1023e03ef3a77189",
        "type": "mqtt in",
        "z": "0d352f1d7c785601",
        "name": "北向订阅",
        "topic": "",
        "qos": "2",
        "datatype": "json",
        "broker": "b5ef31a7a90ee4e8",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 1,
        "x": 460,
        "y": 660,
        "wires": [
            [
                "820f08a18a27abbf"
            ]
        ]
    },
    {
        "id": "0a01171c8c50575e",
        "type": "link in",
        "z": "0d352f1d7c785601",
        "name": "北向订阅",
        "links": [
            "717675b7e9e6ca34"
        ],
        "x": 215,
        "y": 660,
        "wires": [
            [
                "1023e03ef3a77189"
            ]
        ]
    },
    {
        "id": "1cc085b57aa685b5",
        "type": "link in",
        "z": "0d352f1d7c785601",
        "name": "北向输出",
        "links": [
            "49a8b560db5011dd",
            "b9b3b0731dab17c3"
        ],
        "x": 215,
        "y": 780,
        "wires": [
            [
                "628cf8f1e9ccf497"
            ]
        ]
    },
    {
        "id": "3134d006736621c4",
        "type": "function",
        "z": "0d352f1d7c785601",
        "name": "默认主题",
        "func": "msg.topic = \"0/0/dev/\" + msg.id + \"/0/0/0/0\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 800,
        "wires": [
            [
                "6cb182dc40c0572c"
            ]
        ]
    },
    {
        "id": "adeb7a4edd9ba86a",
        "type": "link out",
        "z": "0d352f1d7c785601",
        "name": "北向输入",
        "mode": "link",
        "links": [
            "44b456873768ef74"
        ],
        "x": 805,
        "y": 660,
        "wires": []
    },
    {
        "id": "4e176511107e7771",
        "type": "mqtt out",
        "z": "0d352f1d7c785601",
        "name": "南向发布",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "38d4df9bbbc86ac8",
        "x": 460,
        "y": 480,
        "wires": []
    },
    {
        "id": "6cb182dc40c0572c",
        "type": "mqtt out",
        "z": "0d352f1d7c785601",
        "name": "北向发布",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "e0b970ba11de7cc5",
        "x": 660,
        "y": 780,
        "wires": []
    },
    {
        "id": "821bd3a334fab03b",
        "type": "function",
        "z": "0d352f1d7c785601",
        "name": "设备ID",
        "func": "msg.topics = msg.topic.split(\"/\");\nmsg.id = msg.topics[3]\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 400,
        "wires": [
            [
                "160e3ce504dc0b49"
            ]
        ]
    },
    {
        "id": "820f08a18a27abbf",
        "type": "function",
        "z": "0d352f1d7c785601",
        "name": "设备ID",
        "func": "msg.topics = msg.topic.split(\"/\");\nmsg.id = msg.topics[5]\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 660,
        "wires": [
            [
                "adeb7a4edd9ba86a",
                "985bc775adafa0bb"
            ]
        ]
    },
    {
        "id": "b7a8b84e682501c7",
        "type": "http request",
        "z": "0d352f1d7c785601",
        "name": "shadows_get_plugins",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "query",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 640,
        "y": 80,
        "wires": [
            [
                "3b4462e314905f6b"
            ]
        ]
    },
    {
        "id": "b44486d7e2a518c2",
        "type": "inject",
        "z": "0d352f1d7c785601",
        "name": "shadows_get_plugins",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "5",
        "topic": "",
        "x": 220,
        "y": 80,
        "wires": [
            [
                "c5eeab9c154db336"
            ]
        ]
    },
    {
        "id": "ee8c2f3a2721a58c",
        "type": "inject",
        "z": "0d352f1d7c785601",
        "name": "shadows_get_devices",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 220,
        "y": 140,
        "wires": [
            [
                "024c5c7923b1db29"
            ]
        ]
    },
    {
        "id": "3b4462e314905f6b",
        "type": "json",
        "z": "0d352f1d7c785601",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 830,
        "y": 80,
        "wires": [
            [
                "024c5c7923b1db29",
                "aa6bdebe7db93d5a"
            ]
        ]
    },
    {
        "id": "a017cabe55d2e3c1",
        "type": "http request",
        "z": "0d352f1d7c785601",
        "name": "shadows_get_devices",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "query",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 640,
        "y": 140,
        "wires": [
            [
                "188254f9b561e229"
            ]
        ]
    },
    {
        "id": "188254f9b561e229",
        "type": "json",
        "z": "0d352f1d7c785601",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 830,
        "y": 140,
        "wires": [
            [
                "094870fa884c4cc9",
                "89b5920226e99050"
            ]
        ]
    },
    {
        "id": "c5eeab9c154db336",
        "type": "function",
        "z": "0d352f1d7c785601",
        "name": "获取插件",
        "func": "let data = global.get(\"data\")\nlet url = data.shadows.dio_url;\n\nmsg.url = url + \"/shadows_get_plugins\"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 80,
        "wires": [
            [
                "b7a8b84e682501c7"
            ]
        ]
    },
    {
        "id": "024c5c7923b1db29",
        "type": "function",
        "z": "0d352f1d7c785601",
        "name": "获取设备",
        "func": "let data = global.get(\"data\");\nlet url = data.shadows.dio_url;\n\n\nmsg = {}\nmsg.url = url + \"/shadows_get_devices\";\nmsg.payload = msg.payload || {}\nmsg.payload.edg_id = data.ids.edg\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 140,
        "wires": [
            [
                "a017cabe55d2e3c1"
            ]
        ]
    },
    {
        "id": "aa6bdebe7db93d5a",
        "type": "link out",
        "z": "0d352f1d7c785601",
        "name": "获取插件输出",
        "mode": "link",
        "links": [
            "d36460ad49511b88"
        ],
        "x": 1005,
        "y": 80,
        "wires": []
    },
    {
        "id": "094870fa884c4cc9",
        "type": "link out",
        "z": "0d352f1d7c785601",
        "name": "获取设备输出",
        "mode": "link",
        "links": [
            "54d5ea7c0e306a6c",
            "b5034fa324ebdc56"
        ],
        "x": 1005,
        "y": 140,
        "wires": []
    },
    {
        "id": "985bc775adafa0bb",
        "type": "debug",
        "z": "0d352f1d7c785601",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 930,
        "y": 620,
        "wires": []
    },
    {
        "id": "7d341f9dafad9a1d",
        "type": "debug",
        "z": "0d352f1d7c785601",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 470,
        "y": 520,
        "wires": []
    },
    {
        "id": "a3dc66a83f805bb1",
        "type": "inject",
        "z": "0d352f1d7c785601",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "x": 170,
        "y": 300,
        "wires": [
            [
                "dd907b890a084ac6"
            ]
        ]
    },
    {
        "id": "dd907b890a084ac6",
        "type": "function",
        "z": "0d352f1d7c785601",
        "name": "南向连接",
        "func": "let data = global.get(\"data\");\n// let common = global.get(\"common\");\n// data.mqtt.clientid = data.mqtt.clientid || (data.ids.edg + \"-\" + common.guid(8));\n\nmsg = {};\nmsg.action = \"connect\";\nmsg.broker = {\n    autoConnect: true,\n    cleansession: false,\n    force: false,\n    // clientid: data.mqtt.clientid\n}\nObject.assign(msg.broker, data.shadows.mqtt.south.broker);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 300,
        "wires": [
            [
                "a3e19843923ca69b",
                "619cb1edad5ffd76",
                "b399a669eadfaf77"
            ]
        ]
    },
    {
        "id": "d38bcfcdd8e2657e",
        "type": "inject",
        "z": "0d352f1d7c785601",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "x": 170,
        "y": 600,
        "wires": [
            [
                "19a5b67690622647"
            ]
        ]
    },
    {
        "id": "19a5b67690622647",
        "type": "function",
        "z": "0d352f1d7c785601",
        "name": "北向连接",
        "func": "let data = global.get(\"data\");\n\nmsg = {};\nmsg.action = \"connect\";\nmsg.broker = {\n    autoConnect: true,\n    cleansession: false,\n    force: false,\n}\nObject.assign(msg.broker, data.shadows.mqtt.north.broker);\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 600,
        "wires": [
            [
                "3a4b1b544f3aad0a",
                "29f8942fd39250f8"
            ]
        ]
    },
    {
        "id": "b1b26ec4df650231",
        "type": "status",
        "z": "0d352f1d7c785601",
        "name": "",
        "scope": [
            "a5fab40b8a440bb5",
            "1023e03ef3a77189",
            "4e176511107e7771",
            "6cb182dc40c0572c",
            "90174b97386a8810"
        ],
        "x": 990,
        "y": 460,
        "wires": [
            [
                "21f8b284430ba53f"
            ]
        ]
    },
    {
        "id": "89b5920226e99050",
        "type": "debug",
        "z": "0d352f1d7c785601",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1130,
        "y": 100,
        "wires": []
    },
    {
        "id": "90174b97386a8810",
        "type": "mqtt in",
        "z": "0d352f1d7c785601",
        "name": "南向状态订阅",
        "topic": "",
        "qos": "2",
        "datatype": "json",
        "broker": "9d3969c0e96fa621",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 1,
        "x": 470,
        "y": 440,
        "wires": [
            [
                "821bd3a334fab03b"
            ]
        ]
    },
    {
        "id": "5230373797183e4e",
        "type": "link in",
        "z": "0d352f1d7c785601",
        "name": "南向状态订阅",
        "links": [
            "faa7103ab3cdb32e"
        ],
        "x": 165,
        "y": 440,
        "wires": [
            [
                "90174b97386a8810"
            ]
        ]
    },
    {
        "id": "a3e19843923ca69b",
        "type": "function",
        "z": "0d352f1d7c785601",
        "name": "south_input",
        "func": "let common = global.get(\"common\");\n \nmsg.broker.clientid = \"south_input_\" + common.guid(8)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 260,
        "wires": [
            [
                "a5fab40b8a440bb5"
            ]
        ]
    },
    {
        "id": "619cb1edad5ffd76",
        "type": "function",
        "z": "0d352f1d7c785601",
        "name": "south_status",
        "func": "let common = global.get(\"common\");\n\nmsg.broker.clientid = \"south_status_\" + common.guid(8)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 300,
        "wires": [
            [
                "90174b97386a8810"
            ]
        ]
    },
    {
        "id": "b399a669eadfaf77",
        "type": "function",
        "z": "0d352f1d7c785601",
        "name": "south_output",
        "func": "let common = global.get(\"common\");\n\nmsg.broker.clientid = \"south_output_\" + common.guid(8)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 340,
        "wires": [
            [
                "4e176511107e7771"
            ]
        ]
    },
    {
        "id": "3a4b1b544f3aad0a",
        "type": "function",
        "z": "0d352f1d7c785601",
        "name": "north_input",
        "func": "let common = global.get(\"common\");\n \nmsg.broker.clientid = \"north_input_\" + common.guid(8)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 580,
        "wires": [
            [
                "1023e03ef3a77189",
                "8fc01abbaf55e7ee"
            ]
        ]
    },
    {
        "id": "29f8942fd39250f8",
        "type": "function",
        "z": "0d352f1d7c785601",
        "name": "north_output",
        "func": "let common = global.get(\"common\");\n\nmsg.broker.clientid = \"north_output_\" + common.guid(8)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 620,
        "wires": [
            [
                "6cb182dc40c0572c"
            ]
        ]
    },
    {
        "id": "6e965839895c77db",
        "type": "mqtt in",
        "z": "0d352f1d7c785601",
        "name": "北向边缘订阅",
        "topic": "",
        "qos": "2",
        "datatype": "json",
        "broker": "b5ef31a7a90ee4e8",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 1,
        "x": 470,
        "y": 700,
        "wires": [
            [
                "6639ab6747ad417e"
            ]
        ]
    },
    {
        "id": "54d5ea7c0e306a6c",
        "type": "link in",
        "z": "0d352f1d7c785601",
        "name": "北向设备入网订阅",
        "links": [
            "094870fa884c4cc9",
            "c277da7464c9b62a"
        ],
        "x": 215,
        "y": 700,
        "wires": [
            [
                "91b4cdd17e0db665"
            ]
        ]
    },
    {
        "id": "6639ab6747ad417e",
        "type": "function",
        "z": "0d352f1d7c785601",
        "name": "设备ID",
        "func": "//msg.topics = msg.topic.split(\"/\");\n//msg.id = msg.topics[3]\nmsg.id = msg.payload.pld.id\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 700,
        "wires": [
            [
                "6f19c62b466942fa"
            ]
        ]
    },
    {
        "id": "6f19c62b466942fa",
        "type": "switch",
        "z": "0d352f1d7c785601",
        "name": "入/退网",
        "property": "payload.hd.entry.id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "device_joined",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "device_interview",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "device_leave",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 780,
        "y": 700,
        "wires": [
            [
                "d2bb8a72f26212be"
            ],
            [
                "d2bb8a72f26212be"
            ],
            [
                "27adf9e539c536ec"
            ]
        ]
    },
    {
        "id": "27adf9e539c536ec",
        "type": "function",
        "z": "0d352f1d7c785601",
        "name": "device_leave",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 720,
        "wires": [
            [
                "434081b1a05d9e6e",
                "797867e60041c78f"
            ]
        ]
    },
    {
        "id": "d2bb8a72f26212be",
        "type": "function",
        "z": "0d352f1d7c785601",
        "name": "device_joined",
        "func": "return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 680,
        "wires": [
            [
                "c45acefadf3f106e",
                "7f3db4044f721b39"
            ]
        ]
    },
    {
        "id": "fd0f21d14e7ee260",
        "type": "link out",
        "z": "0d352f1d7c785601",
        "name": "设备入网输出",
        "mode": "link",
        "links": [
            "b5034fa324ebdc56"
        ],
        "x": 1265,
        "y": 680,
        "wires": []
    },
    {
        "id": "628cf8f1e9ccf497",
        "type": "switch",
        "z": "0d352f1d7c785601",
        "name": "",
        "property": "payload.hd.entry.id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "device_joined",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "device_leave",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "device_interview",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 310,
        "y": 780,
        "wires": [
            [
                "eacc7ffc75247a1b"
            ],
            [
                "eacc7ffc75247a1b"
            ],
            [
                "eacc7ffc75247a1b"
            ],
            [
                "3134d006736621c4"
            ]
        ]
    },
    {
        "id": "eacc7ffc75247a1b",
        "type": "function",
        "z": "0d352f1d7c785601",
        "name": "入网主题",
        "func": "msg.topic = \"0/0/dev/\" + msg.id + \"/0/0/evt/\" +  msg.payload.hd.entry.id;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 760,
        "wires": [
            [
                "6cb182dc40c0572c"
            ]
        ]
    },
    {
        "id": "c45acefadf3f106e",
        "type": "debug",
        "z": "0d352f1d7c785601",
        "name": "设备入网",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1160,
        "y": 620,
        "wires": []
    },
    {
        "id": "434081b1a05d9e6e",
        "type": "debug",
        "z": "0d352f1d7c785601",
        "name": "设备脱网",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1120,
        "y": 840,
        "wires": []
    },
    {
        "id": "dac082f1f21e208f",
        "type": "link out",
        "z": "0d352f1d7c785601",
        "name": "设备脱网输出",
        "mode": "link",
        "links": [
            "edba0059151c0b88"
        ],
        "x": 1265,
        "y": 720,
        "wires": []
    },
    {
        "id": "797867e60041c78f",
        "type": "function",
        "z": "0d352f1d7c785601",
        "name": "删除影子",
        "func": "let pld = msg.payload.pld;\n\nreturn {\n    id: pld.id,\n    payload: pld\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 720,
        "wires": [
            [
                "dac082f1f21e208f"
            ]
        ]
    },
    {
        "id": "7f3db4044f721b39",
        "type": "function",
        "z": "0d352f1d7c785601",
        "name": "创建影子",
        "func": "let pld = msg.payload.pld;\n\nreturn {\n    id: pld.id,\n    payload: pld\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 680,
        "wires": [
            [
                "fd0f21d14e7ee260"
            ]
        ]
    },
    {
        "id": "8fc01abbaf55e7ee",
        "type": "function",
        "z": "0d352f1d7c785601",
        "name": "北向入网订阅",
        "func": "let data = global.get(\"data\");\n\nlet id = data.ids.edg;\nlet topics = [\n    \"0/0/0/0/edg/\"+id+\"/evt/device_joined\",\n    \"0/0/0/0/edg/\"+id+\"/evt/device_leave\",\n    \"0/0/0/0/edg/\"+id+\"/evt/device_interview\",\n    ]\nnode.send([{\n        action: \"subscribe\",\n        topic: topics\n}, null])\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 580,
        "wires": [
            [
                "6e965839895c77db"
            ]
        ]
    },
    {
        "id": "91b4cdd17e0db665",
        "type": "function",
        "z": "0d352f1d7c785601",
        "name": "边缘订阅",
        "func": "let data = global.get(\"data\");\n\nlet id = data.ids.edg;\nlet topics = [\n    \"0/0/0/0/edg/\"+id+\"/+/+\"\n    ]\nnode.send([{\n        action: \"subscribe\",\n        topic: topics\n}, null])\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 700,
        "wires": [
            [
                "6e965839895c77db"
            ]
        ]
    },
    {
        "id": "21f8b284430ba53f",
        "type": "function",
        "z": "0d352f1d7c785601",
        "name": "",
        "func": "let date = new Date()\nmsg.tm=date.toLocaleString();\n\nreturn {payload: msg};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 460,
        "wires": [
            [
                "d6cadcc63d204593",
                "fee3b5c053f26757"
            ]
        ]
    },
    {
        "id": "d6cadcc63d204593",
        "type": "debug",
        "z": "0d352f1d7c785601",
        "name": "连接断开",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1340,
        "y": 460,
        "wires": []
    },
    {
        "id": "fee3b5c053f26757",
        "type": "file",
        "z": "0d352f1d7c785601",
        "name": "",
        "filename": "log.txt",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 1330,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "b2168926188a5904",
        "type": "link in",
        "z": "0d352f1d7c785601",
        "name": "数据连接输入",
        "links": [
            "f70a2bb4819417da"
        ],
        "x": 215,
        "y": 1080,
        "wires": [
            [
                "88a125ccc32b4a71"
            ]
        ]
    },
    {
        "id": "88a125ccc32b4a71",
        "type": "function",
        "z": "0d352f1d7c785601",
        "name": "数据连接",
        "func": "let data = global.get(\"data\");\n\nmsg = {};\nmsg.action = \"connect\";\nmsg.broker = {\n    autoConnect: true,\n    cleansession: false,\n    force: false\n}\nObject.assign(msg.broker, data.shadows.mqtt.south.broker);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1080,
        "wires": [
            [
                "cd4afa8b8133945b",
                "3ecc698ece0dd59f",
                "a33fdc542c669b38",
                "304409c6a48e3191"
            ]
        ]
    },
    {
        "id": "cd4afa8b8133945b",
        "type": "function",
        "z": "0d352f1d7c785601",
        "name": "dataio_output",
        "func": "let common = global.get(\"common\");\n\nmsg.broker.clientid = \"dataio_output_\" + common.guid(8)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 1080,
        "wires": [
            [
                "04bebc4484d6545e"
            ]
        ]
    },
    {
        "id": "04bebc4484d6545e",
        "type": "mqtt out",
        "z": "0d352f1d7c785601",
        "name": "数据服务发布",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "ccc535250cd7677b",
        "x": 590,
        "y": 1200,
        "wires": []
    },
    {
        "id": "b887e394a5738c26",
        "type": "function",
        "z": "0d352f1d7c785601",
        "name": "发布主题",
        "func": "\nlet data = global.get(\"data\");\nlet id = data.ids.edg;\nlet hd = msg.payload.hd;\nlet topic = \"0/0/edg/\" + id + \n            \"/\" + (hd.to && hd.to.type || \"dio\") + \n            \"/\" + (hd.to && hd.to.id || data.ids.dio || \"ndiot-dio\") +\n            \"/\" +hd.entry.type + \"/\" + hd.entry.id\n            \nmsg.topic = msg.topic || topic\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1200,
        "wires": [
            [
                "04bebc4484d6545e",
                "ed6cc0f42be8422c"
            ]
        ]
    },
    {
        "id": "77a6699fe0159bd7",
        "type": "link in",
        "z": "0d352f1d7c785601",
        "name": "数据发布输入",
        "links": [
            "4ebb953fc2da0575",
            "4f7045dc033c2a06"
        ],
        "x": 215,
        "y": 1200,
        "wires": [
            [
                "b887e394a5738c26"
            ]
        ]
    },
    {
        "id": "93954e61143fa48c",
        "type": "mqtt in",
        "z": "0d352f1d7c785601",
        "name": "数据服务订阅",
        "topic": "",
        "qos": "2",
        "datatype": "json",
        "broker": "340486ab3bf5bf39",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 1,
        "x": 580,
        "y": 1140,
        "wires": [
            [
                "f64765ee0e62dc76"
            ]
        ]
    },
    {
        "id": "3ecc698ece0dd59f",
        "type": "function",
        "z": "0d352f1d7c785601",
        "name": "dataio_input",
        "func": "let common = global.get(\"common\");\n\nmsg.broker.clientid = \"dataio_input_\" + common.guid(8)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 1040,
        "wires": [
            [
                "93954e61143fa48c"
            ]
        ]
    },
    {
        "id": "a33fdc542c669b38",
        "type": "function",
        "z": "0d352f1d7c785601",
        "name": "订阅主题",
        "func": "\nlet data = global.get(\"data\");\n\nlet id = data.ids.edg;\nlet topics = [\n    \"+/+/+/+/edg/\" + id + \"/+/+\"\n    ]\n    \nreturn {\n        action: \"subscribe\",\n        topic: topics\n    }\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 1140,
        "wires": [
            [
                "93954e61143fa48c"
            ]
        ]
    },
    {
        "id": "9d1336cb73be0cad",
        "type": "debug",
        "z": "0d352f1d7c785601",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1190,
        "y": 1300,
        "wires": []
    },
    {
        "id": "ed6cc0f42be8422c",
        "type": "debug",
        "z": "0d352f1d7c785601",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 650,
        "y": 1280,
        "wires": []
    },
    {
        "id": "dbb174eced0e90b2",
        "type": "function",
        "z": "0d352f1d7c785601",
        "name": "获取插件",
        "func": "let data = global.get(\"data\");\n\npayload = {\n    hd: {\n        entry: {\n            type: \"svc\",\n            id: \"shadows_get_plugins\"\n        }\n    },\n    pld: {\n        edg_id: data.ids.edg\n    }\n    \n}\n\nreturn {payload: payload};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 1440,
        "wires": [
            [
                "b887e394a5738c26"
            ]
        ]
    },
    {
        "id": "1c375e15a1a8b95f",
        "type": "inject",
        "z": "0d352f1d7c785601",
        "name": "shadows_get_plugins",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "300",
        "topic": "",
        "x": 260,
        "y": 1440,
        "wires": [
            [
                "dbb174eced0e90b2"
            ]
        ]
    },
    {
        "id": "f64765ee0e62dc76",
        "type": "switch",
        "z": "0d352f1d7c785601",
        "name": "数据服务",
        "property": "payload.hd.entry.id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "shadows_get_plugins",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "shadows_get_devices",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "shadows_get_device_config",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "shadows_set_device_config",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 840,
        "y": 1140,
        "wires": [
            [
                "9f62c7a67b12296b",
                "6d73c3dbf25efcd9"
            ],
            [
                "cfbe796f07da9f3e"
            ],
            [
                "336fd322e21dfe9e"
            ],
            []
        ]
    },
    {
        "id": "d10a7d8322cab14b",
        "type": "link out",
        "z": "0d352f1d7c785601",
        "name": "获取插件输出",
        "mode": "link",
        "links": [
            "d36460ad49511b88"
        ],
        "x": 1145,
        "y": 1100,
        "wires": []
    },
    {
        "id": "c277da7464c9b62a",
        "type": "link out",
        "z": "0d352f1d7c785601",
        "name": "获取设备输出",
        "mode": "link",
        "links": [
            "54d5ea7c0e306a6c",
            "b5034fa324ebdc56"
        ],
        "x": 1145,
        "y": 1140,
        "wires": []
    },
    {
        "id": "9f62c7a67b12296b",
        "type": "function",
        "z": "0d352f1d7c785601",
        "name": "转换",
        "func": "\nreturn {payload: msg.payload.pld};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 1100,
        "wires": [
            [
                "d10a7d8322cab14b",
                "9d1336cb73be0cad"
            ]
        ]
    },
    {
        "id": "cfbe796f07da9f3e",
        "type": "function",
        "z": "0d352f1d7c785601",
        "name": "转换",
        "func": "\nreturn {payload: msg.payload.pld};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 1140,
        "wires": [
            [
                "c277da7464c9b62a",
                "9d1336cb73be0cad"
            ]
        ]
    },
    {
        "id": "6d73c3dbf25efcd9",
        "type": "function",
        "z": "0d352f1d7c785601",
        "name": "获取设备",
        "func": "let data = global.get(\"data\");\n\npayload = {\n    hd: {\n        entry: {\n            type: \"svc\",\n            id: \"shadows_get_devices\"\n        }\n    },\n    pld: {\n        edg_id: data.ids.edg\n    }\n    \n}\n\nreturn {payload: payload};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 1440,
        "wires": [
            [
                "b887e394a5738c26"
            ]
        ]
    },
    {
        "id": "2a215b8d792b5bdd",
        "type": "inject",
        "z": "0d352f1d7c785601",
        "name": "shadows_get_devices",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 260,
        "y": 1500,
        "wires": [
            [
                "6d73c3dbf25efcd9"
            ]
        ]
    },
    {
        "id": "336fd322e21dfe9e",
        "type": "function",
        "z": "0d352f1d7c785601",
        "name": "转换",
        "func": "return {\n    id: msg.payload.hd.sid,\n    payload: msg.payload.pld\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 1180,
        "wires": [
            [
                "bb8da9155e0fae25",
                "9d1336cb73be0cad"
            ]
        ]
    },
    {
        "id": "bb8da9155e0fae25",
        "type": "link out",
        "z": "0d352f1d7c785601",
        "name": "获取配置数据输出",
        "mode": "link",
        "links": [
            "ac20d7b05bd8d11e"
        ],
        "x": 1145,
        "y": 1180,
        "wires": []
    },
    {
        "id": "304409c6a48e3191",
        "type": "delay",
        "z": "0d352f1d7c785601",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 240,
        "y": 1360,
        "wires": [
            [
                "dbb174eced0e90b2"
            ]
        ]
    }
]