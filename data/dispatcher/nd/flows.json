[
    {
        "id": "a2231b8bf9e5da49",
        "type": "tab",
        "label": "全局配置(调度)",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "bbc788f5f9e280ee",
        "type": "tab",
        "label": "订阅/发布",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "aa7a09a7a0bf6210",
        "type": "tab",
        "label": "接口调用",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "d080623d467caf8f",
        "type": "tab",
        "label": "接口处理",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "f7e96a32e56d72eb",
        "type": "tab",
        "label": "主题",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "25fe735d371c65bb",
        "type": "tab",
        "label": "mongodb",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "73824c52c204153b",
        "type": "mqtt-broker",
        "name": "push",
        "broker": "push-access.sdp.101.com",
        "port": "1780",
        "clientid": "",
        "autoConnect": false,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "1156755863b3897c",
        "type": "mongodb",
        "hostname": "m1.all.dev2.mongod3.sdp",
        "topology": "direct",
        "connectOptions": "autoConnectRetry=true",
        "port": "34004",
        "db": "dev_mdb_iot_data",
        "name": "dev_mdb_iot_data"
    },
    {
        "id": "f7c0a24fc9ab304c",
        "type": "inject",
        "z": "a2231b8bf9e5da49",
        "name": "初始化",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 180,
        "y": 120,
        "wires": [
            [
                "683f9c514d3dc3f8"
            ]
        ]
    },
    {
        "id": "27d8633f9cab1b6a",
        "type": "OS",
        "z": "a2231b8bf9e5da49",
        "name": "",
        "x": 450,
        "y": 120,
        "wires": [
            [
                "6364d41fcd695544"
            ]
        ]
    },
    {
        "id": "6364d41fcd695544",
        "type": "change",
        "z": "a2231b8bf9e5da49",
        "name": "OS",
        "rules": [
            {
                "t": "set",
                "p": "os",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 570,
        "y": 120,
        "wires": [
            [
                "d1bcd2a97c869bd9"
            ]
        ]
    },
    {
        "id": "d1bcd2a97c869bd9",
        "type": "home-dir",
        "z": "a2231b8bf9e5da49",
        "x": 720,
        "y": 120,
        "wires": [
            [
                "bee63875d5caad5a"
            ]
        ]
    },
    {
        "id": "bee63875d5caad5a",
        "type": "change",
        "z": "a2231b8bf9e5da49",
        "name": "datadir",
        "rules": [
            {
                "t": "set",
                "p": "os.datadir",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 870,
        "y": 120,
        "wires": [
            [
                "a6a4ebf94a8b8924"
            ]
        ]
    },
    {
        "id": "1188b78d61e6e2a8",
        "type": "link out",
        "z": "a2231b8bf9e5da49",
        "name": "配置完成",
        "mode": "link",
        "links": [
            "3fdb98726d73125a",
            "dc9b6e1064d187b3",
            "59181471dbc6175b"
        ],
        "x": 955,
        "y": 600,
        "wires": []
    },
    {
        "id": "2e857e6b7c846a49",
        "type": "function",
        "z": "a2231b8bf9e5da49",
        "name": "缓存数据函数",
        "func": "let data = global.get(\"data\");\nlet common = global.get(\"common\");\n\nlet online = function(){\n    let events = this.events;\n    if (events && events.status)\n        return events.status.pld.online;\n    return 0;\n}\n\nlet cachePayload = function(payload) {\n    let hd = payload.hd;\n    if (hd.from.type == \"dev\") {\n        let dev = data.devices[hd.from.id] || {events:{}};\n        dev.id = hd.from.id;\n        if (hd.from.pid)\n            dev.pid = hd.from.pid;\n        dev.events[hd.entry.id] = payload;\n        dev.online = online;\n        data.devices[hd.from.id] = dev;\n    }\n    \n    if (hd.from.type == \"edg\") {\n        let edg = data.edges[hd.from.id] || {events:{}};\n        edg.id = hd.from.id;\n        edg.events[hd.entry.id] = payload;\n        edg.online = online;\n        data.edges[hd.from.id] = edg;\n    }\n}\n\ncommon.cachePayload = cachePayload;\n\nreturn {payload: data};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 900,
        "wires": [
            [
                "197e9e1664662cc3"
            ]
        ]
    },
    {
        "id": "d0850a0538ef7be5",
        "type": "function",
        "z": "a2231b8bf9e5da49",
        "name": "展开主题函数",
        "func": "let data = global.get(\"data\");\nlet common = global.get(\"common\");\nlet ids = global.get(\"ids\");\n\n\nlet expandTopic = {\n    expandStr : function(v, did) {\n        if (typeof v == \"string\") {\n            v = v.replace(/\\{app\\}/g, ids.app);\n            v = v.replace(/\\{dom\\}/g, ids.dom);\n            v = v.replace(/\\{dsp\\}/g, ids.dsp);\n            v = v.replace(/\\{edg\\}/g, ids.edg);\n            if (did)\n                v = v.replace(/\\{did\\}/g, did);\n        }\n        return v;\n    },\n    expandArray : function(v, did) {\n        if (Array.isArray(v)) {\n            for(let i=0; i < v.length; i++) {\n                v[i] = this.expand(v[i]);\n            }\n        }\n        return arr;\n    },\n    expandObj : function(v, did) {\n        if (typeof v == \"object\") {\n            let keys = Object.keys(v);\n            keys.forEach(k => {\n                v[k] = this.expand(v[k]);\n            });\n        }\n        return v;        \n    },\n    expand : function(v, did) {\n        if (typeof v == \"string\")\n            v = this.expandStr(v, did);\n                    \n        if (Array.isArray(v)) {\n            v = expandArray(v, did);\n        }\n        \n        if (typeof v == \"object\") {\n            v = this.expandObj(v, did)\n        }\n                \n        return v\n    }\n}\n    \n\n\ncommon.expandTopic = expandTopic;\n\nreturn {payload: data};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 840,
        "wires": [
            [
                "2e857e6b7c846a49"
            ]
        ]
    },
    {
        "id": "5bb08a441ca9caa8",
        "type": "function",
        "z": "a2231b8bf9e5da49",
        "name": "数据初始化",
        "func": "let data = global.get(\"data\");\nlet ids = global.get(\"ids\");\n\nlet app = data.app[ids.app];\nlet dom = app.domain[ids.dom];\nlet dsp = dom.dispatchers[ids.dsp];\n\napp.id = ids.app;\ndom.id = ids.dom;\ndsp.id = ids.dsp;\n\ndata.disps = dom.dispatchers;\ndata.edges = dsp.edges;\ndata.devices = dsp.devices;\ndata.topics = dsp.topics;\ndata.z2m = dsp.z2m;\ndata.ids = ids;\n\nreturn {payload: data};\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 780,
        "wires": [
            [
                "d0850a0538ef7be5"
            ]
        ]
    },
    {
        "id": "faf9a70e1c14aa09",
        "type": "function",
        "z": "a2231b8bf9e5da49",
        "name": "数据补全",
        "func": "let data = global.get(\"data\");\nlet common = global.get(\"common\");\n    \ncommon.expandTopic.expand(data.topics);\ncommon.expandTopic.expand(data.ids);\ncommon.keyToObjId(data.edges);\ncommon.keyToObjId(data.devices);\n\nreturn {payload: data};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 1140,
        "wires": [
            [
                "25f4f6ebe571808d"
            ]
        ]
    },
    {
        "id": "197e9e1664662cc3",
        "type": "function",
        "z": "a2231b8bf9e5da49",
        "name": "键值转ID函数",
        "func": "let common = global.get(\"common\");\n\nlet keyToObjId = function(objs) {\n        let keys = Object.keys(objs);\n        keys.forEach(key => {\n            let obj = objs[key];\n            if (typeof obj == \"object\") \n                obj.id = key;\n        })        \n    }\n\n\ncommon.keyToObjId = keyToObjId;\n\nreturn {payload: common};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 960,
        "wires": [
            [
                "70534349f231ca27"
            ]
        ]
    },
    {
        "id": "70534349f231ca27",
        "type": "function",
        "z": "a2231b8bf9e5da49",
        "name": "获取HD主题函数",
        "func": "let common = global.get(\"common\");\nlet ids = global.get(\"data\").ids;\n\nlet getHDTopic = function(hd) {\n    let tpc = \"\";\n    if (!hd.from) hd.from = {};\n    if (!hd.from.type) hd.from.type = \"dsp\";\n    if (!hd.from.id) hd.from.id = ids.dsp;\n    if (!hd.to.type) hd.to.type = \"0\";\n    if (!hd.to.id) hd.to.id = \"0\";\n    if (!hd.entry.type) hd.entry.type = \"0\";\n    if (!hd.entry.id) hd.entry.id = \"0\";\n    if (!hd.sid) hd.sid = 0;\n    if (!hd.stp) hd.stp = 0;\n\n\n    tpc =   ids.app + \"/\" + ids.dom + \"/\" + \n            hd.from.type + \"/\" + hd.from.id + \"/\" + \n            hd.to.type + \"/\" + hd.to.id + \"/\" + \n            hd.entry.type + \"/\" + hd.entry.id;\n    return tpc;\n}\n\n\ncommon.getHDTopic = getHDTopic;\n\nreturn {payload: common};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 1020,
        "wires": [
            [
                "c99ac0667422ed19"
            ]
        ]
    },
    {
        "id": "25f4f6ebe571808d",
        "type": "debug",
        "z": "a2231b8bf9e5da49",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 1200,
        "wires": []
    },
    {
        "id": "836d67d3b1995ff2",
        "type": "change",
        "z": "a2231b8bf9e5da49",
        "name": "数据",
        "rules": [
            {
                "t": "set",
                "p": "data",
                "pt": "global",
                "to": "{\"app\":{\"ndiot\":{\"id\":\"ndiot\",\"name\":\"网龙物联网\",\"domain\":{\"nd\":{\"id\":\"nd\",\"name\":\"网龙公司\",\"dispatchers\":{\"nd\":{\"name\":\"调度器\",\"edges\":{},\"devices\":{},\"topics\":{\"subs\":{\"edg_evt_status\":\"{app}/{dom}/edg/+/+/+/evt/status\",\"dev_evt_status\":\"{app}/{dom}/dev/+/+/+/evt/status\",\"dev_evt_report\":\"{app}/{dom}/dev/+/+/+/evt/report\"},\"services\":{\"dsp_svc_login\":\"{app}/{dom}/+/+/dsp/{dsp}/svc/login\",\"dsp_svc_get_z2m_datafile\":\"{app}/{dom}/+/+/dsp/{dsp}/svc/get_z2m_datafile\",\"dsp_svc_set_z2m_datafile\":\"{app}/{dom}/+/+/dsp/{dsp}/svc/set_z2m_datafile\"},\"pubs\":{\"dev_svc_login\":\"login\",\"edg_svc_login\":\"login\",\"edg_svc_get_z2m_datafile\":\"get_z2m_datafile\",\"dsp_evt_status\":\"status\"}},\"z2m\":{\"defaultDatafile\":{\"configuration.yaml\":{\"homeassistant\":false,\"permit_join\":false,\"mqtt\":{\"base_topic\":\"{mqtt_base_topic}\",\"server\":\"{mqtt_server}\",\"user\":\"{mqtt_user}\",\"password\":\"{mqtt_password}\"},\"serial\":{\"port\":\"{serial_port}\"},\"device_options\":{\"legacy\":false},\"advanced\":{\"pan_id\":\"GENERATE\",\"channel\":11,\"network_key\":\"GENERATE\",\"baudrate\":115200,\"homeassistant_legacy_entity_attributes\":false,\"legacy_api\":false,\"log_level\":\"debug\"},\"frontend\":{\"port\":\"{frontend_port}\"}}}}}}}}}},\"disps\":{},\"edges\":{},\"devices\":{},\"topics\":{},\"ids\":{},\"z2m\":{}}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "common",
                "pt": "global",
                "to": "{}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "ids",
                "pt": "global",
                "to": "{\"app\":\"ndiot\",\"dom\":\"nd\",\"dsp\":\"nd\",\"mqtt\":\"{app}_{dom}_dsp_{dsp}\"}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 400,
        "y": 780,
        "wires": [
            [
                "5bb08a441ca9caa8"
            ]
        ]
    },
    {
        "id": "7aa3fe2bf5f2ab1f",
        "type": "inject",
        "z": "a2231b8bf9e5da49",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "data",
        "payloadType": "global",
        "x": 410,
        "y": 1320,
        "wires": [
            [
                "5ac2bb163a055278"
            ]
        ]
    },
    {
        "id": "5ac2bb163a055278",
        "type": "debug",
        "z": "a2231b8bf9e5da49",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 1320,
        "wires": []
    },
    {
        "id": "c99ac0667422ed19",
        "type": "function",
        "z": "a2231b8bf9e5da49",
        "name": "设备调度函数",
        "func": "let data = global.get(\"data\");\nlet common = global.get(\"common\");\nlet ids = global.get(\"data\").ids;\n\n\nlet dispatch = {\n    getValidEdge : function() {\n        let values = Object.values(data.edges);\n        let edg;\n        for(let i = 0; i < values.length; i++) {\n            let value = values[i];\n            if (value.enabled && value.online && value.online()) {\n                edg = value;\n                break;\n            }\n        }\n\n        return edg;\n    },\n    \n    dispatchDevice : function(devId){\n        \n        let dev = data.devices[devId];\n        if (!dev) return;\n        \n        let edg = dev.edge;\n        if (edg) edg = data.edges[edg.id];\n        \n        if (!edg || !edg.id || !edg.enabled || !(edg.online && edg.online()) ) {\n            if (edg  && edg.devices)\n                delete edg.devices[dev.id];\n            edg = this.getValidEdge();\n        }\n        if (edg) {\n            let devs = edg.devices || {};\n            devs[dev.id] = dev;\n            edg.devices = devs; \n        }\n        \n        dev.edge = edg;\n        return edg;\n    }\n}\n  \n  \n\ncommon.dispatch = dispatch;\n\nreturn {payload: common};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 1080,
        "wires": [
            [
                "faf9a70e1c14aa09"
            ]
        ]
    },
    {
        "id": "a6a4ebf94a8b8924",
        "type": "switch",
        "z": "a2231b8bf9e5da49",
        "name": "是否激活调度？",
        "property": "IOT_ENABLE_DSP",
        "propertyType": "env",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 180,
        "y": 220,
        "wires": [
            [
                "c0624055eec65ac4"
            ]
        ]
    },
    {
        "id": "6423346762c80c34",
        "type": "debug",
        "z": "a2231b8bf9e5da49",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 540,
        "wires": []
    },
    {
        "id": "c0624055eec65ac4",
        "type": "function",
        "z": "a2231b8bf9e5da49",
        "name": "配置文件",
        "func": "\nreturn {\n    filename: env.get(\"IOT_CONFIG_FILE\")\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 220,
        "wires": [
            [
                "387bc8ba683df91f"
            ]
        ]
    },
    {
        "id": "874e2ff0304f3dd7",
        "type": "json",
        "z": "a2231b8bf9e5da49",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 710,
        "y": 220,
        "wires": [
            [
                "741bfe14448d5710"
            ]
        ]
    },
    {
        "id": "387bc8ba683df91f",
        "type": "file in",
        "z": "a2231b8bf9e5da49",
        "name": "读配置文件",
        "filename": "",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 550,
        "y": 220,
        "wires": [
            [
                "874e2ff0304f3dd7"
            ]
        ]
    },
    {
        "id": "4754da03d64fad4b",
        "type": "function",
        "z": "a2231b8bf9e5da49",
        "name": "数据初始化",
        "func": "let config = msg.payload.dispatcher;\n\nlet _ids = global.get(\"ids\");\n\nObject.keys(config.global).forEach(key => {\n    global.set(key, config.global[key])\n})\n\nlet data = global.get(\"data\");\nif (_ids) global.set(\"ids\", _ids);\nlet ids = global.get(\"ids\");\n\n\nlet app = data.app;\nlet dom = app.domain;\nlet dsp = dom.dispatcher;\n\ndata.domain = dom;\ndata.dispatcher = dsp;\ndata.edges = dsp.edges;\ndata.devices = dsp.devices;\ndata.mqtt = dsp.mqtt;\ndata.topics = dsp.mqtt.topics;\ndata.z2m = dsp.z2m;\ndata.ids = ids;\n\nreturn {payload: data};\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 400,
        "wires": [
            [
                "fe1774a6b4d68308"
            ]
        ]
    },
    {
        "id": "fe1774a6b4d68308",
        "type": "function",
        "z": "a2231b8bf9e5da49",
        "name": "展开主题函数",
        "func": "let data = global.get(\"data\");\nlet common = global.get(\"common\");\nlet ids = global.get(\"ids\");\n\n\nlet expandTopic = {\n    expandStr : function(v, did) {\n        if (typeof v == \"string\") {\n            v = v.replace(/\\{APP_ID\\}/g, env.get(\"IOT_APP_ID\") || \"\");\n            v = v.replace(/\\{DOM_ID\\}/g, env.get(\"IOT_DOM_ID\") || \"\");\n            v = v.replace(/\\{DSP_ID\\}/g, env.get(\"IOT_DSP_ID\") || \"\");\n            v = v.replace(/\\{EDG_ID\\}/g, env.get(\"IOT_EDG_ID\") || \"\");\n            v = v.replace(/\\{DIO_ID\\}/g, env.get(\"IOT_DIO_ID\") || \"\");\n            v = v.replace(/\\{HOSTNAME\\}/g, env.get(\"HOSTNAME\") || env.get(\"COMPUTERNAME\") || \"\");\n            \n            v = v.replace(/\\{app\\}/g, ids.app || \"\");\n            v = v.replace(/\\{dom\\}/g, ids.dom || \"\");\n            v = v.replace(/\\{dsp\\}/g, ids.dsp || \"\");\n            v = v.replace(/\\{edg\\}/g, ids.edg || \"\");\n            v = v.replace(/\\{dio\\}/g, ids.dio || \"\");\n            if (did)\n                v = v.replace(/\\{dev\\}/g, did);\n        }\n        return v;\n    },\n    expandArray : function(v, did) {\n        if (Array.isArray(v)) {\n            for(let i=0; i < v.length; i++) {\n                v[i] = this.expand(v[i], did);\n            }\n        }\n        return arr;\n    },\n    expandObj : function(v, did) {\n        if (typeof v == \"object\") {\n            let keys = Object.keys(v);\n            keys.forEach(k => {\n                v[k] = this.expand(v[k], did);\n            });\n        }\n        return v;        \n    },\n    expand : function(v, did) {\n        if (typeof v == \"string\")\n            v = this.expandStr(v, did);\n                    \n        if (Array.isArray(v)) {\n            v = expandArray(v, did);\n        }\n        \n        if (typeof v == \"object\") {\n            v = this.expandObj(v, did)\n        }\n                \n        return v\n    }\n}\n    \n\n\ncommon.expandTopic = expandTopic;\n\nreturn {payload: data};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 400,
        "wires": [
            [
                "de1af31ddcf813b0"
            ]
        ]
    },
    {
        "id": "de1af31ddcf813b0",
        "type": "function",
        "z": "a2231b8bf9e5da49",
        "name": "缓存数据函数",
        "func": "let data = global.get(\"data\");\nlet common = global.get(\"common\");\n\nlet online = function(){\n    let events = this.events;\n    if (events && events.status)\n        return events.status.pld.online;\n    return 0;\n}\n\nlet cachePayload = function(payload) {\n    let hd = payload.hd;\n    if (hd.from.type == \"dev\") {\n        let dev = data.devices[hd.from.id] || {events:{}};\n        dev.id = hd.from.id;\n        dev.events = dev.events || {};\n        if (hd.from.pid)\n            dev.pid = hd.from.pid;\n        dev.events[hd.entry.id] = payload;\n        dev.online = online;\n        data.devices[hd.from.id] = dev;\n    }\n    \n    if (hd.from.type == \"edg\") {\n        let edg = data.edges[hd.from.id] || {};\n        edg.events = edg.events || {};\n        edg.id = hd.from.id;\n        edg.events[hd.entry.id] = payload;\n        edg.online = online;\n        edg.enabled = 1;\n        data.edges[hd.from.id] = edg;\n    }\n}\n\ncommon.cachePayload = cachePayload;\n\nreturn {payload: data};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 440,
        "wires": [
            [
                "aea3af329e2e33ba"
            ]
        ]
    },
    {
        "id": "5cddc77aa8c606cd",
        "type": "function",
        "z": "a2231b8bf9e5da49",
        "name": "获取HD主题函数",
        "func": "let common = global.get(\"common\");\nlet ids = global.get(\"data\").ids;\n\nlet getHDTopic = function(hd) {\n    let tpc = \"\";\n    if (!hd.pref) hd.pref = {};\n    if (!hd.pref.app) hd.pref.app = (ids.app ? ids.app : \"0\");\n    if (!hd.pref.dom) hd.pref.dom = (ids.dom ? ids.dom : \"0\");\n    \n    if (!hd.from) hd.from = {};\n    if (!hd.from.type) hd.from.type = \"dsp\";\n    if (!hd.from.id) hd.from.id = ids.dsp;\n    if (!hd.to) hd.to = {};\n    if (!hd.to.type) hd.to.type = \"0\";\n    if (!hd.to.id) hd.to.id = \"0\";\n    if (!hd.entry) hd.entry = {};\n    if (!hd.entry.type) hd.entry.type = \"0\";\n    if (!hd.entry.id) hd.entry.id = \"0\";\n    if (!hd.sid) hd.sid = \"0\";\n    if (!hd.stp) hd.stp = 0;\n    if (!hd.version) hd.version = global.get(\"version\");\n    \n    // let app_id = hd.ids && hd.ids.app_id || ids.app;\n    // let dom_id = hd.ids && hd.ids.dom_id || ids.dom;\n\n    tpc =   hd.pref.app + \"/\" + hd.pref.dom + \"/\" + \n            hd.from.type + \"/\" + hd.from.id + \"/\" + \n            hd.to.type + \"/\" + hd.to.id + \"/\" + \n            hd.entry.type + \"/\" + hd.entry.id;\n    return tpc;\n}\n\n\ncommon.getHDTopic = getHDTopic;\n\nreturn {payload: common};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 520,
        "wires": [
            [
                "2316a7453cae5a40"
            ]
        ]
    },
    {
        "id": "2316a7453cae5a40",
        "type": "function",
        "z": "a2231b8bf9e5da49",
        "name": "设备调度函数",
        "func": "let data = global.get(\"data\");\nlet common = global.get(\"common\");\nlet ids = global.get(\"data\").ids;\n\n\nlet dispatch = {\n    getValidEdge : function() {\n        let values = Object.values(data.edges);\n        let edg;\n        for(let i = 0; i < values.length; i++) {\n            let value = values[i];\n            if (value.enabled && value.online && value.online()) {\n                edg = value;\n                break;\n            }\n        }\n\n        return edg;\n    },\n    \n    dispatchDevice : function(devId){\n        \n        let dev = data.devices[devId];\n        if (!dev) return;\n        \n        let edg = dev.edge;\n        if (edg) edg = data.edges[edg.id];\n        \n        if (!edg || !edg.id || !edg.enabled || !(edg.online && edg.online()) ) {\n            if (edg  && edg.devices)\n                delete edg.devices[dev.id];\n            edg = this.getValidEdge();\n        }\n        if (edg) {\n            let devs = edg.devices || {};\n            devs[dev.id] = dev;\n            edg.devices = devs; \n        }\n        \n        dev.edge = edg;\n        return edg;\n    }\n}\n  \n  \n\ncommon.dispatch = dispatch;\n\nreturn {payload: common};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 560,
        "wires": [
            [
                "fc89e9165d2ffb12"
            ]
        ]
    },
    {
        "id": "aea3af329e2e33ba",
        "type": "function",
        "z": "a2231b8bf9e5da49",
        "name": "键值转ID函数",
        "func": "let common = global.get(\"common\");\n\nlet keyToObjId = function(objs) {\n        let keys = Object.keys(objs);\n        keys.forEach(key => {\n            let obj = objs[key];\n            if (typeof obj == \"object\") \n                obj.id = key;\n        })        \n    }\n\n\ncommon.keyToObjId = keyToObjId;\n\nreturn {payload: common};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 480,
        "wires": [
            [
                "5cddc77aa8c606cd"
            ]
        ]
    },
    {
        "id": "fc89e9165d2ffb12",
        "type": "function",
        "z": "a2231b8bf9e5da49",
        "name": "数据补全",
        "func": "let data = global.get(\"data\");\nlet common = global.get(\"common\");\n\n\ncommon.expandTopic.expand(data.ids);    \ncommon.expandTopic.expand(data.topics);\n\ncommon.keyToObjId(data.edges);\ncommon.keyToObjId(data.devices);\n\ndata.app.id = data.ids.app;\ndata.domain.id = data.ids.dom;\ndata.dispatcher.id = data.ids.dsp;\n\nreturn {payload: data};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 600,
        "wires": [
            [
                "6423346762c80c34",
                "1188b78d61e6e2a8"
            ]
        ]
    },
    {
        "id": "c857b09c2f716a78",
        "type": "inject",
        "z": "a2231b8bf9e5da49",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "config",
        "payloadType": "global",
        "x": 410,
        "y": 1380,
        "wires": [
            [
                "5ac2bb163a055278"
            ]
        ]
    },
    {
        "id": "741bfe14448d5710",
        "type": "change",
        "z": "a2231b8bf9e5da49",
        "name": "缓存原始配置",
        "rules": [
            {
                "t": "set",
                "p": "config",
                "pt": "global",
                "to": "payload",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 880,
        "y": 220,
        "wires": [
            [
                "4754da03d64fad4b"
            ]
        ]
    },
    {
        "id": "49a324141b826dec",
        "type": "link in",
        "z": "a2231b8bf9e5da49",
        "name": "重载配置",
        "links": [
            "3be6aa741efc38c0"
        ],
        "x": 65,
        "y": 260,
        "wires": [
            [
                "a6a4ebf94a8b8924"
            ]
        ]
    },
    {
        "id": "683f9c514d3dc3f8",
        "type": "change",
        "z": "a2231b8bf9e5da49",
        "name": "version",
        "rules": [
            {
                "t": "set",
                "p": "version",
                "pt": "global",
                "to": "0.0.1",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 320,
        "y": 120,
        "wires": [
            [
                "27d8633f9cab1b6a"
            ]
        ]
    },
    {
        "id": "7890d1121e8c800a",
        "type": "mqtt in",
        "z": "bbc788f5f9e280ee",
        "name": "mqtt订阅",
        "topic": "",
        "qos": "2",
        "datatype": "utf8",
        "broker": "73824c52c204153b",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 1,
        "x": 400,
        "y": 140,
        "wires": [
            [
                "3293968dcca355dd"
            ]
        ]
    },
    {
        "id": "dc9b6e1064d187b3",
        "type": "link in",
        "z": "bbc788f5f9e280ee",
        "name": "",
        "links": [
            "1188b78d61e6e2a8"
        ],
        "x": 125,
        "y": 200,
        "wires": [
            [
                "8f351621757399ad"
            ]
        ]
    },
    {
        "id": "50a434e93c6b95ba",
        "type": "function",
        "z": "bbc788f5f9e280ee",
        "name": "订阅主题",
        "func": "let data = global.get(\"data\")\nlet topics = data.topics;\nlet ids = data.ids;\nif (ids.app && ids.dom) {\n    node.send({\n            action: \"unsubscribe\",\n            topic: Object.values(topics.subs)\n    })\n    \n    node.send({\n            action: \"unsubscribe\",\n            topic: Object.values(topics.services)\n    })  \n    \n    node.send({\n            action: \"subscribe\",\n            topic: Object.values(topics.subs)\n    })\n    \n    node.send({\n            action: \"subscribe\",\n            topic: Object.values(topics.services)\n    })    \n} else {\n    node.send({\n            action: \"unsubscribe\",\n            topic: topics.services.dsp_svc_login\n    })  \n    \n    node.send({\n            action: \"subscribe\",\n            topic: topics.services.dsp_svc_login\n    })      \n}\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 140,
        "wires": [
            [
                "7890d1121e8c800a",
                "6e8e2046b928392f"
            ]
        ]
    },
    {
        "id": "e40c8b6c11f78f36",
        "type": "debug",
        "z": "bbc788f5f9e280ee",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 40,
        "wires": []
    },
    {
        "id": "d7ac0787b1f443d0",
        "type": "function",
        "z": "bbc788f5f9e280ee",
        "name": "缓存数据",
        "func": "msg.topics = msg.topic.split(\"/\");\nlet hd = msg.payload.hd;\nif (!hd.pref) {\n    hd.pref = {\n        app: msg.topics[0],\n        dom: msg.topics[1]\n    }\n}\n\nlet common = global.get(\"common\");\ncommon.cachePayload(msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 140,
        "wires": [
            [
                "e52d17e454bc6548"
            ]
        ]
    },
    {
        "id": "e52d17e454bc6548",
        "type": "link out",
        "z": "bbc788f5f9e280ee",
        "name": "订阅输出",
        "mode": "link",
        "links": [
            "2ff5101df1ab6584",
            "b293cfb8b41ad91f"
        ],
        "x": 985,
        "y": 140,
        "wires": []
    },
    {
        "id": "32666f168420c1c4",
        "type": "function",
        "z": "bbc788f5f9e280ee",
        "name": "发布主题",
        "func": "let common = global.get(\"common\")\nmsg.topic = common.getHDTopic(msg.payload.hd);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 520,
        "wires": [
            [
                "23fae1bc1cb6e0f7",
                "3252e7c87c00e3ab",
                "483447c93d110a0e"
            ]
        ]
    },
    {
        "id": "23fae1bc1cb6e0f7",
        "type": "mqtt out",
        "z": "bbc788f5f9e280ee",
        "name": "mqtt发布",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "73824c52c204153b",
        "x": 440,
        "y": 520,
        "wires": []
    },
    {
        "id": "488accc4124e1c0a",
        "type": "link in",
        "z": "bbc788f5f9e280ee",
        "name": "mqtt发布",
        "links": [
            "9b3a8e543bd70406",
            "5002cb933f4b4eb5",
            "cb5a80219ea82576",
            "b45b2eba09115dae",
            "5829f7425c50b7c0"
        ],
        "x": 165,
        "y": 520,
        "wires": [
            [
                "32666f168420c1c4"
            ]
        ]
    },
    {
        "id": "3252e7c87c00e3ab",
        "type": "debug",
        "z": "bbc788f5f9e280ee",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "topic",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 460,
        "y": 600,
        "wires": []
    },
    {
        "id": "07a502057f97673a",
        "type": "function",
        "z": "bbc788f5f9e280ee",
        "name": "时间戳",
        "func": "let date = new Date()\nmsg.payload.hd.tpc = msg.topic;\nmsg.payload.hd.tms=date.valueOf();\nmsg.payload.hd.tm=date.toLocaleString();\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 140,
        "wires": [
            [
                "e40c8b6c11f78f36",
                "d7ac0787b1f443d0"
            ]
        ]
    },
    {
        "id": "483447c93d110a0e",
        "type": "debug",
        "z": "bbc788f5f9e280ee",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 470,
        "y": 680,
        "wires": []
    },
    {
        "id": "bfa31282f696f40b",
        "type": "link in",
        "z": "bbc788f5f9e280ee",
        "name": "动态订阅主题",
        "links": [
            "83c403b1c017c665"
        ],
        "x": 125,
        "y": 100,
        "wires": [
            [
                "7890d1121e8c800a",
                "6e8e2046b928392f"
            ]
        ]
    },
    {
        "id": "6e8e2046b928392f",
        "type": "debug",
        "z": "bbc788f5f9e280ee",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "topic",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 380,
        "y": 60,
        "wires": []
    },
    {
        "id": "5321a41c46a93c24",
        "type": "change",
        "z": "bbc788f5f9e280ee",
        "name": "自动连接",
        "rules": [
            {
                "t": "set",
                "p": "action",
                "pt": "msg",
                "to": "connect",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "broker.autoConnect",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "broker.force",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "broker.clientid",
                "pt": "msg",
                "to": "data.ids.mqtt",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 240,
        "y": 820,
        "wires": [
            [
                "3c972a93aa346ded"
            ]
        ]
    },
    {
        "id": "3c972a93aa346ded",
        "type": "change",
        "z": "bbc788f5f9e280ee",
        "name": "连接消息",
        "rules": [
            {
                "t": "set",
                "p": "broker.birth.topic",
                "pt": "msg",
                "to": "data.topics.pubs.dsp_evt_status",
                "tot": "global"
            },
            {
                "t": "set",
                "p": "broker.birth.qos",
                "pt": "msg",
                "to": "2",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "broker.birth.retain",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "broker.birth.payload.hd.from.type",
                "pt": "msg",
                "to": "dsp",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "broker.birth.payload.hd.from.id",
                "pt": "msg",
                "to": "data.ids.dsp",
                "tot": "global"
            },
            {
                "t": "set",
                "p": "broker.birth.payload.hd.to.type",
                "pt": "msg",
                "to": "0",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "broker.birth.payload.hd.to.id",
                "pt": "msg",
                "to": "0",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "broker.birth.payload.hd.entry.type",
                "pt": "msg",
                "to": "evt",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "broker.birth.payload.hd.entry.id",
                "pt": "msg",
                "to": "status",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "broker.birth.payload.pld.online",
                "pt": "msg",
                "to": "1",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "broker.birth.payload.pld.id",
                "pt": "msg",
                "to": "data.ids.dsp",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 400,
        "y": 820,
        "wires": [
            [
                "43eafee00dea477a"
            ]
        ]
    },
    {
        "id": "43eafee00dea477a",
        "type": "change",
        "z": "bbc788f5f9e280ee",
        "name": "遗嘱消息",
        "rules": [
            {
                "t": "set",
                "p": "broker.will",
                "pt": "msg",
                "to": "broker.birth",
                "tot": "msg",
                "dc": true
            },
            {
                "t": "set",
                "p": "broker.will.payload.pld.online",
                "pt": "msg",
                "to": "0",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 560,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "4135b0363341ce52",
        "type": "debug",
        "z": "bbc788f5f9e280ee",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "broker",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 990,
        "y": 280,
        "wires": []
    },
    {
        "id": "1d38d82fd22fa3b5",
        "type": "json",
        "z": "bbc788f5f9e280ee",
        "name": "",
        "property": "broker.will.payload",
        "action": "str",
        "pretty": false,
        "x": 1010,
        "y": 200,
        "wires": [
            [
                "4135b0363341ce52",
                "7890d1121e8c800a",
                "50a434e93c6b95ba"
            ]
        ]
    },
    {
        "id": "b920e31b90166791",
        "type": "function",
        "z": "bbc788f5f9e280ee",
        "name": "出生消息",
        "func": "let data = global.get(\"data\");\nlet common = global.get(\"common\");\n\nlet hd = {\n    from: {\n        type: \"dsp\",\n        id: data.ids.dsp\n    },\n    to: {\n        type: \"0\",\n        id: \"0\"\n    },\n    entry: {\n        type: \"evt\",\n        id: data.topics.pubs.dsp_evt_status\n    },\n    version: global.get(\"version\")\n};\n\nlet pld = {\n    id: data.ids.dsp,\n    online: 1\n};\n\nlet topic = common.getHDTopic(hd);\n\n\nlet birth = {\n    topic: topic,\n    qos: 2,\n    retain: true,\n    payload: {\n        hd: hd,\n        pld: pld\n    }\n}\n\nmsg.broker = msg.broker || {};\nmsg.broker.birth = birth;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 200,
        "wires": [
            [
                "45838fa67f1ea02a"
            ]
        ]
    },
    {
        "id": "e4534314a7bcd4b3",
        "type": "function",
        "z": "bbc788f5f9e280ee",
        "name": "自动连接",
        "func": "let data = global.get(\"data\");\nmsg = {};\nmsg.action = \"connect\";\nmsg.broker = {\n    autoConnect: true,\n    force: true,\n    // clientid: \"dsp_\" + data.ids.dsp\n}\n\n\nObject.assign(msg.broker, data.mqtt.broker);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 200,
        "wires": [
            [
                "b920e31b90166791"
            ]
        ]
    },
    {
        "id": "45838fa67f1ea02a",
        "type": "function",
        "z": "bbc788f5f9e280ee",
        "name": "遗嘱消息",
        "func": "let birth = msg.broker.birth;\n\nlet pld = {\n    id: birth.payload.pld.id,\n    online: 0\n};\n\n\n\nlet will = {\n    topic: birth.topic,\n    qos: 2,\n    retain: true,\n    payload: {\n        hd: birth.payload.hd,\n        pld: pld\n    }\n}\n\n\nmsg.broker.will = will;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 200,
        "wires": [
            [
                "1d38d82fd22fa3b5"
            ]
        ]
    },
    {
        "id": "3293968dcca355dd",
        "type": "json",
        "z": "bbc788f5f9e280ee",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 550,
        "y": 140,
        "wires": [
            [
                "07a502057f97673a"
            ]
        ]
    },
    {
        "id": "8f351621757399ad",
        "type": "function",
        "z": "bbc788f5f9e280ee",
        "name": "断开",
        "func": "\nmsg = {\n    action : \"disconnect\"\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 200,
        "wires": [
            [
                "7890d1121e8c800a",
                "6cfb5b8bbb676e36"
            ]
        ]
    },
    {
        "id": "6cfb5b8bbb676e36",
        "type": "delay",
        "z": "bbc788f5f9e280ee",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 380,
        "y": 200,
        "wires": [
            [
                "e4534314a7bcd4b3"
            ]
        ]
    },
    {
        "id": "59181471dbc6175b",
        "type": "link in",
        "z": "aa7a09a7a0bf6210",
        "name": "请求",
        "links": [
            "1188b78d61e6e2a8"
        ],
        "x": 145,
        "y": 180,
        "wires": [
            [
                "a1d93e26f00d9928"
            ]
        ]
    },
    {
        "id": "9b39f6a45516c881",
        "type": "delay",
        "z": "aa7a09a7a0bf6210",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 520,
        "y": 180,
        "wires": [
            [
                "b5c10fec2a171dec"
            ]
        ]
    },
    {
        "id": "b5c10fec2a171dec",
        "type": "function",
        "z": "aa7a09a7a0bf6210",
        "name": "登入请求",
        "func": "let data = global.get(\"data\");\nreturn {\n    payload: {\n        hd: {\n            to: {\n                type: \"0\",\n                id: \"0\"\n            },\n            entry: {\n                type: \"svc\",\n                id: \"login\"\n            }\n        },\n        pld: {\n            id: data.ids.dsp\n        }\n    }\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 180,
        "wires": [
            [
                "daa6a0cef19c038d",
                "fa0afe6023cff548",
                "b45b2eba09115dae"
            ]
        ]
    },
    {
        "id": "daa6a0cef19c038d",
        "type": "trigger",
        "z": "aa7a09a7a0bf6210",
        "name": "超时5秒",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "5",
        "extend": true,
        "overrideDelay": true,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 2,
        "x": 520,
        "y": 240,
        "wires": [
            [],
            [
                "9b39f6a45516c881"
            ]
        ]
    },
    {
        "id": "a08e3843c15e944d",
        "type": "change",
        "z": "aa7a09a7a0bf6210",
        "name": "重置",
        "rules": [
            {
                "t": "set",
                "p": "reset",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 270,
        "y": 240,
        "wires": [
            [
                "daa6a0cef19c038d"
            ]
        ]
    },
    {
        "id": "81d871be6af1b2a9",
        "type": "link in",
        "z": "aa7a09a7a0bf6210",
        "name": "重置登入请求",
        "links": [
            "87bda24bd97b90b7",
            "7cc27320956b5354"
        ],
        "x": 145,
        "y": 240,
        "wires": [
            [
                "a08e3843c15e944d"
            ]
        ]
    },
    {
        "id": "1c8bebd4730ca10f",
        "type": "comment",
        "z": "aa7a09a7a0bf6210",
        "name": "登入",
        "info": "",
        "x": 150,
        "y": 80,
        "wires": []
    },
    {
        "id": "a1d93e26f00d9928",
        "type": "function",
        "z": "aa7a09a7a0bf6210",
        "name": "无租户",
        "func": "let data = global.get(\"data\");\nif (!data.ids.app || !data.ids.dom) {\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 180,
        "wires": [
            [
                "9b39f6a45516c881"
            ]
        ]
    },
    {
        "id": "5021deed0f4dea19",
        "type": "inject",
        "z": "aa7a09a7a0bf6210",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 350,
        "y": 100,
        "wires": [
            [
                "9b39f6a45516c881"
            ]
        ]
    },
    {
        "id": "fa0afe6023cff548",
        "type": "debug",
        "z": "aa7a09a7a0bf6210",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 870,
        "y": 140,
        "wires": []
    },
    {
        "id": "b45b2eba09115dae",
        "type": "link out",
        "z": "aa7a09a7a0bf6210",
        "name": "",
        "mode": "link",
        "links": [
            "488accc4124e1c0a"
        ],
        "x": 985,
        "y": 260,
        "wires": []
    },
    {
        "id": "6daf1af57e46df30",
        "type": "function",
        "z": "aa7a09a7a0bf6210",
        "name": "状态发布",
        "func": "let data = global.get(\"data\");\n\n\n\nlet _hd = {\n    entry: {\n        type: \"evt\",\n        id: \"status\"\n    }\n};\n\nlet _pld = {\n    id: data.ids.dsp,\n    online: 1\n    \n};\nreturn {\n    payload:{\n        hd: _hd,\n        pld: _pld\n    }\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 380,
        "wires": [
            [
                "b45b2eba09115dae",
                "7dc6bf6f82555874"
            ]
        ]
    },
    {
        "id": "b784350e948a9e8b",
        "type": "link in",
        "z": "aa7a09a7a0bf6210",
        "name": "状态发布输入",
        "links": [
            "62b3ca59dea6f8fb",
            "0e5b3bc6e3952f26"
        ],
        "x": 135,
        "y": 380,
        "wires": [
            [
                "6daf1af57e46df30"
            ]
        ]
    },
    {
        "id": "7dc6bf6f82555874",
        "type": "debug",
        "z": "aa7a09a7a0bf6210",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 650,
        "y": 420,
        "wires": []
    },
    {
        "id": "b293cfb8b41ad91f",
        "type": "link in",
        "z": "d080623d467caf8f",
        "name": "",
        "links": [
            "e52d17e454bc6548"
        ],
        "x": 155,
        "y": 240,
        "wires": [
            [
                "f3fbccc82b509675",
                "5894bed3d598a949",
                "8a5670cc04e4a129",
                "7b9bcf26fde41abf"
            ]
        ]
    },
    {
        "id": "f3fbccc82b509675",
        "type": "function",
        "z": "d080623d467caf8f",
        "name": "数据服务响应",
        "func": "let hd = msg.payload.hd;\nif (hd.stp == 1 && hd.entry.type == \"svc\" && hd.from.type == \"dio\" ) {\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 240,
        "wires": [
            [
                "43bd55a5970c54c2"
            ]
        ]
    },
    {
        "id": "43bd55a5970c54c2",
        "type": "switch",
        "z": "d080623d467caf8f",
        "name": "",
        "property": "payload.hd.entry.id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "login",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "get_z2m_datafile",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "set_z2m_datafile",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 510,
        "y": 240,
        "wires": [
            [
                "c3275c69d557b333"
            ],
            [],
            []
        ]
    },
    {
        "id": "c3275c69d557b333",
        "type": "function",
        "z": "d080623d467caf8f",
        "name": "登入响应处理",
        "func": "let data = global.get(\"data\");\nlet pld = msg.payload.pld;\nif (pld.app_id && pld.dom_id && pld.dsp_id) {\n    data.ids.app = pld.app_id;\n    data.ids.dom = pld.dom_id;\n    data.ids.dsp = pld.dsp_id;\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 200,
        "wires": [
            [
                "7cc27320956b5354",
                "3be6aa741efc38c0"
            ]
        ]
    },
    {
        "id": "7cc27320956b5354",
        "type": "link out",
        "z": "d080623d467caf8f",
        "name": "",
        "mode": "link",
        "links": [
            "81d871be6af1b2a9"
        ],
        "x": 935,
        "y": 160,
        "wires": []
    },
    {
        "id": "3be6aa741efc38c0",
        "type": "link out",
        "z": "d080623d467caf8f",
        "name": "重载配置",
        "mode": "link",
        "links": [
            "49a324141b826dec"
        ],
        "x": 935,
        "y": 220,
        "wires": []
    },
    {
        "id": "8a5670cc04e4a129",
        "type": "function",
        "z": "d080623d467caf8f",
        "name": "设备服务请求",
        "func": "let hd = msg.payload.hd;\nif (hd.stp == 0 && hd.entry.type == \"svc\" && hd.from.type == \"dev\" ) {\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 460,
        "wires": [
            [
                "b33c8592f583637c"
            ]
        ]
    },
    {
        "id": "5894bed3d598a949",
        "type": "function",
        "z": "d080623d467caf8f",
        "name": "边缘服务请求",
        "func": "let hd = msg.payload.hd;\nif (hd.stp == 0 && hd.entry.type == \"svc\" && hd.from.type == \"edg\" ) {\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 380,
        "wires": [
            [
                "a09ff60647ef53d0"
            ]
        ]
    },
    {
        "id": "a09ff60647ef53d0",
        "type": "switch",
        "z": "d080623d467caf8f",
        "name": "",
        "property": "payload.hd.entry.id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "login",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "get_z2m_datafile",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "set_z2m_datafile",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 510,
        "y": 380,
        "wires": [
            [
                "20d2836ddb9e4eb2"
            ],
            [],
            []
        ]
    },
    {
        "id": "20d2836ddb9e4eb2",
        "type": "function",
        "z": "d080623d467caf8f",
        "name": "登入请求处理",
        "func": "let data = global.get(\"data\");\nlet ids = data.ids;\nlet hd = msg.payload.hd;\nlet pld = msg.payload.pld;\nlet _hd = Object.assign({}, hd);\n\n_hd.from = hd.to;\n_hd.to = hd.from;\n_hd.stp = 1;\ndelete _hd.tm;\ndelete _hd.tms;\ndelete _hd.tpc;\n\nlet edge = data.edges[hd.from.id];\n\nlet _pld = {\n    app: ids.app,\n    dom: ids.dom,\n    dsp: ids.dsp\n}\nif (edge) {\n    _pld.edg = edge.id\n    _pld.enabled = edge.enabled\n}\n\nreturn {\n    payload: {\n        hd: _hd,\n        pld: _pld\n    }\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 380,
        "wires": [
            [
                "5829f7425c50b7c0"
            ]
        ]
    },
    {
        "id": "5829f7425c50b7c0",
        "type": "link out",
        "z": "d080623d467caf8f",
        "name": "mqtt发布",
        "mode": "link",
        "links": [
            "488accc4124e1c0a"
        ],
        "x": 945,
        "y": 420,
        "wires": []
    },
    {
        "id": "7b9bcf26fde41abf",
        "type": "function",
        "z": "d080623d467caf8f",
        "name": "数据事件请求",
        "func": "let hd = msg.payload.hd;\nif (hd.stp == 0 && hd.entry.type == \"evt\" && hd.from.type == \"dio\" ) {\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 300,
        "wires": [
            [
                "8b82368e8da7b08b"
            ]
        ]
    },
    {
        "id": "8b82368e8da7b08b",
        "type": "switch",
        "z": "d080623d467caf8f",
        "name": "",
        "property": "payload.hd.entry.id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "status",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 510,
        "y": 300,
        "wires": [
            [
                "3c2636695bc1a25e",
                "74dca7605cd7a09f"
            ]
        ]
    },
    {
        "id": "3c2636695bc1a25e",
        "type": "function",
        "z": "d080623d467caf8f",
        "name": "上线",
        "func": "return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 300,
        "wires": [
            [
                "0e5b3bc6e3952f26"
            ]
        ]
    },
    {
        "id": "0e5b3bc6e3952f26",
        "type": "link out",
        "z": "d080623d467caf8f",
        "name": "状态发布",
        "mode": "link",
        "links": [
            "b784350e948a9e8b"
        ],
        "x": 935,
        "y": 300,
        "wires": []
    },
    {
        "id": "74dca7605cd7a09f",
        "type": "debug",
        "z": "d080623d467caf8f",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 260,
        "wires": []
    },
    {
        "id": "b33c8592f583637c",
        "type": "switch",
        "z": "d080623d467caf8f",
        "name": "",
        "property": "payload.hd.entry.id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "login",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 510,
        "y": 460,
        "wires": [
            [
                "5134cad4c3fec06a"
            ]
        ]
    },
    {
        "id": "5134cad4c3fec06a",
        "type": "function",
        "z": "d080623d467caf8f",
        "name": "登入请求处理",
        "func": "let common = global.get(\"common\");\nlet data = global.get(\"data\")\nlet ids = data.ids;\nlet hd = msg.payload.hd;\n\nlet edg = common.dispatch.dispatchDevice(hd.from.id);\n\n\nlet temp = hd.from;\nhd.from = hd.to;\nhd.to = temp;\nhd.stp = 1;\ndelete hd.tm;\ndelete hd.tms;\ndelete hd.tpc;\n\nlet pld = {\n    app_id: ids.app,\n    dom_id: ids.dom,\n    dsp_id: ids.dsp,\n    edg_id: edg && edg.id\n}\nmsg.payload.pld = pld;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 460,
        "wires": [
            [
                "5829f7425c50b7c0"
            ]
        ]
    },
    {
        "id": "2ff5101df1ab6584",
        "type": "link in",
        "z": "f7e96a32e56d72eb",
        "d": true,
        "name": "",
        "links": [
            "e52d17e454bc6548"
        ],
        "x": 195,
        "y": 60,
        "wires": [
            [
                "2960d37440adb67d"
            ]
        ]
    },
    {
        "id": "2960d37440adb67d",
        "type": "switch",
        "z": "f7e96a32e56d72eb",
        "name": "调度",
        "property": "payload.hd.to.type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "dsp",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 300,
        "y": 60,
        "wires": [
            [
                "d3b8d4ef2a9d44b5"
            ]
        ]
    },
    {
        "id": "a91a584b038a1d91",
        "type": "switch",
        "z": "f7e96a32e56d72eb",
        "name": "登入",
        "property": "payload.hd.entry.id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "login",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 290,
        "y": 320,
        "wires": [
            [
                "cfbe16d927376be5"
            ]
        ]
    },
    {
        "id": "04caa3f2bc2fcfba",
        "type": "debug",
        "z": "f7e96a32e56d72eb",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 970,
        "y": 380,
        "wires": []
    },
    {
        "id": "d3b8d4ef2a9d44b5",
        "type": "switch",
        "z": "f7e96a32e56d72eb",
        "name": "请求",
        "property": "payload.hd.stp",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 300,
        "y": 120,
        "wires": [
            [
                "1faf71b0d9db29dd"
            ]
        ]
    },
    {
        "id": "1faf71b0d9db29dd",
        "type": "switch",
        "z": "f7e96a32e56d72eb",
        "name": "服务",
        "property": "payload.hd.entry.type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "svc",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 150,
        "y": 400,
        "wires": [
            [
                "a91a584b038a1d91",
                "845b5a017215f868",
                "ad83eae001223e02"
            ]
        ]
    },
    {
        "id": "5999a64d148a1410",
        "type": "function",
        "z": "f7e96a32e56d72eb",
        "name": "数据缓存",
        "func": "let data = global.get(\"data\");\nlet devices = data.devices;\nlet edges = data.edges;\n\nlet hd = msg.payload.hd;\nif (hd.from.type == \"dev\") {\n    let dev = devices[hd.from.id] || {events:{}};\n    dev.id = hd.from.id;\n    dev.state = \"online\";\n    dev.events[\"login\"] = msg.payload;\n    devices[hd.from.id] = dev;\n    node.send([msg, null]);\n}\nif (hd.from.type == \"edg\") {\n    let edg = edges[hd.from.id] || {events:{}};\n    edg.id = hd.from.id;\n    edg.state = \"online\";\n    edg.events[\"login\"] = msg.payload;\n    edges[hd.from.id] = edg;   \n    node.send([null, msg]);\n}\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 160,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "9b3a8e543bd70406",
        "type": "link out",
        "z": "f7e96a32e56d72eb",
        "name": "发布",
        "mode": "link",
        "links": [
            "488accc4124e1c0a"
        ],
        "x": 1015,
        "y": 340,
        "wires": []
    },
    {
        "id": "cfbe16d927376be5",
        "type": "change",
        "z": "f7e96a32e56d72eb",
        "name": "复制",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 470,
        "y": 320,
        "wires": [
            [
                "12b3ebfe4a3b6175"
            ]
        ]
    },
    {
        "id": "c08bc84bc1125e2c",
        "type": "function",
        "z": "f7e96a32e56d72eb",
        "name": "设备",
        "func": "let common = global.get(\"common\");\nlet data = global.get(\"data\")\nlet ids = data.ids;\nlet hd = msg.payload.hd;\n\nlet edg = common.dispatch.dispatchDevice(hd.from.id);\n\n\nlet temp = hd.from;\nhd.from = hd.to;\nhd.to = temp;\nhd.stp = 1;\ndelete hd.tm;\ndelete hd.tms;\ndelete hd.tpc;\n\nlet pld = {\n    app_id: ids.app,\n    dom_id: ids.dom,\n    dsp_id: ids.dsp,\n    edg_id: edg && edg.id\n}\nmsg.payload.pld = pld;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 300,
        "wires": [
            [
                "9b3a8e543bd70406"
            ]
        ]
    },
    {
        "id": "7bad7b0521ac9633",
        "type": "function",
        "z": "f7e96a32e56d72eb",
        "name": "边缘",
        "func": "let data = global.get(\"data\");\nlet ids = data.ids;\nlet hd = msg.payload.hd;\n\nlet temp = hd.from;\nhd.from = hd.to;\nhd.to = temp;\nhd.stp = 1;\ndelete hd.tm;\ndelete hd.tms;\ndelete hd.tpc;\n\nlet edge = data.edges[hd.to.id];\n\nlet pld = {\n    app: ids.app,\n    dom: ids.dom,\n    dsp: ids.dsp\n}\nif (edge) {\n    pld.edg = edge.id\n    pld.enabled = edge.enabled\n}\nmsg.payload.pld = pld;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 360,
        "wires": [
            [
                "9b3a8e543bd70406",
                "04caa3f2bc2fcfba"
            ]
        ]
    },
    {
        "id": "845b5a017215f868",
        "type": "switch",
        "z": "f7e96a32e56d72eb",
        "name": "获取Z3数据文件",
        "property": "payload.hd.entry.id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "get_z2m_datafile",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 320,
        "y": 540,
        "wires": [
            [
                "d466ad43414d7ef2"
            ]
        ]
    },
    {
        "id": "ad83eae001223e02",
        "type": "switch",
        "z": "f7e96a32e56d72eb",
        "name": "设置Z3数据文件",
        "property": "payload.hd.entry.id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "set_z2m_datafile",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 320,
        "y": 460,
        "wires": [
            [
                "846d6be50f5083fe"
            ]
        ]
    },
    {
        "id": "846d6be50f5083fe",
        "type": "function",
        "z": "f7e96a32e56d72eb",
        "name": "MG格式",
        "func": "let data = global.get(\"data\");\nlet hd = msg.payload.hd;\nlet pld = msg.payload.pld;\npld.id = pld.id || hd.from.id;\n\nlet device = data.devices[pld.id];\nlet z2m = device.z2m || {};\nz2m.datafile = pld.datafile;\ndevice.z2m = z2m;\n\nreturn {\n    query: {\n        id: pld.id\n    },\n    payload: pld\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 460,
        "wires": [
            [
                "18399b569376b6f6"
            ]
        ]
    },
    {
        "id": "18399b569376b6f6",
        "type": "link out",
        "z": "f7e96a32e56d72eb",
        "name": "",
        "mode": "link",
        "links": [
            "73cdfebded74d723"
        ],
        "x": 1015,
        "y": 460,
        "wires": []
    },
    {
        "id": "ea899d2e95e95576",
        "type": "link in",
        "z": "f7e96a32e56d72eb",
        "name": "重置",
        "links": [
            "02292d5e159ec26a"
        ],
        "x": 245,
        "y": 720,
        "wires": [
            [
                "ada4b9868b069c4d"
            ]
        ]
    },
    {
        "id": "d466ad43414d7ef2",
        "type": "function",
        "z": "f7e96a32e56d72eb",
        "name": "有无缓存",
        "func": "let data = global.get(\"data\");\nlet hd = msg.payload.hd;\nlet pld = msg.payload.pld;\n\nlet device = data.devices[pld.id];\nif (!device)\n    return;\n\nlet z2m = device.z2m ;\nif (z2m && z2m.datafile) {\n    let _msg = {\n        payload: {\n            hd: {\n                from: hd.to,\n                to: hd.from,\n                entry: hd.entry,\n                sid: hd.sid,\n                stp: 1\n            },\n            pld: {\n                id: pld.id,\n                datafile: z2m.datafile\n            }\n        }\n    };\n    \n    return [_msg, null];\n}\n\nreturn [null, msg];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 540,
        "wires": [
            [
                "104148958a127a27"
            ],
            [
                "f0fb7cb724e8b603"
            ]
        ]
    },
    {
        "id": "104148958a127a27",
        "type": "change",
        "z": "f7e96a32e56d72eb",
        "name": "有缓存",
        "rules": [],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 830,
        "y": 500,
        "wires": [
            [
                "9b3a8e543bd70406"
            ]
        ]
    },
    {
        "id": "f0fb7cb724e8b603",
        "type": "function",
        "z": "f7e96a32e56d72eb",
        "name": "MG查询",
        "func": "let hd = msg.payload.hd;\nlet pld = msg.payload.pld;\n\nreturn {\n    _payload: msg.payload,\n    payload: {\n        id: pld.id\n    }\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 560,
        "wires": [
            [
                "01a86933fee50dae"
            ]
        ]
    },
    {
        "id": "01a86933fee50dae",
        "type": "link out",
        "z": "f7e96a32e56d72eb",
        "name": "",
        "mode": "link",
        "links": [
            "a5949574ea550511"
        ],
        "x": 1015,
        "y": 560,
        "wires": []
    },
    {
        "id": "ada4b9868b069c4d",
        "type": "function",
        "z": "f7e96a32e56d72eb",
        "name": "发送topic",
        "func": "let data = global.get(\"data\");\nlet _payload = msg._payload;\nlet _hd = _payload.hd;\nlet _pld = _payload.pld;\n\n\nlet device = data.devices[_pld.id];\nlet z2m = device.z2m || {}\n\nif (msg.payload) {\n    if (msg.payload[0]) {\n        let pld = msg.payload[0];\n        z2m.datafile = pld.datafile;\n    } else {\n        z2m.datafile = data.z2m.defaultDatafile;\n    }\n}\ndevice.z2m = z2m;\n\nif (z2m.datafile) {\n    return {payload: msg._payload};\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 720,
        "wires": [
            [
                "e7a0d6b7b65636b0",
                "d466ad43414d7ef2"
            ]
        ]
    },
    {
        "id": "ef6bc20a8bb7a7d1",
        "type": "inject",
        "z": "f7e96a32e56d72eb",
        "name": "",
        "props": [
            {
                "p": "payload.pld.id",
                "v": "ESP8266x0006dbe5",
                "vt": "str"
            },
            {
                "p": "payload.hd.from.id",
                "v": "edg_nd",
                "vt": "str"
            },
            {
                "p": "payload.hd.from.type",
                "v": "edg",
                "vt": "str"
            },
            {
                "p": "payload.hd.to.type",
                "v": "dsp",
                "vt": "str"
            },
            {
                "p": "payload.hd.to.id",
                "v": "nd",
                "vt": "str"
            },
            {
                "p": "payload.hd.entry.type",
                "v": "svc",
                "vt": "str"
            },
            {
                "p": "payload.hd.entry.id",
                "v": "get_z2m_datafile",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 600,
        "wires": [
            [
                "d466ad43414d7ef2"
            ]
        ]
    },
    {
        "id": "e7a0d6b7b65636b0",
        "type": "debug",
        "z": "f7e96a32e56d72eb",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 740,
        "wires": []
    },
    {
        "id": "2f5741bfe146a297",
        "type": "debug",
        "z": "f7e96a32e56d72eb",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 720,
        "wires": []
    },
    {
        "id": "63ba8d6c2a3aac2e",
        "type": "inject",
        "z": "f7e96a32e56d72eb",
        "name": "",
        "props": [
            {
                "p": "payload.pld.id",
                "v": "ESP8266x0006dbe5111",
                "vt": "str"
            },
            {
                "p": "payload.hd.from.id",
                "v": "edg_nd",
                "vt": "str"
            },
            {
                "p": "payload.hd.from.type",
                "v": "edg",
                "vt": "str"
            },
            {
                "p": "payload.hd.to.type",
                "v": "dsp",
                "vt": "str"
            },
            {
                "p": "payload.hd.to.id",
                "v": "nd",
                "vt": "str"
            },
            {
                "p": "payload.hd.entry.type",
                "v": "svc",
                "vt": "str"
            },
            {
                "p": "payload.hd.entry.id",
                "v": "get_z2m_datafile",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 660,
        "wires": [
            [
                "d466ad43414d7ef2"
            ]
        ]
    },
    {
        "id": "12b3ebfe4a3b6175",
        "type": "switch",
        "z": "f7e96a32e56d72eb",
        "name": "",
        "property": "msg.payload.hd.from.type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "dev",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "edg",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 610,
        "y": 320,
        "wires": [
            [
                "c08bc84bc1125e2c"
            ],
            [
                "7bad7b0521ac9633"
            ]
        ]
    },
    {
        "id": "847eb4a013500880",
        "type": "mongodb in",
        "z": "25fe735d371c65bb",
        "mongodb": "1156755863b3897c",
        "name": "find_z2m_datafile",
        "collection": "z2m_datafile",
        "operation": "find",
        "x": 510,
        "y": 260,
        "wires": [
            [
                "1f3983c9ed549d23",
                "02292d5e159ec26a"
            ]
        ]
    },
    {
        "id": "d002c1f54df9f2a0",
        "type": "mongodb out",
        "z": "25fe735d371c65bb",
        "mongodb": "1156755863b3897c",
        "name": "update_z2m_datafile",
        "collection": "z2m_datafile",
        "payonly": true,
        "upsert": true,
        "multi": false,
        "operation": "update",
        "x": 520,
        "y": 420,
        "wires": []
    },
    {
        "id": "60d5ffbdcc3f5924",
        "type": "inject",
        "z": "25fe735d371c65bb",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"id\":\"ESP8266x0006dbe5\"}",
        "payloadType": "json",
        "x": 470,
        "y": 160,
        "wires": [
            [
                "847eb4a013500880"
            ]
        ]
    },
    {
        "id": "ce41dab77dd6eb61",
        "type": "inject",
        "z": "25fe735d371c65bb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "query",
                "v": "{\"id\":\"ESP8266x0006dbe5\"}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"id\":\"ESP8266x0006dbe5\",\"datafile\":{}}",
        "payloadType": "json",
        "x": 470,
        "y": 340,
        "wires": [
            [
                "d002c1f54df9f2a0"
            ]
        ]
    },
    {
        "id": "6db4ba09c3795f14",
        "type": "mongodb out",
        "z": "25fe735d371c65bb",
        "mongodb": "1156755863b3897c",
        "name": "remove_z2m_datafile",
        "collection": "z2m_datafile",
        "payonly": true,
        "upsert": false,
        "multi": false,
        "operation": "delete",
        "x": 500,
        "y": 680,
        "wires": []
    },
    {
        "id": "ae486705b2bf82fc",
        "type": "inject",
        "z": "25fe735d371c65bb",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"id\":\"ESP8266x0006dbe5\"}",
        "payloadType": "json",
        "x": 210,
        "y": 680,
        "wires": [
            [
                "6db4ba09c3795f14"
            ]
        ]
    },
    {
        "id": "73cdfebded74d723",
        "type": "link in",
        "z": "25fe735d371c65bb",
        "name": "更新Z2M数据文件",
        "links": [
            "18399b569376b6f6"
        ],
        "x": 205,
        "y": 420,
        "wires": [
            [
                "d002c1f54df9f2a0"
            ]
        ]
    },
    {
        "id": "a5949574ea550511",
        "type": "link in",
        "z": "25fe735d371c65bb",
        "name": "查询Z2M数据文件",
        "links": [
            "01a86933fee50dae"
        ],
        "x": 195,
        "y": 260,
        "wires": [
            [
                "847eb4a013500880"
            ]
        ]
    },
    {
        "id": "02292d5e159ec26a",
        "type": "link out",
        "z": "25fe735d371c65bb",
        "name": "返回Z2M数据文件",
        "mode": "link",
        "links": [
            "ea899d2e95e95576"
        ],
        "x": 755,
        "y": 260,
        "wires": []
    },
    {
        "id": "1f3983c9ed549d23",
        "type": "debug",
        "z": "25fe735d371c65bb",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 120,
        "wires": []
    }
]