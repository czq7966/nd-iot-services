[
    {
        "id": "7c7a09edf982e2f4",
        "type": "tab",
        "label": "全局配置(数据)",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "e93bbc67912b9178",
        "type": "tab",
        "label": "订阅/发布",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "63bcc9db2b38df75",
        "type": "tab",
        "label": "接口调用",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "f7e96a32e56d72eb",
        "type": "tab",
        "label": "接口处理",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "25fe735d371c65bb",
        "type": "tab",
        "label": "MongDB",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "4f298837cfcb1b75",
        "type": "mqtt-broker",
        "name": "push",
        "broker": "push-access.sdp.101.com",
        "port": "1780",
        "clientid": "",
        "autoConnect": false,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "1156755863b3897c",
        "type": "mongodb",
        "hostname": "m1.all.dev2.mongod3.sdp",
        "topology": "direct",
        "connectOptions": "autoConnectRetry=true",
        "port": "34004",
        "db": "dev_mdb_iot_data",
        "name": "开发环境"
    },
    {
        "id": "07e7b1954a01cc92",
        "type": "mongodb",
        "hostname": "m3.edu.pre-prod.mongod.sdp",
        "topology": "direct",
        "connectOptions": "autoConnectRetry=true",
        "port": "34001",
        "db": "preproduction_mdb_iot_data",
        "name": "预生产环境"
    },
    {
        "id": "f544f205.d51a7",
        "type": "inject",
        "z": "7c7a09edf982e2f4",
        "name": "初始化",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 100,
        "wires": [
            [
                "683f9c514d3dc3f8"
            ]
        ]
    },
    {
        "id": "52f82eb73840e302",
        "type": "OS",
        "z": "7c7a09edf982e2f4",
        "name": "",
        "x": 430,
        "y": 100,
        "wires": [
            [
                "705cd1a4e7548610"
            ]
        ]
    },
    {
        "id": "705cd1a4e7548610",
        "type": "change",
        "z": "7c7a09edf982e2f4",
        "name": "OS",
        "rules": [
            {
                "t": "set",
                "p": "os",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 570,
        "y": 100,
        "wires": [
            [
                "c27b74647cc92e82"
            ]
        ]
    },
    {
        "id": "c27b74647cc92e82",
        "type": "home-dir",
        "z": "7c7a09edf982e2f4",
        "x": 720,
        "y": 100,
        "wires": [
            [
                "3e822ed879b8777e"
            ]
        ]
    },
    {
        "id": "3e822ed879b8777e",
        "type": "change",
        "z": "7c7a09edf982e2f4",
        "name": "datadir",
        "rules": [
            {
                "t": "set",
                "p": "os.datadir",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 870,
        "y": 100,
        "wires": [
            [
                "a6a4ebf94a8b8924"
            ]
        ]
    },
    {
        "id": "4aa5b949a197bcb7",
        "type": "inject",
        "z": "7c7a09edf982e2f4",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "data",
        "payloadType": "global",
        "x": 220,
        "y": 680,
        "wires": [
            [
                "61299e55f08ac3e1"
            ]
        ]
    },
    {
        "id": "61299e55f08ac3e1",
        "type": "debug",
        "z": "7c7a09edf982e2f4",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 410,
        "y": 680,
        "wires": []
    },
    {
        "id": "1188b78d61e6e2a8",
        "type": "link out",
        "z": "7c7a09edf982e2f4",
        "name": "配置完成",
        "mode": "link",
        "links": [
            "906bb62a708b4c0c"
        ],
        "x": 935,
        "y": 560,
        "wires": []
    },
    {
        "id": "6423346762c80c34",
        "type": "debug",
        "z": "7c7a09edf982e2f4",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 500,
        "wires": []
    },
    {
        "id": "4754da03d64fad4b",
        "type": "function",
        "z": "7c7a09edf982e2f4",
        "name": "数据初始化",
        "func": "let config = msg.payload;\nlet glob = config.dataio.global;\nlet keys = Object.keys(glob);\nkeys.forEach(key => {\n    global.set(key, glob[key])\n})\n\nlet data = global.get(\"data\");\nlet ids = global.get(\"ids\");\n\nlet app = data.app;\n\ndata.domains = app.domains;\ndata.dispatchers = {};\ndata.edges = {};\ndata.devices = {};\ndata.reg_devices = {};\ndata.mqtt = app.mqtt;\ndata.topics = app.mqtt.topics;\ndata.z2m = app.z2m;\ndata.ids = ids;\n\nreturn {payload: data};\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 360,
        "wires": [
            [
                "fe1774a6b4d68308"
            ]
        ]
    },
    {
        "id": "fe1774a6b4d68308",
        "type": "function",
        "z": "7c7a09edf982e2f4",
        "name": "展开主题函数",
        "func": "let data = global.get(\"data\");\nlet common = global.get(\"common\");\nlet ids = global.get(\"ids\");\n\n\nlet expandTopic = {\n    expandStr : function(v, did) {\n        if (typeof v == \"string\") {\n            v = v.replace(/\\{APP_ID\\}/g, env.get(\"IOT_APP_ID\") || \"\");\n            v = v.replace(/\\{DOM_ID\\}/g, env.get(\"IOT_DOM_ID\") || \"\");\n            v = v.replace(/\\{DSP_ID\\}/g, env.get(\"IOT_DSP_ID\") || \"\");\n            v = v.replace(/\\{EDG_ID\\}/g, env.get(\"IOT_EDG_ID\") || \"\");\n            v = v.replace(/\\{DIO_ID\\}/g, env.get(\"IOT_DIO_ID\") || \"\");\n            v = v.replace(/\\{HOSTNAME\\}/g, env.get(\"HOSTNAME\") || env.get(\"COMPUTERNAME\") || \"\");\n            \n            v = v.replace(/\\{app\\}/g, ids.app || \"\");\n            v = v.replace(/\\{dom\\}/g, ids.dom || \"\");\n            v = v.replace(/\\{dsp\\}/g, ids.dsp || \"\");\n            v = v.replace(/\\{edg\\}/g, ids.edg || \"\");\n            v = v.replace(/\\{dio\\}/g, ids.dio || \"\");\n            if (did)\n                v = v.replace(/\\{dev\\}/g, did || \"\");\n        }\n        return v;\n    },\n    expandArray : function(v, did) {\n        if (Array.isArray(v)) {\n            for(let i=0; i < v.length; i++) {\n                v[i] = this.expand(v[i], did);\n            }\n        }\n        return arr;\n    },\n    expandObj : function(v, did) {\n        if (typeof v == \"object\") {\n            let keys = Object.keys(v);\n            keys.forEach(k => {\n                v[k] = this.expand(v[k], did);\n            });\n        }\n        return v;        \n    },\n    expand : function(v, did) {\n        if (typeof v == \"string\")\n            v = this.expandStr(v, did);\n                    \n        if (Array.isArray(v)) {\n            v = expandArray(v, did);\n        }\n        \n        if (typeof v == \"object\") {\n            v = this.expandObj(v, did)\n        }\n                \n        return v\n    }\n}\n    \n\n\ncommon.expandTopic = expandTopic;\n\nreturn {payload: data};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 360,
        "wires": [
            [
                "de1af31ddcf813b0"
            ]
        ]
    },
    {
        "id": "de1af31ddcf813b0",
        "type": "function",
        "z": "7c7a09edf982e2f4",
        "name": "缓存数据函数",
        "func": "let data = global.get(\"data\");\nlet common = global.get(\"common\");\n\nlet online = function(){\n    let events = this.events;\n    if (events && events.status)\n        return events.status.pld.online;\n    return 0;\n}\n\nlet cachePayload = function(payload) {\n    let hd = payload.hd;\n    let pld = payload.pld;\n    \n    if (hd.from.type == \"dsp\") {\n        let dsp = data.dispatchers[hd.from.id];\n        if (!dsp) return;\n        \n        dsp.id = hd.from.id;\n        dsp.events = dsp.events || {};\n        dsp.events[hd.entry.id] = payload;\n        dsp.online = online;\n        data.dispatchers[hd.from.id] = dsp;\n    }\n    \n    if (hd.from.type == \"edg\") {\n        let edg = data.edges[hd.from.id];\n        if (!edg) return;\n        \n        edg.id = hd.from.id;\n        edg.events = edg.events || {};\n        edg.events[hd.entry.id] = payload;\n        edg.online = online;\n        data.edges[hd.from.id] = edg;\n    }    \n    \n    if (hd.from.type == \"dev\") {\n        let dev = data.devices[hd.from.id];\n        if (!dev) {\n            let pid = hd.from.pid;\n            let pdev = pid ? data.devices[pid] : null;\n            if (pdev){\n                dev = {};\n            } else {\n                return;\n            }\n        };\n        \n        dev.id = hd.from.id;\n        dev.events = dev.events || {};\n        if (hd.from.pid)\n            dev.pid = hd.from.pid;\n        dev.events[hd.entry.id] = payload;\n        dev.online = online;\n        data.devices[hd.from.id] = dev;\n        let edgId = hd.ids && hd.ids.edg_id || pld.edg_id\n        if (edgId) {\n            let edg = data.edges[edgId];\n            if (edg) {\n                if (dev.edge && dev.edge.id != edgId) {\n                    delete dev.edge.devices[dev.id]\n                }\n                dev.edge = edg;\n                edg.devices[dev.id] = dev;;\n            }\n        }\n    }\n    return payload;\n\n}\n\ncommon.cachePayload = cachePayload;\n\nreturn {payload: data};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 400,
        "wires": [
            [
                "aea3af329e2e33ba"
            ]
        ]
    },
    {
        "id": "5cddc77aa8c606cd",
        "type": "function",
        "z": "7c7a09edf982e2f4",
        "name": "获取HD主题函数",
        "func": "let common = global.get(\"common\");\nlet ids = global.get(\"data\").ids;\n\nlet getHDTopic = function(hd) {\n    let tpc = \"\";\n    // let ids = hd.ids || gids;\n    if (!hd.pref) hd.pref = {};\n    if (!hd.pref.app) hd.pref.app = (ids.app ? ids.app : \"0\");\n    if (!hd.pref.dom) hd.pref.dom = (ids.dom ? ids.dom : \"0\");\n    \n    if (!hd.from) hd.from = {};\n    if (!hd.from.type) hd.from.type = \"dio\";\n    if (!hd.from.id) hd.from.id = ids.dio || gids.dio;\n    if (!hd.to) hd.to = {};\n    if (!hd.to.type) hd.to.type = \"0\";\n    if (!hd.to.id) hd.to.id = \"0\";\n    if (!hd.entry) hd.entry = {};\n    if (!hd.entry.type) hd.entry.type = \"0\";\n    if (!hd.entry.id) hd.entry.id = \"0\";\n    if (!hd.sid) hd.sid = \"0\";\n    if (!hd.stp) hd.stp = 0;\n    if (!hd.version) hd.version = global.get(\"version\")\n\n\n    tpc =   hd.pref.app + \"/\" + hd.pref.dom + \"/\" + \n            hd.from.type + \"/\" + hd.from.id + \"/\" + \n            hd.to.type + \"/\" + hd.to.id + \"/\" + \n            hd.entry.type + \"/\" + hd.entry.id;\n    return tpc;\n}\n\n\ncommon.getHDTopic = getHDTopic;\n\nreturn {payload: common};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 480,
        "wires": [
            [
                "2316a7453cae5a40"
            ]
        ]
    },
    {
        "id": "2316a7453cae5a40",
        "type": "function",
        "z": "7c7a09edf982e2f4",
        "name": "设备调度函数",
        "func": "let data = global.get(\"data\");\nlet common = global.get(\"common\");\n// let ids = global.get(\"data\").ids;\n\n\nlet dispatch = {\n    getValidEdge : function(dom) {\n        let result;\n        Object.values(dom.edges).every(edg => {\n            if (edg.enabled && edg.online && edg.online()) {\n                let dsp = edg.dispatcher;\n                if (dsp && dsp.enabled && dsp.online && dsp.online()) {\n                    result = edg;\n                    return false;\n                }\n            }\n            return true;\n        })\n        \n        return result;\n        \n        // let values = Object.values(dom.edges);\n        // let result;\n        // for(let i = 0; i < values.length; i++) {\n        //     let edg = values[i];\n        //     if (edg.enabled && edg.online && edg.online()) {\n        //         let dsp = edg.dispatcher;\n        //         if (dsp && dsp.enabled && dsp.online && dsp.online()) {\n        //             result = value;\n        //             break;\n        //         }\n        //     }\n        // }\n\n        \n    },\n    \n    dispatchDevice : function(devId){\n        let dev = data.devices[devId];\n        if (!dev) return;\n        \n        let edg;\n        edg = dev.edge;\n        \n        if (!edg || !edg.id || !edg.enabled || !(edg.online && edg.online()) ) {\n            if (edg  && edg.devices)\n                delete edg.devices[dev.id];\n            edg = this.getValidEdge(regDev.domain);\n        }\n        if (edg) {\n            let devs = edg.devices || {};\n            devs[dev.id] = dev;\n            edg.devices = devs; \n        }\n        \n        dev.edge = edg;\n        return edg;\n    }\n}\n  \n  \n\ncommon.dispatch = dispatch;\n\nreturn {payload: common};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 520,
        "wires": [
            [
                "fc89e9165d2ffb12"
            ]
        ]
    },
    {
        "id": "aea3af329e2e33ba",
        "type": "function",
        "z": "7c7a09edf982e2f4",
        "name": "键值转ID函数",
        "func": "let common = global.get(\"common\");\n\nlet keyToObjId = function(objs) {\n    let keys = Object.keys(objs);\n    keys.forEach(key => {\n        let obj = objs[key];\n        if (typeof obj == \"object\") \n            obj.id = key;\n    })        \n}\n    \nlet keyDot2DUnder = function (objs, recu) {\n    Object.keys(objs).forEach(key => {\n        let obj = objs[key];\n        delete objs[key];\n        key = key.replace(/\\./g, \"__\");\n        objs[key] = obj;\n        if (typeof obj == \"object\" && recu) \n            this.keyDot2DUnder(obj, recu);\n    })     \n}\n\nlet keyDUnder2Dot = function (objs, recu) {\n    Object.keys(objs).forEach(key => {\n        let obj = objs[key];\n        delete objs[key];\n        key = key.replace(/__/g, \".\");\n        objs[key] = obj;\n        if (typeof obj == \"object\" && recu) \n            this.keyDUnder2Dot(obj, recu);\n    })     \n}\n\n\ncommon.keyToObjId = keyToObjId;\ncommon.keyDot2DUnder = keyDot2DUnder;\ncommon.keyDUnder2Dot = keyDUnder2Dot;\n\nreturn {payload: common};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 440,
        "wires": [
            [
                "5cddc77aa8c606cd"
            ]
        ]
    },
    {
        "id": "fc89e9165d2ffb12",
        "type": "function",
        "z": "7c7a09edf982e2f4",
        "name": "数据补全",
        "func": "let data = global.get(\"data\");\nlet common = global.get(\"common\");\n\nlet fixUpData = function() {\n    let doms = data.app.domains;\n    Object.keys(doms).forEach(domKey => {\n        let dom = doms[domKey];\n        dom.id = domKey;\n        dom.app = data.app;\n        let dsps = dom.dispatchers || {};\n        dom.dispatchers = dsps;\n        dom.edges = dom.edges || {}\n        dom.devices = dom.devices || {}\n        Object.keys(dsps).forEach(dspKey => {\n            let dsp = dsps[dspKey];\n            dsp.id = dspKey;\n            dsp.domain = dom;\n\n            data.dispatchers[dspKey] = dsp;\n            let edgs = dsp.edges || {};\n            dsp.edges = edgs;\n            Object.keys(edgs).forEach(edgKey => {\n                let edg = edgs[edgKey];\n                edg.id = edgKey;\n                edg.dispatcher = dsp;\n                edg.devices = edg.devices || {};\n                dom.edges[edgKey] = edg;\n                data.edges[edgKey] = edg;\n                // let devs = edg.devices || {};\n                // edg.devices = devs;\n                // Object.keys(devs).forEach(devKey => {\n                //     let dev = devs[devKey];\n                //     dev.id = devKey;\n                //     dev.edge = edg;\n                //     data.devices[devKey] = dev;\n                // })\n                \n            })\n            \n        })\n        \n        //注册设备\n        let regDevs = dom.reg_devices || {};\n        dom.reg_devices = regDevs;\n        Object.keys(regDevs).forEach(devKey => {\n            let devVal = regDevs[devKey] || {};\n            if (typeof devVal == \"string\") {\n                devVal = {\n                    id: devKey,\n                    name: devVal\n                }\n            } else {\n                devVal.id = devKey\n            }\n            let dev = dom.devices[devKey] || devVal;\n            dom.devices[devKey] = dev;\n            dev.domain = dom;\n            data.reg_devices[devKey] = dev;\n            data.devices[devKey] = dev;\n        })\n    })\n}\n\ncommon.fixUpData = fixUpData;\n\ncommon.expandTopic.expand(data.ids);   \ncommon.expandTopic.expand(data.topics);\ndata.app.id = data.ids.app;\n\ncommon.fixUpData();\ncommon.keyToObjId(data.domains);\ncommon.keyToObjId(data.dispatchers);\ncommon.keyToObjId(data.edges);\ncommon.keyToObjId(data.devices);\n\n\n\nreturn {payload: data};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 560,
        "wires": [
            [
                "6423346762c80c34",
                "1188b78d61e6e2a8"
            ]
        ]
    },
    {
        "id": "a6a4ebf94a8b8924",
        "type": "switch",
        "z": "7c7a09edf982e2f4",
        "name": "是否激活数据？",
        "property": "IOT_ENABLE_DIO",
        "propertyType": "env",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 160,
        "y": 180,
        "wires": [
            [
                "398b864fe241772d"
            ],
            []
        ]
    },
    {
        "id": "c0624055eec65ac4",
        "type": "function",
        "z": "7c7a09edf982e2f4",
        "name": "配置文件",
        "func": "\nreturn {\n    filename: env.get(\"IOT_CONFIG_FILE\")\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 160,
        "wires": [
            [
                "387bc8ba683df91f"
            ]
        ]
    },
    {
        "id": "874e2ff0304f3dd7",
        "type": "json",
        "z": "7c7a09edf982e2f4",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1070,
        "y": 160,
        "wires": [
            [
                "852cabd7bf1568ea"
            ]
        ]
    },
    {
        "id": "387bc8ba683df91f",
        "type": "file in",
        "z": "7c7a09edf982e2f4",
        "name": "读配置文件",
        "filename": "",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 910,
        "y": 160,
        "wires": [
            [
                "874e2ff0304f3dd7"
            ]
        ]
    },
    {
        "id": "43b688e17d7f6bc2",
        "type": "inject",
        "z": "7c7a09edf982e2f4",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "config",
        "payloadType": "global",
        "x": 230,
        "y": 720,
        "wires": [
            [
                "61299e55f08ac3e1"
            ]
        ]
    },
    {
        "id": "683f9c514d3dc3f8",
        "type": "change",
        "z": "7c7a09edf982e2f4",
        "name": "version",
        "rules": [
            {
                "t": "set",
                "p": "version",
                "pt": "global",
                "to": "0.0.1",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 300,
        "y": 100,
        "wires": [
            [
                "52f82eb73840e302"
            ]
        ]
    },
    {
        "id": "b1a104c8f9b78d59",
        "type": "link in",
        "z": "7c7a09edf982e2f4",
        "name": "",
        "links": [
            "13a9b4457054c058"
        ],
        "x": 115,
        "y": 440,
        "wires": [
            [
                "4754da03d64fad4b"
            ]
        ]
    },
    {
        "id": "398b864fe241772d",
        "type": "switch",
        "z": "7c7a09edf982e2f4",
        "name": "是否有配置文件？",
        "property": "IOT_CONFIG_FILE",
        "propertyType": "env",
        "rules": [
            {
                "t": "neq",
                "v": "",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 370,
        "y": 180,
        "wires": [
            [
                "bf0fd446d288a43e"
            ],
            [
                "82d624e156acd716"
            ]
        ]
    },
    {
        "id": "82d624e156acd716",
        "type": "change",
        "z": "7c7a09edf982e2f4",
        "name": "获取配置",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 580,
        "y": 240,
        "wires": [
            [
                "fcb9bbaa875f8ea9"
            ]
        ]
    },
    {
        "id": "fcb9bbaa875f8ea9",
        "type": "link out",
        "z": "7c7a09edf982e2f4",
        "name": "",
        "mode": "link",
        "links": [
            "95f8abc4558b9fe4"
        ],
        "x": 935,
        "y": 280,
        "wires": []
    },
    {
        "id": "852cabd7bf1568ea",
        "type": "switch",
        "z": "7c7a09edf982e2f4",
        "name": "是否有数据节点？",
        "property": "payload.dataio",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 170,
        "y": 260,
        "wires": [
            [
                "82d624e156acd716"
            ],
            [
                "4754da03d64fad4b"
            ]
        ]
    },
    {
        "id": "bf0fd446d288a43e",
        "type": "switch",
        "z": "7c7a09edf982e2f4",
        "name": "优先配置文件？",
        "property": "IOT_CONFIG_FILE_FIRST",
        "propertyType": "env",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 580,
        "y": 160,
        "wires": [
            [
                "c0624055eec65ac4"
            ],
            [
                "82d624e156acd716"
            ]
        ]
    },
    {
        "id": "0f989c13f4e0c1cb",
        "type": "mqtt in",
        "z": "e93bbc67912b9178",
        "name": "终端订阅",
        "topic": "",
        "qos": "2",
        "datatype": "utf8",
        "broker": "4f298837cfcb1b75",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 1,
        "x": 400,
        "y": 140,
        "wires": [
            [
                "0050c31c1969d8ff",
                "c503d35a9ca051ed"
            ]
        ]
    },
    {
        "id": "906bb62a708b4c0c",
        "type": "link in",
        "z": "e93bbc67912b9178",
        "name": "",
        "links": [
            "1188b78d61e6e2a8"
        ],
        "x": 115,
        "y": 220,
        "wires": [
            [
                "e4534314a7bcd4b3"
            ]
        ]
    },
    {
        "id": "589883c5ddd06e17",
        "type": "function",
        "z": "e93bbc67912b9178",
        "name": "订阅主题",
        "func": "let data = global.get(\"data\")\nlet topics = data.topics;\n\nnode.send({\n        action: \"unsubscribe\",\n        topic: Object.values(topics.subs)\n})\n\nnode.send({\n        action: \"unsubscribe\",\n        topic: Object.values(topics.services)\n})\n\n\n\nnode.send({\n        action: \"subscribe\",\n        topic: Object.values(topics.subs)\n})\n\nnode.send({\n        action: \"subscribe\",\n        topic: Object.values(topics.services)\n})\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 140,
        "wires": [
            [
                "0f989c13f4e0c1cb",
                "f6ce25be1914c84e"
            ]
        ]
    },
    {
        "id": "745ba2affb87c4cd",
        "type": "debug",
        "z": "e93bbc67912b9178",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 60,
        "wires": []
    },
    {
        "id": "ee0217ceba515222",
        "type": "function",
        "z": "e93bbc67912b9178",
        "name": "缓存数据",
        "func": "msg.topics = msg.topic.split(\"/\");\nlet hd = msg.payload.hd;\nif (!hd.pref) {\n    hd.pref = {\n        app: msg.topics[0],\n        dom: msg.topics[1]\n    }\n}\n\nlet common = global.get(\"common\");\nif (common.cachePayload(msg.payload)) {\n    return [msg, null];\n} else {\n    return [null, msg];\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 140,
        "wires": [
            [
                "be8cd487c69c6c5a"
            ],
            [
                "f40aa739a1831a4b"
            ]
        ]
    },
    {
        "id": "be8cd487c69c6c5a",
        "type": "link out",
        "z": "e93bbc67912b9178",
        "name": "订阅输出",
        "mode": "link",
        "links": [
            "2ff5101df1ab6584"
        ],
        "x": 975,
        "y": 120,
        "wires": []
    },
    {
        "id": "47f3ed4e61a01a5c",
        "type": "function",
        "z": "e93bbc67912b9178",
        "name": "发布主题",
        "func": "let common = global.get(\"common\")\nmsg.topic = common.getHDTopic(msg.payload.hd);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 420,
        "wires": [
            [
                "8990876a77a537e8",
                "d5db30b412aaf4ae",
                "a83fbf51e61bce78"
            ]
        ]
    },
    {
        "id": "8990876a77a537e8",
        "type": "mqtt out",
        "z": "e93bbc67912b9178",
        "name": "mqtt发布",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "4f298837cfcb1b75",
        "x": 500,
        "y": 420,
        "wires": []
    },
    {
        "id": "f4460e5db856239e",
        "type": "link in",
        "z": "e93bbc67912b9178",
        "name": "mqtt发布",
        "links": [
            "9b3a8e543bd70406",
            "5002cb933f4b4eb5",
            "cb5a80219ea82576",
            "befe5b1ac4389423",
            "8f5000be83384a7a",
            "a6df7d880adde7dd"
        ],
        "x": 225,
        "y": 420,
        "wires": [
            [
                "47f3ed4e61a01a5c"
            ]
        ]
    },
    {
        "id": "d5db30b412aaf4ae",
        "type": "debug",
        "z": "e93bbc67912b9178",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "topic",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 520,
        "y": 500,
        "wires": []
    },
    {
        "id": "13403285d1db57b7",
        "type": "function",
        "z": "e93bbc67912b9178",
        "name": "时间戳",
        "func": "let date = new Date()\nmsg.payload.hd.tpc = msg.topic;\nmsg.payload.hd.tms=date.valueOf();\nmsg.payload.hd.tm=date.toLocaleString();\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 140,
        "wires": [
            [
                "745ba2affb87c4cd",
                "ee0217ceba515222"
            ]
        ]
    },
    {
        "id": "a83fbf51e61bce78",
        "type": "debug",
        "z": "e93bbc67912b9178",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 580,
        "wires": []
    },
    {
        "id": "1fbea7baf2a0c450",
        "type": "link in",
        "z": "e93bbc67912b9178",
        "name": "动态订阅主题",
        "links": [
            "83c403b1c017c665"
        ],
        "x": 125,
        "y": 100,
        "wires": [
            [
                "0f989c13f4e0c1cb",
                "f6ce25be1914c84e"
            ]
        ]
    },
    {
        "id": "f6ce25be1914c84e",
        "type": "debug",
        "z": "e93bbc67912b9178",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "topic",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 380,
        "y": 60,
        "wires": []
    },
    {
        "id": "39ab7df981465702",
        "type": "change",
        "z": "e93bbc67912b9178",
        "name": "自动连接",
        "rules": [
            {
                "t": "set",
                "p": "action",
                "pt": "msg",
                "to": "connect",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "broker.autoConnect",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "broker.force",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "broker.clientid",
                "pt": "msg",
                "to": "data.ids.mqtt",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 360,
        "y": 1260,
        "wires": [
            [
                "564455fd4b928ba4"
            ]
        ]
    },
    {
        "id": "564455fd4b928ba4",
        "type": "change",
        "z": "e93bbc67912b9178",
        "name": "连接消息",
        "rules": [
            {
                "t": "set",
                "p": "broker.birth.topic",
                "pt": "msg",
                "to": "data.topics.pubs.edg_evt_status",
                "tot": "global"
            },
            {
                "t": "set",
                "p": "broker.birth.qos",
                "pt": "msg",
                "to": "2",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "broker.birth.retain",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "broker.birth.payload.hd.from.type",
                "pt": "msg",
                "to": "edg",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "broker.birth.payload.hd.from.id",
                "pt": "msg",
                "to": "data.ids.edg",
                "tot": "global"
            },
            {
                "t": "set",
                "p": "broker.birth.payload.hd.to.type",
                "pt": "msg",
                "to": "0",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "broker.birth.payload.hd.to.id",
                "pt": "msg",
                "to": "0",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "broker.birth.payload.hd.entry.type",
                "pt": "msg",
                "to": "evt",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "broker.birth.payload.hd.entry.id",
                "pt": "msg",
                "to": "status",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "broker.birth.payload.pld.online",
                "pt": "msg",
                "to": "1",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "broker.birth.payload.pld.id",
                "pt": "msg",
                "to": "data.ids.edg",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 560,
        "y": 1260,
        "wires": [
            [
                "48eb4156b393f84f"
            ]
        ]
    },
    {
        "id": "48eb4156b393f84f",
        "type": "change",
        "z": "e93bbc67912b9178",
        "name": "遗嘱消息",
        "rules": [
            {
                "t": "set",
                "p": "broker.will",
                "pt": "msg",
                "to": "broker.birth",
                "tot": "msg",
                "dc": true
            },
            {
                "t": "set",
                "p": "broker.will.payload.pld.online",
                "pt": "msg",
                "to": "0",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 720,
        "y": 1260,
        "wires": [
            []
        ]
    },
    {
        "id": "0050c31c1969d8ff",
        "type": "json",
        "z": "e93bbc67912b9178",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 550,
        "y": 140,
        "wires": [
            [
                "13403285d1db57b7"
            ]
        ]
    },
    {
        "id": "c503d35a9ca051ed",
        "type": "debug",
        "z": "e93bbc67912b9178",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 60,
        "wires": []
    },
    {
        "id": "e4534314a7bcd4b3",
        "type": "function",
        "z": "e93bbc67912b9178",
        "name": "自动连接",
        "func": "let data = global.get(\"data\");\nmsg = {};\nmsg.action = \"connect\";\nmsg.broker = {\n    autoConnect: true,\n    force: true\n}\nObject.assign(msg.broker, data.mqtt.broker);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 220,
        "wires": [
            [
                "b920e31b90166791"
            ]
        ]
    },
    {
        "id": "1d38d82fd22fa3b5",
        "type": "json",
        "z": "e93bbc67912b9178",
        "name": "",
        "property": "broker.will.payload",
        "action": "str",
        "pretty": false,
        "x": 710,
        "y": 220,
        "wires": [
            [
                "0f989c13f4e0c1cb",
                "589883c5ddd06e17"
            ]
        ]
    },
    {
        "id": "b920e31b90166791",
        "type": "function",
        "z": "e93bbc67912b9178",
        "name": "出生消息",
        "func": "let data = global.get(\"data\");\nlet common = global.get(\"common\");\n\nlet hd = {\n    from: {\n        type: \"dio\",\n        id: data.ids.dio\n    },\n    to: {\n        type: \"0\",\n        id: \"0\"\n    },\n    entry: {\n        type: \"evt\",\n        id: \"status\"\n    },\n    version: global.get(\"version\")\n};\n\nlet pld = {\n    id: data.ids.dio,\n    online: 1\n};\n\nlet topic = common.getHDTopic(hd);\n\n\nlet birth = {\n    topic: topic,\n    qos: 2,\n    retain: true,\n    payload: {\n        hd: hd,\n        pld: pld\n    }\n}\n\nmsg.broker = msg.broker || {};\nmsg.broker.birth = birth;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 220,
        "wires": [
            [
                "45838fa67f1ea02a"
            ]
        ]
    },
    {
        "id": "45838fa67f1ea02a",
        "type": "function",
        "z": "e93bbc67912b9178",
        "name": "遗嘱消息",
        "func": "let birth = msg.broker.birth;\n\nlet pld = {\n    id: birth.payload.pld.id,\n    online: 0\n};\n\n\n\nlet will = {\n    topic: birth.topic,\n    qos: 2,\n    retain: true,\n    payload: {\n        hd: birth.payload.hd,\n        pld: pld\n    }\n}\n\n\nmsg.broker.will = will;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 220,
        "wires": [
            [
                "1d38d82fd22fa3b5"
            ]
        ]
    },
    {
        "id": "f40aa739a1831a4b",
        "type": "debug",
        "z": "e93bbc67912b9178",
        "name": "缓存失败",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1020,
        "y": 180,
        "wires": []
    },
    {
        "id": "3117ede74b04d9c4",
        "type": "comment",
        "z": "63bcc9db2b38df75",
        "name": "MG数据查询",
        "info": "",
        "x": 150,
        "y": 80,
        "wires": []
    },
    {
        "id": "95f8abc4558b9fe4",
        "type": "link in",
        "z": "63bcc9db2b38df75",
        "name": "获取配置数据",
        "links": [
            "fcb9bbaa875f8ea9"
        ],
        "x": 105,
        "y": 180,
        "wires": [
            [
                "148e5a4f336db704"
            ]
        ]
    },
    {
        "id": "148e5a4f336db704",
        "type": "function",
        "z": "63bcc9db2b38df75",
        "name": "获取配置数据",
        "func": "let _msg = {};\n_msg.topic = \"find_ndiot_config\";\n_msg.collection = \"ndiot_config\";\n_msg.operation = \"find\";\n_msg.payload = {\n    \"dataio.global.data.app.id\": env.get(\"IOT_APP_ID\")\n}\n_msg._payload = msg.payload;\nreturn _msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 180,
        "wires": [
            [
                "1d7c8bf676bfd405"
            ]
        ]
    },
    {
        "id": "1d7c8bf676bfd405",
        "type": "link out",
        "z": "63bcc9db2b38df75",
        "name": "",
        "mode": "link",
        "links": [
            "9bfc8855190691e9"
        ],
        "x": 555,
        "y": 220,
        "wires": []
    },
    {
        "id": "6f39e4ac99d30a07",
        "type": "switch",
        "z": "63bcc9db2b38df75",
        "name": "MG数据返回",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "find_ndiot_config",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "find_ndiot_z2m_datafile",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "find_ndiot_get_domain",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 270,
        "y": 540,
        "wires": [
            [
                "361c77e72a85832a"
            ],
            [
                "8f366ee3986be4d3"
            ],
            [
                "ad33114774218383"
            ]
        ]
    },
    {
        "id": "cfdf93b3e832d7d7",
        "type": "link in",
        "z": "63bcc9db2b38df75",
        "name": "",
        "links": [
            "272546c8bfd46694"
        ],
        "x": 105,
        "y": 540,
        "wires": [
            [
                "6f39e4ac99d30a07"
            ]
        ]
    },
    {
        "id": "b22fe37d91a17773",
        "type": "debug",
        "z": "63bcc9db2b38df75",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 620,
        "wires": []
    },
    {
        "id": "13a9b4457054c058",
        "type": "link out",
        "z": "63bcc9db2b38df75",
        "name": "配置数据输出",
        "mode": "link",
        "links": [
            "b1a104c8f9b78d59"
        ],
        "x": 665,
        "y": 500,
        "wires": []
    },
    {
        "id": "361c77e72a85832a",
        "type": "function",
        "z": "63bcc9db2b38df75",
        "name": "配置数据返回",
        "func": "if (msg.payload && msg.payload[0]) {\n    return {\n        payload: msg.payload[0]\n    };\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 500,
        "wires": [
            [
                "13a9b4457054c058"
            ]
        ]
    },
    {
        "id": "d57ad9b001fdc2bc",
        "type": "link in",
        "z": "63bcc9db2b38df75",
        "name": "获取Z2M数据",
        "links": [
            "34edf26e3f576c05"
        ],
        "x": 105,
        "y": 260,
        "wires": [
            [
                "c7fa18b4bd0ac250"
            ]
        ]
    },
    {
        "id": "c7fa18b4bd0ac250",
        "type": "function",
        "z": "63bcc9db2b38df75",
        "name": "获取Z2M数据",
        "func": "let _msg = {};\n_msg.topic = \"find_ndiot_z2m_datafile\";\n_msg.collection = \"ndiot_z2m_datafile\";\n_msg.operation = \"find\";\n_msg.sort = { \"hd.tms\": -1};\n_msg.limit = 2;\n_msg.payload = {\"pld.id\": msg.payload.pld.id }\n_msg._payload = msg.payload;\nreturn _msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 260,
        "wires": [
            [
                "1d7c8bf676bfd405"
            ]
        ]
    },
    {
        "id": "8f366ee3986be4d3",
        "type": "function",
        "z": "63bcc9db2b38df75",
        "name": "配置数据返回",
        "func": "return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 560,
        "wires": [
            [
                "d5f2a9ab871bd1fe",
                "b22fe37d91a17773"
            ]
        ]
    },
    {
        "id": "d5f2a9ab871bd1fe",
        "type": "link out",
        "z": "63bcc9db2b38df75",
        "name": "",
        "mode": "link",
        "links": [
            "ea899d2e95e95576"
        ],
        "x": 665,
        "y": 560,
        "wires": []
    },
    {
        "id": "4b05f49dd8af684c",
        "type": "function",
        "z": "63bcc9db2b38df75",
        "name": "获取租户数据",
        "func": "let _msg = {};\n_msg.topic = \"find_ndiot_get_domain\";\n_msg.collection = \"ndiot_config\";\n_msg.operation = \"find\";\n_msg.limit = 1;\n_msg.payload = {\n    \"dataio.global.data.app.id\": env.get(\"IOT_APP_ID\")\n}\n_msg._payload = msg.payload;\nreturn _msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 340,
        "wires": [
            [
                "1d7c8bf676bfd405"
            ]
        ]
    },
    {
        "id": "46c7be7c38c2cddc",
        "type": "link in",
        "z": "63bcc9db2b38df75",
        "name": "获取租户数据",
        "links": [],
        "x": 115,
        "y": 340,
        "wires": [
            [
                "4b05f49dd8af684c"
            ]
        ]
    },
    {
        "id": "ad33114774218383",
        "type": "function",
        "z": "63bcc9db2b38df75",
        "name": "租户数据返回",
        "func": "if (msg.payload && msg.payload[0]) {\n    let config = msg.payload[0];\n    let dataio = config.dataio;\n    let app = dataio.global.data.app;\n    let doms = app.domain;\n    let hd = msg._payload.hd;\n    let pld = msg._payload.pld;\n    let result;\n\n    Object.keys(doms).every(domId => {\n        let dom = doms[domId] || {};\n        if (pld.type == \"dsp\" || pld.type == \"edg\") {\n            let dsps = dom.dispatchers || {};\n            Object.keys(dsps).every(dspId => {\n                if (pld.type == \"dsp\") {\n                    if (dspId == pld.id) {\n                        result = domId;\n                    }\n                } \n                \n                if (pld.type == \"edg\") {\n                    let dsp = dsps[dspId] || {};\n                    let edgs = dsp.edges || {};\n                    Object.keys(edgs).every(edgId => {\n                        if (edgId == pld.id) {\n                            result = domId;\n                        }\n                        return !result;\n                    })\n                }\n                \n                return !result;\n            })\n        }   \n        \n        if (pld.type == \"dev\") {\n            let devs = dom.reg_devices || {};\n            Object.keys(devs).every(devId => {\n                if (devId == pld.id) {\n                    result = domId;\n                }\n                return !result;\n            })\n        }        \n        return !result;\n        \n    })\n    \n    if (result) {\n        let _hd = Object.assign({}, hd);\n        let pld = Object.assign({}, pld);\n        delete _hd.from;\n        _hd.to = hd.from;\n        _hd.stp = 1;\n        _pld.dom_id = result;\n        return {\n            payload: {\n                hd: _hd,\n                pld: _pld\n            }\n        }\n    }   \n\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "2ff5101df1ab6584",
        "type": "link in",
        "z": "f7e96a32e56d72eb",
        "name": "",
        "links": [
            "be8cd487c69c6c5a",
            "a25c1430b228eb35"
        ],
        "x": 185,
        "y": 340,
        "wires": [
            [
                "71f6fcd9ca7201bf"
            ]
        ]
    },
    {
        "id": "0539b819bad42aa7",
        "type": "switch",
        "z": "f7e96a32e56d72eb",
        "name": "登入请求",
        "property": "payload.hd.from.type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "dsp",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "edg",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "dev",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 720,
        "y": 260,
        "wires": [
            [
                "375e15109cdb8b75"
            ],
            [
                "d05180cf83926964"
            ],
            [
                "cdae36d1ac564463"
            ]
        ]
    },
    {
        "id": "375e15109cdb8b75",
        "type": "function",
        "z": "f7e96a32e56d72eb",
        "name": "调度",
        "func": "let data = global.get(\"data\");\nlet hd = msg.payload.hd;\nlet dsp = data.dispatchers[hd.from.id];\nif (dsp && dsp.enabled) {\n    let topics = hd.tpc.split(\"/\");\n    let _hd = Object.assign({}, hd);\n    // _hd.ids = _hd.ids || {};\n    // _hd.ids.app = topics[0];\n    // _hd.ids.dom = topics[1];\n    // _hd.ids.dsp = dsp.id;\n    // _hd.ids.dio = data.ids.dio;\n    \n    \n    delete _hd.from;\n    _hd.to = hd.from;\n    _hd.stp = 1;\n    \n    let _pld = {\n        app_id : dsp.domain.app.id,\n        dom_id : dsp.domain.id,\n        dsp_id : dsp.id\n    }\n    return {\n        payload: {\n            hd: _hd,\n            pld: _pld\n        }\n    }\n    \n}\n    ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 220,
        "wires": [
            [
                "8f5000be83384a7a",
                "2812239d3e85657b"
            ]
        ]
    },
    {
        "id": "8f5000be83384a7a",
        "type": "link out",
        "z": "f7e96a32e56d72eb",
        "name": "",
        "mode": "link",
        "links": [
            "f4460e5db856239e"
        ],
        "x": 1295,
        "y": 260,
        "wires": []
    },
    {
        "id": "d05180cf83926964",
        "type": "function",
        "z": "f7e96a32e56d72eb",
        "name": "边缘",
        "func": "let data = global.get(\"data\");\nlet hd = msg.payload.hd;\nlet edg = data.edges[hd.from.id];\nlet dsp = edg.dispatcher;\nif (edg && edg.enabled && dsp && dsp.enabled) {\n    let topics = hd.tpc.split(\"/\");\n    let _hd = Object.assign({}, hd);\n    // _hd.ids = _hd.ids || {};\n    // _hd.ids.app = topics[0];\n    // _hd.ids.dom = topics[1];\n    // _hd.ids.dsp = dsp.id;\n    // _hd.ids.edg = edg.id;\n    // _hd.ids.dio = data.ids.dio;\n    \n    \n    delete _hd.from;\n    _hd.to = hd.from;\n    _hd.stp = 1;\n    \n    let _pld = {\n        app_id : dsp.domain.app.id,\n        dom_id : dsp.domain.id,\n        dsp_id : dsp.id,\n        edg_id : edg.id\n    }\n    return {\n        payload: {\n            hd: _hd,\n            pld: _pld\n        }\n    }\n    \n}\n    ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 260,
        "wires": [
            [
                "8f5000be83384a7a",
                "2812239d3e85657b"
            ]
        ]
    },
    {
        "id": "cdae36d1ac564463",
        "type": "function",
        "z": "f7e96a32e56d72eb",
        "name": "设备",
        "func": "let data = global.get(\"data\");\nlet hd = msg.payload.hd;\nlet dom, dsp;\n\nObject.values(data.domains).every(_dom => {\n    if (_dom.enabled) {\n        dom = _dom;\n        return false;\n    }\n})\n\nif (dom) {\n    Object.values(dom.dispatchers).every(_dsp => {\n        if (_dsp.enabled) {\n            dsp = _dsp;\n            return false;\n        }\n    })\n}\n\nif (dom && dsp) {\n    let _hd = Object.assign({}, hd);\n    delete _hd.from;\n    _hd.to = hd.from;\n    _hd.stp = 1;\n    let _pld = {\n        app_id : dsp.domain.app.id,\n        dom_id : dsp.domain.id,\n        dsp_id : dsp.id,\n        dev_id : hd.from.id\n    }\n    return {\n        payload: {\n            hd: _hd,\n            pld: _pld\n        }\n    }   \n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 300,
        "wires": [
            [
                "8f5000be83384a7a",
                "2812239d3e85657b"
            ]
        ]
    },
    {
        "id": "71f6fcd9ca7201bf",
        "type": "function",
        "z": "f7e96a32e56d72eb",
        "name": "服务请求",
        "func": "let hd = msg.payload.hd;\nif (hd.stp == 0 && hd.entry.type == \"svc\" ) {\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 340,
        "wires": [
            [
                "e5f8902d1028c6dd"
            ]
        ]
    },
    {
        "id": "e5f8902d1028c6dd",
        "type": "switch",
        "z": "f7e96a32e56d72eb",
        "name": "",
        "property": "payload.hd.entry.id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "login",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "get_z2m_datafile",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "set_z2m_datafile",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "dio_svc_get_domain",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 490,
        "y": 340,
        "wires": [
            [
                "0539b819bad42aa7"
            ],
            [
                "e51a89d4f3470cfa"
            ],
            [
                "58a17b926cb4d96d"
            ],
            [
                "8578476a17c75431"
            ]
        ]
    },
    {
        "id": "58a17b926cb4d96d",
        "type": "function",
        "z": "f7e96a32e56d72eb",
        "name": "Z2M设置请求",
        "func": "let common = global.get(\"common\");\nlet payload = msg.payload;\npayload.id = payload.pld.id;\ncommon.keyDot2DUnder(payload, true);\n\nreturn {\n    payload: payload\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 620,
        "wires": [
            [
                "7c00facf6a435e61",
                "c7bc800d1c9dda6d"
            ]
        ]
    },
    {
        "id": "2812239d3e85657b",
        "type": "debug",
        "z": "f7e96a32e56d72eb",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1110,
        "y": 160,
        "wires": []
    },
    {
        "id": "d466ad43414d7ef2",
        "type": "function",
        "z": "f7e96a32e56d72eb",
        "name": "有无缓存",
        "func": "let data = global.get(\"data\");\nlet hd = msg.payload.hd;\nlet pld = msg.payload.pld;\n\nlet device = data.devices[pld.id];\nif (!device) {\n    device = {events:{}};\n    device.id = pld.id;\n    data.devices[pld.id] = device;\n}\n\nlet z2m = device.z2m ;\n//有缓存\nif (z2m && z2m.datafile || msg.result == 0) {\n    let _msg = {\n        payload: {\n            hd: {\n                // from: hd.to,\n                to: hd.from,\n                entry: hd.entry,\n                sid: hd.sid,\n                stp: 1\n            },\n            pld: {\n                id: pld.id,\n                datafile: z2m.datafile,\n                defaultDatafile: z2m.defaultDatafile\n            }\n        }\n    };\n    \n    return [_msg, null];\n}\n\n\n\nreturn [null, msg];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 400,
        "wires": [
            [
                "104148958a127a27",
                "465228e80c5165c6"
            ],
            [
                "20cdd20af2ac157d",
                "62f7d5be3ac0d3a8"
            ]
        ]
    },
    {
        "id": "104148958a127a27",
        "type": "change",
        "z": "f7e96a32e56d72eb",
        "name": "有缓存",
        "rules": [],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1130,
        "y": 380,
        "wires": [
            [
                "a6df7d880adde7dd"
            ]
        ]
    },
    {
        "id": "f0fb7cb724e8b603",
        "type": "function",
        "z": "f7e96a32e56d72eb",
        "name": "MG查询",
        "func": "let hd = msg.payload.hd;\nlet pld = msg.payload.pld;\n\nreturn {\n    _payload: msg.payload,\n    payload: {\n        \"pld.id\": pld.id\n    },\n    sort:{\n        \"hd.tms\": -1\n    },\n    limit: 2\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 960,
        "wires": [
            [
                "fc30693de61f70ea"
            ]
        ]
    },
    {
        "id": "e51a89d4f3470cfa",
        "type": "change",
        "z": "f7e96a32e56d72eb",
        "name": "Z2M获取请求",
        "rules": [],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 740,
        "y": 400,
        "wires": [
            [
                "d466ad43414d7ef2"
            ]
        ]
    },
    {
        "id": "a6df7d880adde7dd",
        "type": "link out",
        "z": "f7e96a32e56d72eb",
        "name": "",
        "mode": "link",
        "links": [
            "f4460e5db856239e"
        ],
        "x": 1295,
        "y": 380,
        "wires": []
    },
    {
        "id": "fc30693de61f70ea",
        "type": "link out",
        "z": "f7e96a32e56d72eb",
        "name": "",
        "mode": "link",
        "links": [
            "a5949574ea550511"
        ],
        "x": 775,
        "y": 960,
        "wires": []
    },
    {
        "id": "ea899d2e95e95576",
        "type": "link in",
        "z": "f7e96a32e56d72eb",
        "name": "Z2M数据查询返回",
        "links": [
            "d5f2a9ab871bd1fe"
        ],
        "x": 665,
        "y": 460,
        "wires": [
            [
                "ada4b9868b069c4d"
            ]
        ]
    },
    {
        "id": "ada4b9868b069c4d",
        "type": "function",
        "z": "f7e96a32e56d72eb",
        "name": "查询返回",
        "func": "let data = global.get(\"data\");\nlet common = global.get(\"common\");\nlet _payload = msg._payload;\nlet _hd = _payload.hd;\nlet _pld = _payload.pld;\n\n\nlet device = data.devices[_pld.id];\nlet z2m = device.z2m || {};\ndevice.z2m = z2m;\nlet _msg = {};\n\nif (msg.payload) {\n    if (msg.payload[0]) {\n        let pld = msg.payload[0].pld;\n        common.keyDUnder2Dot(pld, true);\n        z2m.datafile = pld.datafile;\n        _msg.result = 1;\n    } else {\n        z2m.defaultDatafile = data.z2m.defaultDatafile;\n        _msg.result = 0;\n    }\n    _msg.payload = msg._payload;\n    return _msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 460,
        "wires": [
            [
                "d466ad43414d7ef2",
                "c6e1604bf9b4a0ae"
            ]
        ]
    },
    {
        "id": "c6e1604bf9b4a0ae",
        "type": "debug",
        "z": "f7e96a32e56d72eb",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 930,
        "y": 520,
        "wires": []
    },
    {
        "id": "465228e80c5165c6",
        "type": "debug",
        "z": "f7e96a32e56d72eb",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 320,
        "wires": []
    },
    {
        "id": "20cdd20af2ac157d",
        "type": "debug",
        "z": "f7e96a32e56d72eb",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1170,
        "y": 520,
        "wires": []
    },
    {
        "id": "7c00facf6a435e61",
        "type": "debug",
        "z": "f7e96a32e56d72eb",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1170,
        "y": 660,
        "wires": []
    },
    {
        "id": "c7bc800d1c9dda6d",
        "type": "link out",
        "z": "f7e96a32e56d72eb",
        "name": "",
        "mode": "link",
        "links": [
            "73cdfebded74d723"
        ],
        "x": 1295,
        "y": 620,
        "wires": []
    },
    {
        "id": "62f7d5be3ac0d3a8",
        "type": "change",
        "z": "f7e96a32e56d72eb",
        "name": "查询",
        "rules": [],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1130,
        "y": 420,
        "wires": [
            [
                "34edf26e3f576c05"
            ]
        ]
    },
    {
        "id": "34edf26e3f576c05",
        "type": "link out",
        "z": "f7e96a32e56d72eb",
        "name": "",
        "mode": "link",
        "links": [
            "d57ad9b001fdc2bc"
        ],
        "x": 1295,
        "y": 420,
        "wires": []
    },
    {
        "id": "8578476a17c75431",
        "type": "function",
        "z": "f7e96a32e56d72eb",
        "name": "获取租户",
        "func": "",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "847eb4a013500880",
        "type": "mongodb in",
        "z": "25fe735d371c65bb",
        "mongodb": "07e7b1954a01cc92",
        "name": "预生产查找",
        "collection": "ndiot_z2m_datafile",
        "operation": "find",
        "x": 630,
        "y": 800,
        "wires": [
            [
                "1f3983c9ed549d23",
                "02292d5e159ec26a"
            ]
        ]
    },
    {
        "id": "d002c1f54df9f2a0",
        "type": "mongodb out",
        "z": "25fe735d371c65bb",
        "mongodb": "07e7b1954a01cc92",
        "name": "预生产增加",
        "collection": "ndiot_z2m_datafile",
        "payonly": true,
        "upsert": true,
        "multi": false,
        "operation": "update",
        "x": 630,
        "y": 980,
        "wires": []
    },
    {
        "id": "60d5ffbdcc3f5924",
        "type": "inject",
        "z": "25fe735d371c65bb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "limit",
                "v": "10",
                "vt": "num"
            },
            {
                "p": "sort",
                "v": "{\"hd.tms\": -1}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"pld.id\":\"ESP8266x00c17ca1\"}",
        "payloadType": "json",
        "x": 450,
        "y": 880,
        "wires": [
            [
                "ecacd53322507d5f"
            ]
        ]
    },
    {
        "id": "ce41dab77dd6eb61",
        "type": "inject",
        "z": "25fe735d371c65bb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "query",
                "v": "{\"id\":\"ESP8266x0006dbe5\"}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"id\":\"ESP8266x0006dbe5\",\"datafile\":{}}",
        "payloadType": "json",
        "x": 430,
        "y": 1040,
        "wires": [
            [
                "63f58c50a3aff1c5"
            ]
        ]
    },
    {
        "id": "73cdfebded74d723",
        "type": "link in",
        "z": "25fe735d371c65bb",
        "name": "更新Z2M数据文件",
        "links": [
            "18399b569376b6f6",
            "c7bc800d1c9dda6d"
        ],
        "x": 285,
        "y": 1000,
        "wires": [
            [
                "ec1a11c0fce05c93"
            ]
        ]
    },
    {
        "id": "a5949574ea550511",
        "type": "link in",
        "z": "25fe735d371c65bb",
        "name": "查询Z2M数据文件",
        "links": [
            "01a86933fee50dae",
            "fc30693de61f70ea"
        ],
        "x": 285,
        "y": 840,
        "wires": [
            [
                "66b1b9ce49c10359"
            ]
        ]
    },
    {
        "id": "02292d5e159ec26a",
        "type": "link out",
        "z": "25fe735d371c65bb",
        "name": "返回Z2M数据文件",
        "mode": "link",
        "links": [],
        "x": 895,
        "y": 840,
        "wires": []
    },
    {
        "id": "1f3983c9ed549d23",
        "type": "debug",
        "z": "25fe735d371c65bb",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 700,
        "wires": []
    },
    {
        "id": "66b1b9ce49c10359",
        "type": "switch",
        "z": "25fe735d371c65bb",
        "name": "",
        "property": "POD_NAME",
        "propertyType": "env",
        "rules": [
            {
                "t": "cont",
                "v": "-preproduct-",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 430,
        "y": 840,
        "wires": [
            [
                "847eb4a013500880"
            ],
            [
                "ecacd53322507d5f",
                "17bf79806d6522fd"
            ]
        ]
    },
    {
        "id": "ecacd53322507d5f",
        "type": "mongodb in",
        "z": "25fe735d371c65bb",
        "mongodb": "1156755863b3897c",
        "name": "开发查找",
        "collection": "ndiot_z2m_datafile",
        "operation": "find",
        "x": 620,
        "y": 880,
        "wires": [
            [
                "02292d5e159ec26a",
                "1f3983c9ed549d23"
            ]
        ]
    },
    {
        "id": "ec1a11c0fce05c93",
        "type": "switch",
        "z": "25fe735d371c65bb",
        "name": "",
        "property": "POD_NAME",
        "propertyType": "env",
        "rules": [
            {
                "t": "cont",
                "v": "-preproduct-",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 430,
        "y": 1000,
        "wires": [
            [
                "d002c1f54df9f2a0"
            ],
            [
                "63f58c50a3aff1c5"
            ]
        ]
    },
    {
        "id": "63f58c50a3aff1c5",
        "type": "mongodb out",
        "z": "25fe735d371c65bb",
        "mongodb": "1156755863b3897c",
        "name": "开发增加",
        "collection": "ndiot_z2m_datafile",
        "payonly": true,
        "upsert": true,
        "multi": false,
        "operation": "insert",
        "x": 620,
        "y": 1040,
        "wires": []
    },
    {
        "id": "17bf79806d6522fd",
        "type": "debug",
        "z": "25fe735d371c65bb",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 700,
        "wires": []
    },
    {
        "id": "77eacd4e3749925d",
        "type": "mongodb in",
        "z": "25fe735d371c65bb",
        "mongodb": "07e7b1954a01cc92",
        "name": "预生产查找",
        "collection": "",
        "operation": "find",
        "x": 550,
        "y": 220,
        "wires": [
            [
                "d695b815466ad76c",
                "272546c8bfd46694"
            ]
        ]
    },
    {
        "id": "0397a839187b98d3",
        "type": "mongodb out",
        "z": "25fe735d371c65bb",
        "mongodb": "07e7b1954a01cc92",
        "name": "预生产增删改",
        "collection": "",
        "payonly": true,
        "upsert": true,
        "multi": false,
        "operation": "update",
        "x": 560,
        "y": 400,
        "wires": []
    },
    {
        "id": "95df2cdb0abd3d79",
        "type": "link in",
        "z": "25fe735d371c65bb",
        "name": "增删改数据",
        "links": [],
        "x": 205,
        "y": 420,
        "wires": [
            [
                "d0843460d726d6cf"
            ]
        ]
    },
    {
        "id": "9bfc8855190691e9",
        "type": "link in",
        "z": "25fe735d371c65bb",
        "name": "查询数据",
        "links": [
            "1d7c8bf676bfd405",
            "6e0124a89c24ada8"
        ],
        "x": 205,
        "y": 260,
        "wires": [
            [
                "0276501b54d14509"
            ]
        ]
    },
    {
        "id": "272546c8bfd46694",
        "type": "link out",
        "z": "25fe735d371c65bb",
        "name": "查询数据返回",
        "mode": "link",
        "links": [
            "cfdf93b3e832d7d7"
        ],
        "x": 815,
        "y": 260,
        "wires": []
    },
    {
        "id": "d695b815466ad76c",
        "type": "debug",
        "z": "25fe735d371c65bb",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 120,
        "wires": []
    },
    {
        "id": "0276501b54d14509",
        "type": "switch",
        "z": "25fe735d371c65bb",
        "name": "",
        "property": "POD_NAME",
        "propertyType": "env",
        "rules": [
            {
                "t": "cont",
                "v": "-preproduct-",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 350,
        "y": 260,
        "wires": [
            [
                "77eacd4e3749925d"
            ],
            [
                "f72e9c3b3f9ec62a",
                "048d83dd7bc6b9d2"
            ]
        ]
    },
    {
        "id": "f72e9c3b3f9ec62a",
        "type": "mongodb in",
        "z": "25fe735d371c65bb",
        "mongodb": "1156755863b3897c",
        "name": "开发查找",
        "collection": "",
        "operation": "find",
        "x": 540,
        "y": 300,
        "wires": [
            [
                "272546c8bfd46694",
                "d695b815466ad76c"
            ]
        ]
    },
    {
        "id": "d0843460d726d6cf",
        "type": "switch",
        "z": "25fe735d371c65bb",
        "name": "",
        "property": "POD_NAME",
        "propertyType": "env",
        "rules": [
            {
                "t": "cont",
                "v": "-preproduct-",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 350,
        "y": 420,
        "wires": [
            [
                "0397a839187b98d3"
            ],
            [
                "e299c973e04b3e51"
            ]
        ]
    },
    {
        "id": "e299c973e04b3e51",
        "type": "mongodb out",
        "z": "25fe735d371c65bb",
        "mongodb": "1156755863b3897c",
        "name": "开发增删改",
        "collection": "",
        "payonly": true,
        "upsert": true,
        "multi": false,
        "operation": "insert",
        "x": 550,
        "y": 460,
        "wires": []
    },
    {
        "id": "048d83dd7bc6b9d2",
        "type": "debug",
        "z": "25fe735d371c65bb",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 490,
        "y": 120,
        "wires": []
    }
]