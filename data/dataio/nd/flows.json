[
    {
        "id": "7c7a09edf982e2f4",
        "type": "tab",
        "label": "全局配置(数据)",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "e93bbc67912b9178",
        "type": "tab",
        "label": "订阅/发布",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "63bcc9db2b38df75",
        "type": "tab",
        "label": "接口调用",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "f7e96a32e56d72eb",
        "type": "tab",
        "label": "接口处理",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "25fe735d371c65bb",
        "type": "tab",
        "label": "MongDB",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "4f298837cfcb1b75",
        "type": "mqtt-broker",
        "name": "push",
        "broker": "push-access.sdp.101.com",
        "port": "1111",
        "clientid": "",
        "autoConnect": false,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "1156755863b3897c",
        "type": "mongodb",
        "d": true,
        "hostname": "m1.all.dev2.mongod3.sdp",
        "topology": "direct",
        "connectOptions": "autoConnectRetry=true&useUnifiedTopology=true",
        "port": "34004",
        "db": "dev_mdb_iot_data",
        "name": "开发环境"
    },
    {
        "id": "07e7b1954a01cc92",
        "type": "mongodb",
        "hostname": "m3.edu.pre-prod.mongod.sdp",
        "topology": "direct",
        "connectOptions": "autoConnectRetry=true&useUnifiedTopology=true",
        "port": "34001",
        "db": "preproduction_mdb_iot_data",
        "name": "预生产环境"
    },
    {
        "id": "f544f205.d51a7",
        "type": "inject",
        "z": "7c7a09edf982e2f4",
        "name": "初始化",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 100,
        "wires": [
            [
                "683f9c514d3dc3f8"
            ]
        ]
    },
    {
        "id": "52f82eb73840e302",
        "type": "OS",
        "z": "7c7a09edf982e2f4",
        "name": "",
        "x": 430,
        "y": 100,
        "wires": [
            [
                "705cd1a4e7548610"
            ]
        ]
    },
    {
        "id": "705cd1a4e7548610",
        "type": "change",
        "z": "7c7a09edf982e2f4",
        "name": "OS",
        "rules": [
            {
                "t": "set",
                "p": "os",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 570,
        "y": 100,
        "wires": [
            [
                "c27b74647cc92e82"
            ]
        ]
    },
    {
        "id": "c27b74647cc92e82",
        "type": "home-dir",
        "z": "7c7a09edf982e2f4",
        "x": 720,
        "y": 100,
        "wires": [
            [
                "3e822ed879b8777e"
            ]
        ]
    },
    {
        "id": "3e822ed879b8777e",
        "type": "change",
        "z": "7c7a09edf982e2f4",
        "name": "datadir",
        "rules": [
            {
                "t": "set",
                "p": "os.datadir",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 870,
        "y": 100,
        "wires": [
            [
                "a6a4ebf94a8b8924"
            ]
        ]
    },
    {
        "id": "4aa5b949a197bcb7",
        "type": "inject",
        "z": "7c7a09edf982e2f4",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "data",
        "payloadType": "global",
        "x": 220,
        "y": 740,
        "wires": [
            [
                "61299e55f08ac3e1"
            ]
        ]
    },
    {
        "id": "61299e55f08ac3e1",
        "type": "debug",
        "z": "7c7a09edf982e2f4",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 410,
        "y": 740,
        "wires": []
    },
    {
        "id": "1188b78d61e6e2a8",
        "type": "link out",
        "z": "7c7a09edf982e2f4",
        "name": "配置完成",
        "mode": "link",
        "links": [
            "906bb62a708b4c0c"
        ],
        "x": 935,
        "y": 560,
        "wires": []
    },
    {
        "id": "6423346762c80c34",
        "type": "debug",
        "z": "7c7a09edf982e2f4",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 470,
        "y": 660,
        "wires": []
    },
    {
        "id": "4754da03d64fad4b",
        "type": "function",
        "z": "7c7a09edf982e2f4",
        "name": "数据初始化",
        "func": "let config = msg.payload;\n\n Object.keys(config).forEach(key => {\n    global.set(key, config[key])\n})\n\nlet data = global.get(\"data\");\nlet ids = global.get(\"ids\");\n\nlet app = data.app;\napp.domains = app.domains || {};\napp.platforms = app.platforms || {};\n\ndata.domains = app.domains;\ndata.platforms = app.platforms;\ndata.dispatchers = {};\ndata.edges = {};\ndata.devices = {};\ndata.mqtt = app.mqtt;\ndata.topics = app.mqtt.topics;\ndata.z2m = app.z2m;\ndata.ids = ids;\n\n\nreturn {payload: data};\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 320,
        "wires": [
            [
                "fe1774a6b4d68308"
            ]
        ]
    },
    {
        "id": "fe1774a6b4d68308",
        "type": "function",
        "z": "7c7a09edf982e2f4",
        "name": "展开主题函数",
        "func": "let data = global.get(\"data\");\nlet common = global.get(\"common\");\nlet gids = global.get(\"ids\");\n\nlet expandTopic = {\n    expandStr : function(v, _ids) {\n        let ids = Object.assign({}, gids);\n        ids = Object.assign(ids, _ids || {});\n\n        if (typeof v == \"string\") {\n            v = v.replace(/\\{APP_ID\\}/g, env.get(\"IOT_APP_ID\") || \"\");\n            v = v.replace(/\\{DOM_ID\\}/g, env.get(\"IOT_DOM_ID\") || \"\");\n            v = v.replace(/\\{DSP_ID\\}/g, env.get(\"IOT_DSP_ID\") || \"\");\n            v = v.replace(/\\{EDG_ID\\}/g, env.get(\"IOT_EDG_ID\") || \"\");\n            v = v.replace(/\\{DIO_ID\\}/g, env.get(\"IOT_DIO_ID\") || \"\");\n            v = v.replace(/\\{PLF_ID\\}/g, env.get(\"IOT_PLF_ID\") || \"\");\n            v = v.replace(/\\{HOSTNAME\\}/g, env.get(\"HOSTNAME\") || env.get(\"COMPUTERNAME\") || \"\");\n            \n            v = v.replace(/\\{app\\}/g, ids.app || \"\");\n            v = v.replace(/\\{dom\\}/g, ids.dom || \"\");\n            v = v.replace(/\\{dsp\\}/g, ids.dsp || \"\");\n            v = v.replace(/\\{edg\\}/g, ids.edg || \"\");\n            v = v.replace(/\\{dio\\}/g, ids.dio || \"\");\n            v = v.replace(/\\{plf\\}/g, ids.plf || \"\");\n            if (ids.dev)\n                v = v.replace(/\\{dev\\}/g, ids.dev || \"\");\n        }\n        return v;\n    },\n    expandArray : function(v, _ids) {\n        if (Array.isArray(v)) {\n            for(let i=0; i < v.length; i++) {\n                v[i] = this.expand(v[i], _ids);\n            }\n        }\n        return arr;\n    },\n    expandObj : function(v, _ids) {\n        if (typeof v == \"object\") {\n            let keys = Object.keys(v);\n            keys.forEach(k => {\n                v[k] = this.expand(v[k], _ids);\n            });\n        }\n        return v;        \n    },\n    expand : function(v, _ids) {\n        if (typeof v == \"string\")\n            v = this.expandStr(v, _ids);\n                    \n        if (Array.isArray(v)) {\n            v = expandArray(v, _ids);\n        }\n        \n        if (typeof v == \"object\") {\n            v = this.expandObj(v, _ids)\n        }\n                \n        return v\n    }\n}\n    \n\n\ncommon.expandTopic = expandTopic;\n\nreturn {payload: data};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 360,
        "wires": [
            [
                "de1af31ddcf813b0"
            ]
        ]
    },
    {
        "id": "de1af31ddcf813b0",
        "type": "function",
        "z": "7c7a09edf982e2f4",
        "name": "缓存数据函数",
        "func": "let data = global.get(\"data\");\nlet common = global.get(\"common\");\n\nlet online = function(){\n    let events = this.events;\n    if (events && events.status)\n        return events.status.pld.online;\n    return 0;\n}\n\nlet cachePayload = function(payload) {\n    let hd = payload.hd;\n    let pld = payload.pld;\n    \n    if (hd.from.type == \"dsp\") {\n        let dsp = data.dispatchers[hd.from.id];\n        if (!dsp) return;\n        \n        dsp.id = hd.from.id;\n        dsp.events = dsp.events || {};\n        dsp.events[hd.entry.id] = payload;\n        dsp.online = online;\n        data.dispatchers[hd.from.id] = dsp;\n    }\n    \n    if (hd.from.type == \"edg\") {\n        let edg = data.edges[hd.from.id];\n        if (!edg) return;\n        \n        edg.id = hd.from.id;\n        edg.events = edg.events || {};\n        edg.events[hd.entry.id] = payload;\n        edg.online = online;\n        data.edges[hd.from.id] = edg;\n    }    \n    \n    if (hd.from.type == \"dev\") {\n        let dev = data.devices[hd.from.id];\n        if (!dev) {\n            let pid = hd.from.pid;\n            let pdev = pid ? data.devices[pid] : null;\n            if (pdev){\n                dev = {};\n            } else {\n                return;\n            }\n        };\n        \n        dev.id = hd.from.id;\n        dev.events = dev.events || {};\n        if (hd.from.pid) {\n            dev.pid = hd.from.pid;\n            dev.pdev = data.devices[dev.pid];\n            dev.domain = dev.pdev && dev.pdev.domain;\n        }\n        dev.events[hd.entry.id] = payload;\n        dev.online = online;\n        data.devices[hd.from.id] = dev;\n        let edgId = hd.ids && hd.ids.edg || pld.edg_id\n        if (edgId) {\n            let edg = data.edges[edgId];\n            if (edg) {\n                if (dev.edge && dev.edge.id != edgId) {\n                    delete dev.edge.devices[dev.id]\n                }\n                dev.edge = edg;\n                edg.devices = edg.devices || {};\n                edg.devices[dev.id] = dev;;\n            }\n        }\n    }\n\n    if (hd.from.type == \"plf\") {\n        let plf = data.platforms[hd.from.id];\n        if (!plf) return;\n        \n        plf.id = hd.from.id;\n        plf.events = plf.events || {};\n        plf.events[hd.entry.id] = payload;\n        plf.online = online;\n        data.platforms[hd.from.id] = plf;\n    }\n    \n    \n    return payload;\n\n}\n\ncommon.cachePayload = cachePayload;\n\nreturn {payload: data};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 400,
        "wires": [
            [
                "aea3af329e2e33ba"
            ]
        ]
    },
    {
        "id": "5cddc77aa8c606cd",
        "type": "function",
        "z": "7c7a09edf982e2f4",
        "name": "获取HD主题函数",
        "func": "let common = global.get(\"common\");\nlet ids = global.get(\"data\").ids;\n\nlet getHDTopic = function(hd) {\n    let tpc = \"\";\n    // let ids = hd.ids || gids;\n    if (!hd.pref) hd.pref = {};\n    if (!hd.pref.app) hd.pref.app = (ids.app ? ids.app : \"0\");\n    if (!hd.pref.dom) hd.pref.dom = (ids.dom ? ids.dom : \"0\");\n    \n    if (!hd.from) hd.from = {};\n    if (!hd.from.type) hd.from.type = \"dio\";\n    if (!hd.from.id) hd.from.id = ids.dio;\n    if (!hd.to) hd.to = {};\n    if (!hd.to.type) hd.to.type = \"0\";\n    if (!hd.to.id) hd.to.id = \"0\";\n    if (!hd.entry) hd.entry = {};\n    if (!hd.entry.type) hd.entry.type = \"0\";\n    if (!hd.entry.id) hd.entry.id = \"0\";\n    if (!hd.sid) hd.sid = \"0\";\n    if (!hd.stp) hd.stp = 0;\n    if (!hd.version) hd.version = global.get(\"version\")\n\n\n    tpc =   hd.pref.app + \"/\" + hd.pref.dom + \"/\" + \n            hd.from.type + \"/\" + hd.from.id + \"/\" + \n            hd.to.type + \"/\" + hd.to.id + \"/\" + \n            hd.entry.type + \"/\" + hd.entry.id;\n    return tpc;\n}\n\n\ncommon.getHDTopic = getHDTopic;\n\nreturn {payload: common};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 480,
        "wires": [
            [
                "2316a7453cae5a40"
            ]
        ]
    },
    {
        "id": "2316a7453cae5a40",
        "type": "function",
        "z": "7c7a09edf982e2f4",
        "name": "设备调度函数",
        "func": "let data = global.get(\"data\");\nlet common = global.get(\"common\");\n// let ids = global.get(\"data\").ids;\n\n\nlet dispatch = {\n    getValidEdge : function(dom) {\n        let result;\n        Object.values(dom.edges).every(edg => {\n            if (edg.enabled && edg.online && edg.online()) {\n                let dsp = edg.dispatcher;\n                if (dsp && dsp.enabled && dsp.online && dsp.online()) {\n                    result = edg;\n                    return false;\n                }\n            }\n            return true;\n        })\n        \n        return result;\n        \n        // let values = Object.values(dom.edges);\n        // let result;\n        // for(let i = 0; i < values.length; i++) {\n        //     let edg = values[i];\n        //     if (edg.enabled && edg.online && edg.online()) {\n        //         let dsp = edg.dispatcher;\n        //         if (dsp && dsp.enabled && dsp.online && dsp.online()) {\n        //             result = value;\n        //             break;\n        //         }\n        //     }\n        // }\n\n        \n    },\n    \n    dispatchDevice : function(devId){\n        let dev = data.devices[devId];\n        if (!dev) return;\n        \n        let edg;\n        edg = dev.edge;\n        \n        if (!edg || !edg.id || !edg.enabled || !(edg.online && edg.online()) ) {\n            if (edg  && edg.devices)\n                delete edg.devices[dev.id];\n            edg = this.getValidEdge(dev.domain);\n        }\n        if (edg) {\n            let devs = edg.devices || {};\n            devs[dev.id] = dev;\n            edg.devices = devs; \n        }\n        \n        dev.edge = edg;\n        return edg;\n    }\n}\n  \n  \n\ncommon.dispatch = dispatch;\n\nreturn {payload: common};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 520,
        "wires": [
            [
                "fc89e9165d2ffb12"
            ]
        ]
    },
    {
        "id": "aea3af329e2e33ba",
        "type": "function",
        "z": "7c7a09edf982e2f4",
        "name": "键值转ID函数",
        "func": "let common = global.get(\"common\");\n\nlet keyToObjId = function(objs) {\n    let keys = Object.keys(objs);\n    keys.forEach(key => {\n        let obj = objs[key];\n        if (typeof obj == \"object\") \n            obj.id = key;\n    })        \n}\n    \nlet keyDot2DUnder = function (objs, recu) {\n    Object.keys(objs).forEach(key => {\n        let obj = objs[key];\n        delete objs[key];\n        key = key.replace(/\\./g, \"__\");\n        objs[key] = obj;\n        if (typeof obj == \"object\" && recu) \n            this.keyDot2DUnder(obj, recu);\n    })     \n}\n\nlet keyDUnder2Dot = function (objs, recu) {\n    Object.keys(objs).forEach(key => {\n        let obj = objs[key];\n        delete objs[key];\n        key = key.replace(/__/g, \".\");\n        objs[key] = obj;\n        if (typeof obj == \"object\" && recu) \n            this.keyDUnder2Dot(obj, recu);\n    })     \n}\n\n\ncommon.keyToObjId = keyToObjId;\ncommon.keyDot2DUnder = keyDot2DUnder;\ncommon.keyDUnder2Dot = keyDUnder2Dot;\n\nreturn {payload: common};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 440,
        "wires": [
            [
                "5cddc77aa8c606cd"
            ]
        ]
    },
    {
        "id": "fc89e9165d2ffb12",
        "type": "function",
        "z": "7c7a09edf982e2f4",
        "name": "数据补全",
        "func": "let data = global.get(\"data\");\nlet common = global.get(\"common\");\n\nlet fixUpDom = function(_dom, notNewIfNotExist, recu) {\n    if (!_dom || !_dom.id) return;\n    \n    let domId = _dom.id;\n    let doms = data.app.domains;\n    \n    let dom = doms[domId];\n    if (!dom) {\n        if (notNewIfNotExist)\n            dom = _dom;\n        else\n            dom = Object.assign({}, _dom);\n    } else {\n         dom = Object.assign(dom, _dom);\n    }\n\n    dom.id = domId;\n    dom.app = data.app;\n    dom.dispatchers = dom.dispatchers || {};\n    dom.edges = dom.edges || {};\n    dom.devices = dom.devices || {};\n    doms[domId] = dom;\n\n    if (recu) {\n        Object.keys(dom.dispatchers).forEach(dspId => {\n            let dsp = dom.dispatchers[dspId];\n            dsp.id = dspId;\n            dsp.app_id = dom.app.id;\n            dsp.dom_id = domId;\n            this.fixUpDsp(dsp, notNewIfNotExist, recu);\n        })\n    }\n}\n\nlet fixUpDsp = function(_dsp, notNewIfNotExist, recu) {\n    if (!_dsp || !_dsp.id || !_dsp.dom_id) {\n        if (_dsp && _dsp.id) \n            data.dispatchers[_dsp.id] = _dsp;\n        return;\n    }\n\n    let domId = _dsp.dom_id;\n    let dspId = _dsp.id;\n    let doms = data.domains;\n    let dom = doms[domId];\n    let dsps = data.dispatchers;\n    let dsp = dsps[dspId];\n    let dysub = false;\n    \n    if (!dom) {\n        node.error(\"dsp没有租户：\" + dspId);\n        return;\n    };\n    \n    if (!dsp) {\n        if (notNewIfNotExist)\n            dsp = _dsp;\n        else\n            dsp = Object.assign({}, _dsp);\n        dysub = true;\n    } else {\n        dsp = Object.assign(dsp, _dsp);\n    }\n    \n    \n    dsp.id = dspId;\n    dsp.domain = dom;\n    dsp.edges = dsp.edges || {};\n    dom.dispatchers[dspId] = dsp;\n    data.dispatchers[dspId] = dsp;\n    //订阅调度上下线\n    if (dysub) node.send([{dispatcher: dsp}, null]);\n    \n    if (recu) {\n        Object.keys(dsp.edges).forEach(edgId => {\n            let edg = dsp.edges[edgId];\n            edg.id =edgId;\n            edg.app_id = dom.app.id;\n            edg.dom_id = dom.id;\n            edg.dsp_id = dsp.id;\n            this.fixUpEdg(edg, notNewIfNotExist, recu);\n        })\n    }\n}\n\nlet fixUpEdg = function(_edg, notNewIfNotExist, recu) {\n    if (!_edg || !_edg.id || !_edg.dom_id || !_edg.dsp_id){\n        if (_edg && _edg.id) \n            data.edges[_edg.id] = _edg;\n        return;  \n    } \n\n    let domId = _edg.dom_id;\n    let dspId = _edg.dsp_id;\n    let edgId = _edg.id;\n    let doms = data.domains;\n    let dom = doms[domId];\n    let dsps = data.dispatchers;\n    let dsp = dsps[dspId];\n    let edgs = data.edges;\n    let edg = edgs[edgId];\n    let dysub = false;\n    \n    if (!dom || !dsp) {\n        node.error(\"edg 没有租户或DSP:\" + edgId);\n        return;\n    };\n    \n    if (!edg) {\n        if (notNewIfNotExist)\n            edg = _edg;\n        else\n            edg = Object.assign({}, _edg);\n        dysub = true;\n    } else {\n        edg = Object.assign(edg, _edg);\n    }\n    \n    edg.id = edgId;\n    edg.dispatcher = dsp;\n    edg.devices = edg.devices || {};\n    dsp.edges[edgId] = edg;\n    dom.edges[edgId] = edg;\n    data.edges[edgId] = edg;\n    \n    //订阅边缘上下线\n    if (dysub) node.send([{edge: edg}, null])\n}\n\nlet fixUpDev = function(_dev, notNewIfNotExist) {\n    if (!_dev || !_dev.id || !_dev.dom_id) {\n        if (_dev && _dev.id)\n            data.devices[_dev.id] = _dev;\n        return;\n    }\n\n    let devId = _dev.id;\n    let domId = _dev.dom_id;\n    let doms = data.domains;\n    let dom = doms[domId];\n    let devs = data.devices;\n    let dev = devs[devId];\n    let dysub = false;\n    \n    if (!dom) {\n        node.error(\"dev没有租户:\" + devId);\n        return;\n    };\n    \n    if (!dev) {\n        if (notNewIfNotExist)\n            dev = _dev;\n        else\n            dev = Object.assign({}, _dev);\n        dysub = true;\n    } else {\n        dev = Object.assign(dev, _dev);\n    }\n    \n    dev.id = devId;\n    dev.domain = dom;\n    dom.devices[devId] = dev;\n    data.devices[devId] = dev;\n    \n    //订阅设备上下线\n    if (dysub)  node.send([{device: dev}, null]);\n    \n}\n\nlet fixUpPlf = function(_plf, notNewIfNotExist) {\n    if (!_plf || !_plf.id) return;\n    \n    let plfId = _plf.id;\n    let plfs = data.app.platforms;\n    let dysub = false;\n    \n    let plf = plfs[plfId];\n    if (!plf) {\n        if (notNewIfNotExist)\n            plf = _plf;\n        else\n            plf = Object.assign({}, _plf);\n        dysub = true;\n    } else {\n        plf = Object.assign(plf, _plf);\n    }\n\n    plf.id = plfId;\n    plf.app = data.app;\n    plfs[plfId] = plf;\n    \n    //订阅平台上下线\n    if (dysub)  node.send([{platform: plf}, null])\n\n}\n\n\nlet fixUpData = function() {\n    let doms = data.app.domains;\n    Object.keys(doms).forEach(domId => {\n        let dom = doms[domId];\n        dom.id = domId;\n        this.fixUpDom(dom, true, true);\n        if (dom.reg_devices) {\n            regDevs = dom.reg_devices;\n            Object.keys(regDevs).forEach(devId => {\n                let val = regDevs[devId];\n                dev = {};\n                if (typeof val == \"object\" ) {\n                    dev = Object.assign(dev, val);\n                } else {\n                    dev.name = val;\n                }\n                dev.id = devId;\n                dev.app_id = dev.app_id || dom.app.id;\n                dev.dom_id = dev.dom_id || dom.id;\n                 \n                this.fixUpDev(dev, false)\n            })\n        }\n    });\n    \n    let plfs = data.app.platforms;\n    Object.keys(plfs).forEach(plfId => {\n        let plf = plfs[plfId];\n        plf.id = plfId;\n        this.fixUpPlf(plf, true);\n    })\n    \n}\n\ncommon.fixUpData = fixUpData;\ncommon.fixUpDom = fixUpDom;\ncommon.fixUpDsp = fixUpDsp;\ncommon.fixUpEdg = fixUpEdg;\ncommon.fixUpDev = fixUpDev;\ncommon.fixUpPlf = fixUpPlf;\n\ncommon.expandTopic.expand(data.ids);   \ncommon.expandTopic.expand(data.topics.subs);\ncommon.expandTopic.expand(data.topics.services);\ndata.app.id = data.ids.app;\n\ncommon.fixUpData();\ncommon.keyToObjId(data.domains);\ncommon.keyToObjId(data.dispatchers);\ncommon.keyToObjId(data.edges);\ncommon.keyToObjId(data.devices);\n\n\n\nreturn [null, {payload: data}];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 560,
        "wires": [
            [
                "806baee163cb44cc"
            ],
            [
                "1188b78d61e6e2a8",
                "6423346762c80c34",
                "984299f5f2358be9"
            ]
        ]
    },
    {
        "id": "a6a4ebf94a8b8924",
        "type": "switch",
        "z": "7c7a09edf982e2f4",
        "name": "是否激活数据？",
        "property": "IOT_ENABLE_DIO",
        "propertyType": "env",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 160,
        "y": 180,
        "wires": [
            [
                "398b864fe241772d"
            ],
            []
        ]
    },
    {
        "id": "c0624055eec65ac4",
        "type": "function",
        "z": "7c7a09edf982e2f4",
        "name": "配置文件",
        "func": "\nreturn {\n    filename: env.get(\"IOT_CONFIG_FILE\")\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 160,
        "wires": [
            [
                "387bc8ba683df91f"
            ]
        ]
    },
    {
        "id": "874e2ff0304f3dd7",
        "type": "json",
        "z": "7c7a09edf982e2f4",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1070,
        "y": 160,
        "wires": [
            [
                "1924f7fd90ef314c"
            ]
        ]
    },
    {
        "id": "387bc8ba683df91f",
        "type": "file in",
        "z": "7c7a09edf982e2f4",
        "name": "读配置文件",
        "filename": "",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 910,
        "y": 160,
        "wires": [
            [
                "874e2ff0304f3dd7"
            ]
        ]
    },
    {
        "id": "683f9c514d3dc3f8",
        "type": "change",
        "z": "7c7a09edf982e2f4",
        "name": "version",
        "rules": [
            {
                "t": "set",
                "p": "version",
                "pt": "global",
                "to": "0.0.1",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 300,
        "y": 100,
        "wires": [
            [
                "52f82eb73840e302"
            ]
        ]
    },
    {
        "id": "b1a104c8f9b78d59",
        "type": "link in",
        "z": "7c7a09edf982e2f4",
        "name": "",
        "links": [
            "13a9b4457054c058"
        ],
        "x": 115,
        "y": 440,
        "wires": [
            [
                "1924f7fd90ef314c"
            ]
        ]
    },
    {
        "id": "398b864fe241772d",
        "type": "switch",
        "z": "7c7a09edf982e2f4",
        "name": "是否有配置文件？",
        "property": "IOT_CONFIG_FILE",
        "propertyType": "env",
        "rules": [
            {
                "t": "neq",
                "v": "",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 370,
        "y": 180,
        "wires": [
            [
                "bf0fd446d288a43e"
            ],
            [
                "82d624e156acd716"
            ]
        ]
    },
    {
        "id": "82d624e156acd716",
        "type": "change",
        "z": "7c7a09edf982e2f4",
        "name": "获取配置",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 580,
        "y": 240,
        "wires": [
            [
                "ac13383ff111fbcf"
            ]
        ]
    },
    {
        "id": "fcb9bbaa875f8ea9",
        "type": "link out",
        "z": "7c7a09edf982e2f4",
        "name": "",
        "mode": "link",
        "links": [
            "95f8abc4558b9fe4"
        ],
        "x": 935,
        "y": 280,
        "wires": []
    },
    {
        "id": "bf0fd446d288a43e",
        "type": "switch",
        "z": "7c7a09edf982e2f4",
        "name": "优先配置文件？",
        "property": "IOT_CONFIG_FILE_FIRST",
        "propertyType": "env",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 580,
        "y": 160,
        "wires": [
            [
                "c0624055eec65ac4"
            ],
            [
                "82d624e156acd716"
            ]
        ]
    },
    {
        "id": "ac13383ff111fbcf",
        "type": "delay",
        "z": "7c7a09edf982e2f4",
        "name": "",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 780,
        "y": 260,
        "wires": [
            [
                "fcb9bbaa875f8ea9"
            ]
        ]
    },
    {
        "id": "1924f7fd90ef314c",
        "type": "function",
        "z": "7c7a09edf982e2f4",
        "name": "获取数据节点",
        "func": "let config = msg.payload;\nlet data = config.dataio;\nif (data && data.global) {\n    let _msg = {\n        payload: data.global\n    };\n    return [null, _msg]\n} else {\n    return [{}, null]\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 240,
        "wires": [
            [
                "82d624e156acd716"
            ],
            [
                "4754da03d64fad4b",
                "fe709efeac771813"
            ]
        ]
    },
    {
        "id": "fe709efeac771813",
        "type": "debug",
        "z": "7c7a09edf982e2f4",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 190,
        "y": 320,
        "wires": []
    },
    {
        "id": "806baee163cb44cc",
        "type": "function",
        "z": "7c7a09edf982e2f4",
        "name": "订阅上下线主题",
        "func": "let data = global.get(\"data\");\nlet common = global.get(\"common\");\nlet topic;\nlet ids = {};\nif (msg.dispatcher) {\n    topic = data.topics.dysubs.dsp_evt_status;\n    ids.dsp = msg.dispatcher.id;\n}\n\nif (msg.edge) {\n    topic = data.topics.dysubs.edg_evt_status;\n    ids.edg = msg.edge.id;    \n}\n\nif (msg.device) {\n    topic = data.topics.dysubs.dev_evt_status;\n    ids.dev = msg.device.id;    \n}\n\nif (msg.platform) {\n    topic = data.topics.dysubs.plf_evt_status;\n    ids.plf = msg.platform.id;      \n}\n\nif (topic) {\n    topic = common.expandTopic.expandStr(topic, ids);\n\n    node.send({\n            action: \"unsubscribe\",\n            topic: topic\n    })\n    \n    node.send({\n            action: \"subscribe\",\n            topic: topic\n    })\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 520,
        "wires": [
            [
                "c681ca1c09bbf5eb",
                "be8dee420468e410"
            ]
        ]
    },
    {
        "id": "c681ca1c09bbf5eb",
        "type": "link out",
        "z": "7c7a09edf982e2f4",
        "name": "订阅上下线主题输出",
        "mode": "link",
        "links": [
            "1fbea7baf2a0c450"
        ],
        "x": 935,
        "y": 520,
        "wires": []
    },
    {
        "id": "be8dee420468e410",
        "type": "debug",
        "z": "7c7a09edf982e2f4",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "topic",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1000,
        "y": 420,
        "wires": []
    },
    {
        "id": "35ef90ce6fa2dfd3",
        "type": "link out",
        "z": "7c7a09edf982e2f4",
        "name": "刷新数据",
        "mode": "link",
        "links": [
            "46c7be7c38c2cddc"
        ],
        "x": 935,
        "y": 600,
        "wires": []
    },
    {
        "id": "984299f5f2358be9",
        "type": "delay",
        "z": "7c7a09edf982e2f4",
        "name": "1秒后刷新数据",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 580,
        "y": 600,
        "wires": [
            [
                "35ef90ce6fa2dfd3",
                "109b0482f3439c03"
            ]
        ]
    },
    {
        "id": "109b0482f3439c03",
        "type": "delay",
        "z": "7c7a09edf982e2f4",
        "name": "3秒后上线通知",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 780,
        "y": 640,
        "wires": [
            [
                "9505a529442793c0"
            ]
        ]
    },
    {
        "id": "9505a529442793c0",
        "type": "link out",
        "z": "7c7a09edf982e2f4",
        "name": "上线通知输出",
        "mode": "link",
        "links": [
            "cac9b036a1b34134"
        ],
        "x": 935,
        "y": 640,
        "wires": []
    },
    {
        "id": "0f989c13f4e0c1cb",
        "type": "mqtt in",
        "z": "e93bbc67912b9178",
        "name": "终端订阅",
        "topic": "",
        "qos": "2",
        "datatype": "utf8",
        "broker": "4f298837cfcb1b75",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 1,
        "x": 400,
        "y": 140,
        "wires": [
            [
                "0050c31c1969d8ff",
                "c503d35a9ca051ed"
            ]
        ]
    },
    {
        "id": "906bb62a708b4c0c",
        "type": "link in",
        "z": "e93bbc67912b9178",
        "name": "",
        "links": [
            "1188b78d61e6e2a8"
        ],
        "x": 115,
        "y": 220,
        "wires": [
            [
                "e4534314a7bcd4b3"
            ]
        ]
    },
    {
        "id": "589883c5ddd06e17",
        "type": "function",
        "z": "e93bbc67912b9178",
        "name": "订阅主题",
        "func": "let data = global.get(\"data\")\nlet topics = data.topics;\n\nnode.send({\n        action: \"unsubscribe\",\n        topic: Object.values(topics.subs)\n})\n\nnode.send({\n        action: \"unsubscribe\",\n        topic: Object.values(topics.services)\n})\n\n\n\nnode.send({\n        action: \"subscribe\",\n        topic: Object.values(topics.subs)\n})\n\nnode.send({\n        action: \"subscribe\",\n        topic: Object.values(topics.services)\n})\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 140,
        "wires": [
            [
                "0f989c13f4e0c1cb",
                "f6ce25be1914c84e"
            ]
        ]
    },
    {
        "id": "745ba2affb87c4cd",
        "type": "debug",
        "z": "e93bbc67912b9178",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 60,
        "wires": []
    },
    {
        "id": "ee0217ceba515222",
        "type": "function",
        "z": "e93bbc67912b9178",
        "name": "缓存数据",
        "func": "msg.topics = msg.topic.split(\"/\");\nlet hd = msg.payload.hd;\nif (!hd.pref) {\n    hd.pref = {\n        app: msg.topics[0],\n        dom: msg.topics[1]\n    }\n}\n\nlet common = global.get(\"common\");\nif (common.cachePayload(msg.payload)) {\n    return [msg, null];\n} else {\n    return [null, msg];\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 140,
        "wires": [
            [
                "be8cd487c69c6c5a"
            ],
            [
                "67a938640956897b"
            ]
        ]
    },
    {
        "id": "be8cd487c69c6c5a",
        "type": "link out",
        "z": "e93bbc67912b9178",
        "name": "订阅输出",
        "mode": "link",
        "links": [
            "2ff5101df1ab6584"
        ],
        "x": 1105,
        "y": 120,
        "wires": []
    },
    {
        "id": "47f3ed4e61a01a5c",
        "type": "function",
        "z": "e93bbc67912b9178",
        "name": "发布主题",
        "func": "let common = global.get(\"common\")\nmsg.topic = common.getHDTopic(msg.payload.hd);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 420,
        "wires": [
            [
                "8990876a77a537e8",
                "d5db30b412aaf4ae",
                "a83fbf51e61bce78"
            ]
        ]
    },
    {
        "id": "8990876a77a537e8",
        "type": "mqtt out",
        "z": "e93bbc67912b9178",
        "name": "mqtt发布",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "4f298837cfcb1b75",
        "x": 500,
        "y": 420,
        "wires": []
    },
    {
        "id": "f4460e5db856239e",
        "type": "link in",
        "z": "e93bbc67912b9178",
        "name": "mqtt发布",
        "links": [
            "9b3a8e543bd70406",
            "5002cb933f4b4eb5",
            "cb5a80219ea82576",
            "befe5b1ac4389423",
            "8f5000be83384a7a",
            "a6df7d880adde7dd",
            "eda86a17cbf189f0",
            "d9ded5bff98b6d8d",
            "28a5d4729e59f380",
            "b41b12708ccf38fc"
        ],
        "x": 225,
        "y": 420,
        "wires": [
            [
                "47f3ed4e61a01a5c"
            ]
        ]
    },
    {
        "id": "d5db30b412aaf4ae",
        "type": "debug",
        "z": "e93bbc67912b9178",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "topic",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 520,
        "y": 500,
        "wires": []
    },
    {
        "id": "13403285d1db57b7",
        "type": "function",
        "z": "e93bbc67912b9178",
        "name": "时间戳",
        "func": "let date = new Date()\nmsg.payload.hd.tpc = msg.topic;\nmsg.payload.hd.tms=date.valueOf();\nmsg.payload.hd.tm=date.toLocaleString();\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 140,
        "wires": [
            [
                "745ba2affb87c4cd",
                "ee0217ceba515222"
            ]
        ]
    },
    {
        "id": "a83fbf51e61bce78",
        "type": "debug",
        "z": "e93bbc67912b9178",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 580,
        "wires": []
    },
    {
        "id": "1fbea7baf2a0c450",
        "type": "link in",
        "z": "e93bbc67912b9178",
        "name": "动态订阅主题",
        "links": [
            "c681ca1c09bbf5eb"
        ],
        "x": 125,
        "y": 100,
        "wires": [
            [
                "0f989c13f4e0c1cb",
                "f6ce25be1914c84e"
            ]
        ]
    },
    {
        "id": "f6ce25be1914c84e",
        "type": "debug",
        "z": "e93bbc67912b9178",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "topic",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 380,
        "y": 60,
        "wires": []
    },
    {
        "id": "39ab7df981465702",
        "type": "change",
        "z": "e93bbc67912b9178",
        "name": "自动连接",
        "rules": [
            {
                "t": "set",
                "p": "action",
                "pt": "msg",
                "to": "connect",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "broker.autoConnect",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "broker.force",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "broker.clientid",
                "pt": "msg",
                "to": "data.ids.mqtt",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 360,
        "y": 1260,
        "wires": [
            [
                "564455fd4b928ba4"
            ]
        ]
    },
    {
        "id": "564455fd4b928ba4",
        "type": "change",
        "z": "e93bbc67912b9178",
        "name": "连接消息",
        "rules": [
            {
                "t": "set",
                "p": "broker.birth.topic",
                "pt": "msg",
                "to": "data.topics.pubs.edg_evt_status",
                "tot": "global"
            },
            {
                "t": "set",
                "p": "broker.birth.qos",
                "pt": "msg",
                "to": "2",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "broker.birth.retain",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "broker.birth.payload.hd.from.type",
                "pt": "msg",
                "to": "edg",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "broker.birth.payload.hd.from.id",
                "pt": "msg",
                "to": "data.ids.edg",
                "tot": "global"
            },
            {
                "t": "set",
                "p": "broker.birth.payload.hd.to.type",
                "pt": "msg",
                "to": "0",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "broker.birth.payload.hd.to.id",
                "pt": "msg",
                "to": "0",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "broker.birth.payload.hd.entry.type",
                "pt": "msg",
                "to": "evt",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "broker.birth.payload.hd.entry.id",
                "pt": "msg",
                "to": "status",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "broker.birth.payload.pld.online",
                "pt": "msg",
                "to": "1",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "broker.birth.payload.pld.id",
                "pt": "msg",
                "to": "data.ids.edg",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 560,
        "y": 1260,
        "wires": [
            [
                "48eb4156b393f84f"
            ]
        ]
    },
    {
        "id": "48eb4156b393f84f",
        "type": "change",
        "z": "e93bbc67912b9178",
        "name": "遗嘱消息",
        "rules": [
            {
                "t": "set",
                "p": "broker.will",
                "pt": "msg",
                "to": "broker.birth",
                "tot": "msg",
                "dc": true
            },
            {
                "t": "set",
                "p": "broker.will.payload.pld.online",
                "pt": "msg",
                "to": "0",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 720,
        "y": 1260,
        "wires": [
            []
        ]
    },
    {
        "id": "0050c31c1969d8ff",
        "type": "json",
        "z": "e93bbc67912b9178",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 550,
        "y": 140,
        "wires": [
            [
                "13403285d1db57b7"
            ]
        ]
    },
    {
        "id": "c503d35a9ca051ed",
        "type": "debug",
        "z": "e93bbc67912b9178",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 60,
        "wires": []
    },
    {
        "id": "e4534314a7bcd4b3",
        "type": "function",
        "z": "e93bbc67912b9178",
        "name": "自动连接",
        "func": "let data = global.get(\"data\");\nmsg = {};\nmsg.action = \"connect\";\nmsg.broker = {\n    autoConnect: true,\n    force: false\n}\nObject.assign(msg.broker, data.mqtt.broker);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 220,
        "wires": [
            [
                "45838fa67f1ea02a"
            ]
        ]
    },
    {
        "id": "1d38d82fd22fa3b5",
        "type": "json",
        "z": "e93bbc67912b9178",
        "name": "",
        "property": "broker.will.payload",
        "action": "str",
        "pretty": false,
        "x": 550,
        "y": 220,
        "wires": [
            [
                "589883c5ddd06e17",
                "0f989c13f4e0c1cb"
            ]
        ]
    },
    {
        "id": "b920e31b90166791",
        "type": "function",
        "z": "e93bbc67912b9178",
        "d": true,
        "name": "出生消息",
        "func": "let data = global.get(\"data\");\nlet common = global.get(\"common\");\n\nlet hd = {\n    pref: {\n      app: \"0\",\n      dom: \"0\"\n    },\n    from: {\n        type: \"dio\",\n        id: data.ids.dio\n    },\n    to: {\n        type: \"0\",\n        id: \"0\"\n    },\n    entry: {\n        type: \"evt\",\n        id: \"status\"\n    },\n    version: global.get(\"version\")\n};\n\nlet pld = {\n    id: data.ids.dio,\n    online: 1\n};\n\nlet topic = common.getHDTopic(hd);\n\n\nlet birth = {\n    topic: topic,\n    qos: 2,\n    retain: true,\n    payload: {\n        hd: hd,\n        pld: pld\n    }\n}\n\nmsg.broker = msg.broker || {};\nmsg.broker.birth = birth;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 280,
        "wires": [
            [
                "45838fa67f1ea02a"
            ]
        ]
    },
    {
        "id": "45838fa67f1ea02a",
        "type": "function",
        "z": "e93bbc67912b9178",
        "name": "遗嘱消息",
        "func": "let data = global.get(\"data\");\nlet common = global.get(\"common\");\n\nlet hd = {\n    pref: {\n      app: \"0\",\n      dom: \"0\"\n    },\n    from: {\n        type: \"dio\",\n        id: data.ids.dio\n    },\n    to: {\n        type: \"0\",\n        id: \"0\"\n    },\n    entry: {\n        type: \"evt\",\n        id: \"status\"\n    },\n    version: global.get(\"version\")\n};\n\nlet pld = {\n    id: data.ids.dio,\n    online: 0\n};\n\nlet topic = common.getHDTopic(hd);\n\n\nlet will = {\n    topic: topic,\n    qos: 2,\n    retain: true,\n    payload: {\n        hd: hd,\n        pld: pld\n    }\n}\n\n\nmsg.broker.will = will;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 220,
        "wires": [
            [
                "1d38d82fd22fa3b5"
            ]
        ]
    },
    {
        "id": "f40aa739a1831a4b",
        "type": "debug",
        "z": "e93bbc67912b9178",
        "name": "缓存失败",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1000,
        "y": 220,
        "wires": []
    },
    {
        "id": "67a938640956897b",
        "type": "switch",
        "z": "e93bbc67912b9178",
        "name": "是否注册设备？",
        "property": "payload.hd.entry.id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "device_joined",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1000,
        "y": 160,
        "wires": [
            [
                "be8cd487c69c6c5a"
            ],
            [
                "f40aa739a1831a4b"
            ]
        ]
    },
    {
        "id": "6abe85752f7acd88",
        "type": "inject",
        "z": "e93bbc67912b9178",
        "name": "定时检查连接",
        "props": [
            {
                "p": "action",
                "v": "connect",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": "60",
        "topic": "",
        "x": 200,
        "y": 300,
        "wires": [
            [
                "0f989c13f4e0c1cb"
            ]
        ]
    },
    {
        "id": "3117ede74b04d9c4",
        "type": "comment",
        "z": "63bcc9db2b38df75",
        "name": "MG数据查询",
        "info": "",
        "x": 150,
        "y": 80,
        "wires": []
    },
    {
        "id": "95f8abc4558b9fe4",
        "type": "link in",
        "z": "63bcc9db2b38df75",
        "name": "获取配置数据",
        "links": [
            "fcb9bbaa875f8ea9"
        ],
        "x": 105,
        "y": 180,
        "wires": [
            [
                "148e5a4f336db704"
            ]
        ]
    },
    {
        "id": "148e5a4f336db704",
        "type": "function",
        "z": "63bcc9db2b38df75",
        "name": "获取配置数据",
        "func": "let _msg = {};\n_msg.collection = \"ndiot_config\";\n_msg.operation = \"find\";\n_msg.payload = {\n    \"dataio.global.data.app.id\": env.get(\"IOT_APP_ID\")\n}\n\n_msg._topic = msg._topic || \"find_ndiot_config\";\n_msg._payload = msg.payload;\nreturn _msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 180,
        "wires": [
            [
                "1d7c8bf676bfd405"
            ]
        ]
    },
    {
        "id": "1d7c8bf676bfd405",
        "type": "link out",
        "z": "63bcc9db2b38df75",
        "name": "",
        "mode": "link",
        "links": [
            "9bfc8855190691e9"
        ],
        "x": 555,
        "y": 220,
        "wires": []
    },
    {
        "id": "6f39e4ac99d30a07",
        "type": "switch",
        "z": "63bcc9db2b38df75",
        "name": "MG数据返回",
        "property": "_topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "find_ndiot_config",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "find_ndiot_z2m_datafile",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "find_ndiot_domains",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "find_ndiot_dispatchers",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "find_ndiot_edges",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "find_ndiot_devices",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "find_ndiot_platforms",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "custom_find",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 8,
        "x": 270,
        "y": 600,
        "wires": [
            [
                "361c77e72a85832a"
            ],
            [
                "8f366ee3986be4d3"
            ],
            [
                "5e9291d2b6187ea4"
            ],
            [
                "627468f7c11147be"
            ],
            [
                "c609d682d722b625"
            ],
            [
                "96a28f5c17c0712b"
            ],
            [
                "b136be555d0b9756"
            ],
            [
                "083a3a66372b8a7e"
            ]
        ]
    },
    {
        "id": "cfdf93b3e832d7d7",
        "type": "link in",
        "z": "63bcc9db2b38df75",
        "name": "",
        "links": [
            "272546c8bfd46694"
        ],
        "x": 105,
        "y": 600,
        "wires": [
            [
                "6f39e4ac99d30a07"
            ]
        ]
    },
    {
        "id": "b22fe37d91a17773",
        "type": "debug",
        "z": "63bcc9db2b38df75",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 800,
        "wires": []
    },
    {
        "id": "13a9b4457054c058",
        "type": "link out",
        "z": "63bcc9db2b38df75",
        "name": "配置数据输出",
        "mode": "link",
        "links": [
            "b1a104c8f9b78d59"
        ],
        "x": 665,
        "y": 560,
        "wires": []
    },
    {
        "id": "361c77e72a85832a",
        "type": "function",
        "z": "63bcc9db2b38df75",
        "name": "配置数据返回",
        "func": "if (msg.payload && msg.payload[0]) {\n    return {\n        payload: msg.payload[0]\n    };\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 560,
        "wires": [
            [
                "13a9b4457054c058"
            ]
        ]
    },
    {
        "id": "d57ad9b001fdc2bc",
        "type": "link in",
        "z": "63bcc9db2b38df75",
        "name": "获取Z2M数据",
        "links": [
            "34edf26e3f576c05"
        ],
        "x": 105,
        "y": 220,
        "wires": [
            [
                "c7fa18b4bd0ac250"
            ]
        ]
    },
    {
        "id": "c7fa18b4bd0ac250",
        "type": "function",
        "z": "63bcc9db2b38df75",
        "name": "获取Z2M数据",
        "func": "let _msg = {};\n_msg.collection = \"ndiot_z2m_datafile\";\n_msg.operation = \"find\";\n_msg.sort = { \"hd.tms\": -1};\n_msg.limit = 2;\n_msg.payload = {\"pld.id\": msg.payload.pld.id }\n\n_msg._topic =  msg._topic || \"find_ndiot_z2m_datafile\";\n_msg._payload = msg.payload;\nreturn _msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 220,
        "wires": [
            [
                "1d7c8bf676bfd405"
            ]
        ]
    },
    {
        "id": "8f366ee3986be4d3",
        "type": "function",
        "z": "63bcc9db2b38df75",
        "name": "Z2M数据返回",
        "func": "return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 600,
        "wires": [
            [
                "d5f2a9ab871bd1fe"
            ]
        ]
    },
    {
        "id": "d5f2a9ab871bd1fe",
        "type": "link out",
        "z": "63bcc9db2b38df75",
        "name": "",
        "mode": "link",
        "links": [
            "ea899d2e95e95576"
        ],
        "x": 665,
        "y": 600,
        "wires": []
    },
    {
        "id": "4b05f49dd8af684c",
        "type": "function",
        "z": "63bcc9db2b38df75",
        "name": "获取租户数据",
        "func": "let data = global.get(\"data\");\nlet _msg = {};\n_msg.collection = \"ndiot_domains\";\n_msg.operation = \"find\";\n_msg.payload = {\n    \"app_id\": data.ids.app\n}\n\n_msg._topic =  msg._topic ||  \"find_ndiot_domains\";\n_msg._payload = msg.payload;\nreturn _msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 260,
        "wires": [
            [
                "1d7c8bf676bfd405"
            ]
        ]
    },
    {
        "id": "46c7be7c38c2cddc",
        "type": "link in",
        "z": "63bcc9db2b38df75",
        "name": "获取租户数据输入",
        "links": [
            "35ef90ce6fa2dfd3"
        ],
        "x": 105,
        "y": 260,
        "wires": [
            [
                "4b05f49dd8af684c"
            ]
        ]
    },
    {
        "id": "cc0a7e91c0aa45d3",
        "type": "inject",
        "z": "63bcc9db2b38df75",
        "name": "刷新数据",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 180,
        "y": 120,
        "wires": [
            [
                "4b05f49dd8af684c"
            ]
        ]
    },
    {
        "id": "c9ed042290e65893",
        "type": "function",
        "z": "63bcc9db2b38df75",
        "name": "获取平台数据",
        "func": "let data = global.get(\"data\");\nlet _msg = {};\n_msg.collection = \"ndiot_platforms\";\n_msg.operation = \"find\";\n_msg.payload = {\n    \"app_id\": data.ids.app\n}\n\n_msg._topic =  msg._topic ||  \"find_ndiot_platforms\";\n_msg._payload = msg.payload;\nreturn _msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 420,
        "wires": [
            [
                "1d7c8bf676bfd405"
            ]
        ]
    },
    {
        "id": "9aacc904775bd744",
        "type": "link in",
        "z": "63bcc9db2b38df75",
        "name": "获取平台数据输入",
        "links": [
            "ef593130e482cb73"
        ],
        "x": 105,
        "y": 420,
        "wires": [
            [
                "c9ed042290e65893"
            ]
        ]
    },
    {
        "id": "b136be555d0b9756",
        "type": "function",
        "z": "63bcc9db2b38df75",
        "name": "平台数据返回处理",
        "func": "common = global.get(\"common\");\n\nlet plfs = msg.payload;\nplfs.forEach(plf => {\n    common.fixUpPlf(plf, false, false);\n})\n\nmsg._topic = null",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "324df872c458b301",
        "type": "function",
        "z": "63bcc9db2b38df75",
        "name": "更新设备数据",
        "func": "let data = global.get(\"data\");\n\nlet pld = msg.payload.pld;\n\nlet _msg = {};\n_msg.collection = \"ndiot_devices\";\n_msg.operation = \"update\";\n\n_msg.payload = pld;\n_msg.query = {\n    \"id\": pld.id\n}\n\n_msg._topic =  msg._topic ||  \"upsert_ndiot_devices\";\n_msg._payload = msg.payload;\nreturn _msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 1320,
        "wires": [
            [
                "49ca1137482a85b9",
                "0cb53f3e7d0bd8cb"
            ]
        ]
    },
    {
        "id": "2b33ccdffdb43c37",
        "type": "link in",
        "z": "63bcc9db2b38df75",
        "name": "更新设备数据输入",
        "links": [
            "34aa83c186d592f9",
            "e9fd3750de45be3f"
        ],
        "x": 85,
        "y": 1320,
        "wires": [
            [
                "324df872c458b301"
            ]
        ]
    },
    {
        "id": "49ca1137482a85b9",
        "type": "debug",
        "z": "63bcc9db2b38df75",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 1300,
        "wires": []
    },
    {
        "id": "0cb53f3e7d0bd8cb",
        "type": "link out",
        "z": "63bcc9db2b38df75",
        "name": "改增数据输出",
        "mode": "link",
        "links": [
            "53e7a294eeb90f43"
        ],
        "x": 605,
        "y": 1340,
        "wires": []
    },
    {
        "id": "4355ecb65b58c6d6",
        "type": "function",
        "z": "63bcc9db2b38df75",
        "name": "更新Z2M数据",
        "func": "let data = global.get(\"data\");\n\nlet pld = msg.payload;\n\nlet _msg = {};\n_msg.collection = \"ndiot_z2m_datafile\";\n_msg.operation = \"update\";\n\n_msg.payload = pld;\n_msg.query = {\n    \"id\": pld.id\n}\n\n_msg._topic =  msg._topic ||  \"upsert_ndiot_z2m_datafile\";\n_msg._payload = msg.payload;\nreturn _msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 1380,
        "wires": [
            [
                "0cb53f3e7d0bd8cb"
            ]
        ]
    },
    {
        "id": "1174792896cf4996",
        "type": "link in",
        "z": "63bcc9db2b38df75",
        "name": "更新Z2M数据输入",
        "links": [
            "c7bc800d1c9dda6d"
        ],
        "x": 85,
        "y": 1380,
        "wires": [
            [
                "4355ecb65b58c6d6"
            ]
        ]
    },
    {
        "id": "f876644da2af838c",
        "type": "function",
        "z": "63bcc9db2b38df75",
        "name": "状态上线发布",
        "func": "let data = global.get(\"data\");\nlet common = global.get(\"common\");\n\nlet hd = {\n    pref: {\n        app: \"0\",\n        dom: \"0\"\n    },\n    from: {\n        type: \"dio\",\n        id: data.ids.dio\n    },\n    to: {\n        type: \"0\",\n        id: \"0\"\n    },\n    entry: {\n        type: \"evt\",\n        id: \"status\"\n    },\n    version: global.get(\"version\")\n};\n\nlet pld = {\n    id: data.ids.dio,\n    online: 1\n};\n\nreturn {\n    payload:{\n        hd: hd,\n        pld: pld\n    },\n    qos: 2,\n    retain: true\n};\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 1180,
        "wires": [
            [
                "d9ded5bff98b6d8d"
            ]
        ]
    },
    {
        "id": "cac9b036a1b34134",
        "type": "link in",
        "z": "63bcc9db2b38df75",
        "name": "状态上线发布输入",
        "links": [
            "9505a529442793c0"
        ],
        "x": 85,
        "y": 1180,
        "wires": [
            [
                "f876644da2af838c"
            ]
        ]
    },
    {
        "id": "d9ded5bff98b6d8d",
        "type": "link out",
        "z": "63bcc9db2b38df75",
        "name": "主题发布输出",
        "mode": "link",
        "links": [
            "f4460e5db856239e"
        ],
        "x": 615,
        "y": 1180,
        "wires": []
    },
    {
        "id": "fa0a362c12abdc77",
        "type": "function",
        "z": "63bcc9db2b38df75",
        "name": "获取设备数据",
        "func": "let data = global.get(\"data\");\nlet _msg = {};\n_msg.collection = \"ndiot_devices\";\n_msg.operation = \"find\";\n_msg.payload = {\n    \"app_id\": data.ids.app,\n}\n\n_msg._topic =  msg._topic ||  \"find_ndiot_devices\";\n_msg._payload = msg.payload;\nreturn _msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 380,
        "wires": [
            [
                "1d7c8bf676bfd405"
            ]
        ]
    },
    {
        "id": "ee53e76d0242e9d5",
        "type": "link in",
        "z": "63bcc9db2b38df75",
        "name": "获取设备数据输入",
        "links": [
            "6956d225725ebcfb"
        ],
        "x": 105,
        "y": 380,
        "wires": [
            [
                "fa0a362c12abdc77"
            ]
        ]
    },
    {
        "id": "1d66111cce615644",
        "type": "link in",
        "z": "63bcc9db2b38df75",
        "name": "获取调度数据输入",
        "links": [
            "295c377cf477e68a"
        ],
        "x": 105,
        "y": 300,
        "wires": [
            [
                "9da6dcd3ccd273b5"
            ]
        ]
    },
    {
        "id": "9da6dcd3ccd273b5",
        "type": "function",
        "z": "63bcc9db2b38df75",
        "name": "获取调度数据",
        "func": "let data = global.get(\"data\");\nlet _msg = {};\n_msg.collection = \"ndiot_dispatchers\";\n_msg.operation = \"find\";\n_msg.payload = {\n    \"app_id\": data.ids.app\n}\n\n_msg._topic =  msg._topic ||  \"find_ndiot_dispatchers\";\n_msg._payload = msg.payload;\nreturn _msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 300,
        "wires": [
            [
                "1d7c8bf676bfd405"
            ]
        ]
    },
    {
        "id": "2b18a3e29ad392bc",
        "type": "link in",
        "z": "63bcc9db2b38df75",
        "name": "获取边缘数据输入",
        "links": [
            "d1161b505c291875"
        ],
        "x": 105,
        "y": 340,
        "wires": [
            [
                "52be2cb6349ffd94"
            ]
        ]
    },
    {
        "id": "52be2cb6349ffd94",
        "type": "function",
        "z": "63bcc9db2b38df75",
        "name": "获取边缘数据",
        "func": "let data = global.get(\"data\");\nlet _msg = {};\n_msg.collection = \"ndiot_edges\";\n_msg.operation = \"find\";\n_msg.payload = {\n    \"app_id\": data.ids.app,\n}\n\n_msg._topic =  msg._topic ||  \"find_ndiot_edges\";\n_msg._payload = msg.payload;\nreturn _msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 340,
        "wires": [
            [
                "1d7c8bf676bfd405"
            ]
        ]
    },
    {
        "id": "5e9291d2b6187ea4",
        "type": "function",
        "z": "63bcc9db2b38df75",
        "name": "租户数据返回处理",
        "func": "common = global.get(\"common\");\n\nlet doms = msg.payload;\ndoms.forEach(dom => {\n    common.fixUpDom(dom, false, false);\n})\n\nmsg._topic = null\nreturn msg\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 640,
        "wires": [
            [
                "295c377cf477e68a",
                "b22fe37d91a17773"
            ]
        ]
    },
    {
        "id": "627468f7c11147be",
        "type": "function",
        "z": "63bcc9db2b38df75",
        "name": "调度数据返回处理",
        "func": "let common = global.get(\"common\");\nlet dsps = msg.payload;\ndsps.forEach(dsp => {\n    common.fixUpDsp(dsp, false, false);\n})\n\nmsg._topic = null\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 680,
        "wires": [
            [
                "d1161b505c291875",
                "b22fe37d91a17773"
            ]
        ]
    },
    {
        "id": "c609d682d722b625",
        "type": "function",
        "z": "63bcc9db2b38df75",
        "name": "边缘数据返回处理",
        "func": "let common = global.get(\"common\");\nlet edgs = msg.payload;\nedgs.forEach(edg => {\n    common.fixUpEdg(edg, false, false);\n})\n\nmsg._topic = null\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 720,
        "wires": [
            [
                "6956d225725ebcfb",
                "b22fe37d91a17773"
            ]
        ]
    },
    {
        "id": "96a28f5c17c0712b",
        "type": "function",
        "z": "63bcc9db2b38df75",
        "name": "设备数据返回处理",
        "func": "common = global.get(\"common\");\n\nlet devs = msg.payload;\ndevs.forEach(dev => {\n    common.fixUpDev(dev, false, false);\n})\n\nmsg._topic = null\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 760,
        "wires": [
            [
                "ef593130e482cb73",
                "b22fe37d91a17773"
            ]
        ]
    },
    {
        "id": "295c377cf477e68a",
        "type": "link out",
        "z": "63bcc9db2b38df75",
        "name": "租户数据返回处理",
        "mode": "link",
        "links": [
            "1d66111cce615644"
        ],
        "x": 665,
        "y": 640,
        "wires": []
    },
    {
        "id": "d1161b505c291875",
        "type": "link out",
        "z": "63bcc9db2b38df75",
        "name": "调度数据返回处理输出",
        "mode": "link",
        "links": [
            "2b18a3e29ad392bc"
        ],
        "x": 665,
        "y": 680,
        "wires": []
    },
    {
        "id": "6956d225725ebcfb",
        "type": "link out",
        "z": "63bcc9db2b38df75",
        "name": "边缘数据返回处理",
        "mode": "link",
        "links": [
            "ee53e76d0242e9d5"
        ],
        "x": 665,
        "y": 720,
        "wires": []
    },
    {
        "id": "ef593130e482cb73",
        "type": "link out",
        "z": "63bcc9db2b38df75",
        "name": "设备数据返回处理",
        "mode": "link",
        "links": [
            "9aacc904775bd744"
        ],
        "x": 665,
        "y": 760,
        "wires": []
    },
    {
        "id": "3e267f77b5d2211a",
        "type": "function",
        "z": "63bcc9db2b38df75",
        "name": "自定义查询数据",
        "func": "let _msg = msg.payload.pld;\n_msg.operation = \"find\";\n\n_msg._topic =  \"custom_find\";\n_msg._payload = msg.payload;\nreturn _msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 460,
        "wires": [
            [
                "1d7c8bf676bfd405"
            ]
        ]
    },
    {
        "id": "800621f0c9f46a27",
        "type": "link in",
        "z": "63bcc9db2b38df75",
        "name": "自定义查询数据输入",
        "links": [
            "396f6c335713be25"
        ],
        "x": 105,
        "y": 460,
        "wires": [
            [
                "3e267f77b5d2211a"
            ]
        ]
    },
    {
        "id": "083a3a66372b8a7e",
        "type": "function",
        "z": "63bcc9db2b38df75",
        "name": "自定义查询返回处理",
        "func": "common = global.get(\"common\");\n\nlet data = msg.payload;\nlet payload = msg._payload;\nlet hd = payload.hd;\nlet pld = payload.pld;\nlet _hd = Object.assign({}, hd);\n_hd.from = hd.to;\n_hd.to = hd.from;\n_hd.stp = 1;\ndelete _hd.tm;\ndelete _hd.tms;\ndelete _hd.tpc;\n\nlet _pld = {\n    data: data,\n    args: pld\n}\n\nreturn {\n    payload: {\n        hd: _hd,\n        pld: _pld\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 840,
        "wires": [
            [
                "b41b12708ccf38fc"
            ]
        ]
    },
    {
        "id": "b41b12708ccf38fc",
        "type": "link out",
        "z": "63bcc9db2b38df75",
        "name": "",
        "mode": "link",
        "links": [
            "f4460e5db856239e"
        ],
        "x": 665,
        "y": 840,
        "wires": []
    },
    {
        "id": "2ff5101df1ab6584",
        "type": "link in",
        "z": "f7e96a32e56d72eb",
        "name": "接口处理输入",
        "links": [
            "be8cd487c69c6c5a",
            "2aaa2afce1499793"
        ],
        "x": 145,
        "y": 480,
        "wires": [
            [
                "71f6fcd9ca7201bf"
            ]
        ]
    },
    {
        "id": "0539b819bad42aa7",
        "type": "switch",
        "z": "f7e96a32e56d72eb",
        "name": "登入请求",
        "property": "payload.hd.from.type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "plf",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "dsp",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "edg",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "dev",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 720,
        "y": 260,
        "wires": [
            [
                "17a7e1551d52f443"
            ],
            [
                "375e15109cdb8b75"
            ],
            [
                "d05180cf83926964"
            ],
            [
                "cdae36d1ac564463",
                "fec2f1866a1ba0bd"
            ]
        ]
    },
    {
        "id": "375e15109cdb8b75",
        "type": "function",
        "z": "f7e96a32e56d72eb",
        "name": "调度",
        "func": "let data = global.get(\"data\");\nlet hd = msg.payload.hd;\nlet dsp = data.dispatchers[hd.from.id];\nif (dsp && dsp.enabled) {\n    let topics = hd.tpc.split(\"/\");\n    let _hd = Object.assign({}, hd);\n    // _hd.ids = _hd.ids || {};\n    // _hd.ids.app = topics[0];\n    // _hd.ids.dom = topics[1];\n    // _hd.ids.dsp = dsp.id;\n    // _hd.ids.dio = data.ids.dio;\n    \n    \n    delete _hd.from;\n    _hd.to = hd.from;\n    _hd.stp = 1;\n    \n    let _pld = {\n        app_id : dsp.domain.app.id,\n        dom_id : dsp.domain.id,\n        dsp_id : dsp.id,\n        dio_id : data.ids.dio,\n    }\n    return {\n        payload: {\n            hd: _hd,\n            pld: _pld\n        }\n    }\n    \n}\n    ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 220,
        "wires": [
            [
                "8f5000be83384a7a",
                "2812239d3e85657b"
            ]
        ]
    },
    {
        "id": "8f5000be83384a7a",
        "type": "link out",
        "z": "f7e96a32e56d72eb",
        "name": "",
        "mode": "link",
        "links": [
            "f4460e5db856239e"
        ],
        "x": 1295,
        "y": 260,
        "wires": []
    },
    {
        "id": "d05180cf83926964",
        "type": "function",
        "z": "f7e96a32e56d72eb",
        "name": "边缘",
        "func": "let data = global.get(\"data\");\nlet hd = msg.payload.hd;\nlet edg = data.edges[hd.from.id];\nlet dsp = edg.dispatcher;\nif (edg && edg.enabled && dsp && dsp.enabled) {\n    let topics = hd.tpc.split(\"/\");\n    let _hd = Object.assign({}, hd);\n    // _hd.ids = _hd.ids || {};\n    // _hd.ids.app = topics[0];\n    // _hd.ids.dom = topics[1];\n    // _hd.ids.dsp = dsp.id;\n    // _hd.ids.edg = edg.id;\n    // _hd.ids.dio = data.ids.dio;\n    \n    \n    delete _hd.from;\n    _hd.to = hd.from;\n    _hd.stp = 1;\n    \n    let _pld = {\n        app_id : dsp.domain.app.id,\n        dom_id : dsp.domain.id,\n        dsp_id : dsp.id,\n        edg_id : edg.id,\n        dio_id : data.ids.dio,\n    }\n    return {\n        payload: {\n            hd: _hd,\n            pld: _pld\n        }\n    }\n    \n}\n    ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 260,
        "wires": [
            [
                "8f5000be83384a7a",
                "2812239d3e85657b"
            ]
        ]
    },
    {
        "id": "cdae36d1ac564463",
        "type": "function",
        "z": "f7e96a32e56d72eb",
        "name": "设备",
        "func": "let data = global.get(\"data\");\nlet hd = msg.payload.hd;\nlet dom, dsp;\nlet dev = data.devices[hd.from.id];\ndom = dev.domain;\n\n\nif (dom) {\n    Object.values(dom.dispatchers).every(_dsp => {\n        if (_dsp.enabled && _dsp.online && _dsp.online()) {\n            dsp = _dsp;\n            return false;\n        }\n        return true;\n    })\n}\n\nif (dom && dsp) {\n    let _hd = Object.assign({}, hd);\n    _hd.to = hd.from;\n    _hd.stp = 1;\n    delete _hd.from;\n    let _pld = {\n        app_id : dsp.domain.app.id,\n        dom_id : dsp.domain.id,\n        dsp_id : dsp.id,\n        dev_id : hd.from.id,\n        dio_id : data.ids.dio,\n    }\n    return {\n        payload: {\n            hd: _hd,\n            pld: _pld\n        }\n    }   \n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 300,
        "wires": [
            [
                "8f5000be83384a7a",
                "2812239d3e85657b"
            ]
        ]
    },
    {
        "id": "71f6fcd9ca7201bf",
        "type": "function",
        "z": "f7e96a32e56d72eb",
        "name": "中转？",
        "func": "let hd = msg.payload.hd;\nif (msg.topics[6] == \"svc\" && msg.topics[7] == \"turn\") {\n    return [msg, null, null]\n} else {\n\n    if (hd.stp == 0 && hd.entry.type == \"svc\" ) {\n        return [null, msg, null];\n    } \n    \n    if (hd.stp == 0 && hd.entry.type == \"evt\" ) {\n         return [null, null, msg];\n    }\n}\n",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 480,
        "wires": [
            [
                "8578476a17c75431"
            ],
            [
                "e5f8902d1028c6dd"
            ],
            [
                "9a50796bcc6a6fae"
            ]
        ]
    },
    {
        "id": "e5f8902d1028c6dd",
        "type": "switch",
        "z": "f7e96a32e56d72eb",
        "name": "服务请求",
        "property": "payload.hd.entry.id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "login",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "get_z2m_datafile",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "set_z2m_datafile",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "custom_find",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 450,
        "y": 480,
        "wires": [
            [
                "0539b819bad42aa7"
            ],
            [
                "e51a89d4f3470cfa"
            ],
            [
                "58a17b926cb4d96d"
            ],
            [
                "6ceef64b7c4cebcc"
            ]
        ]
    },
    {
        "id": "58a17b926cb4d96d",
        "type": "function",
        "z": "f7e96a32e56d72eb",
        "name": "Z2M设置请求",
        "func": "let common = global.get(\"common\");\nlet payload = msg.payload;\n\npayload.id = payload.pld.id;\ncommon.keyDot2DUnder(payload, true);\n\nreturn {\n    payload: payload\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 580,
        "wires": [
            [
                "7c00facf6a435e61",
                "c7bc800d1c9dda6d"
            ]
        ]
    },
    {
        "id": "2812239d3e85657b",
        "type": "debug",
        "z": "f7e96a32e56d72eb",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1110,
        "y": 160,
        "wires": []
    },
    {
        "id": "d466ad43414d7ef2",
        "type": "function",
        "z": "f7e96a32e56d72eb",
        "name": "有无缓存",
        "func": "let data = global.get(\"data\");\n\nlet hd = msg.payload.hd;\nlet pld = msg.payload.pld;\n\nif (!hd || !pld) return;\n\nlet device = data.devices[pld.id];\nif (!device) {\n    device = {events:{}};\n    device.id = pld.id;\n    data.devices[pld.id] = device;\n}\n\nlet z2m = device.z2m ;\n//有缓存\nif (z2m && z2m.datafile || msg.result == 0) {\n    let _msg = {\n        payload: {\n            hd: {\n                // from: hd.to,\n                to: hd.from,\n                entry: hd.entry,\n                sid: hd.sid,\n                stp: 1\n            },\n            pld: {\n                id: pld.id,\n                datafile: z2m.datafile,\n                defaultDatafile: z2m.defaultDatafile\n            }\n        }\n    };\n    \n    return [_msg, null];\n}\n\n\n\nreturn [null, msg];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 400,
        "wires": [
            [
                "104148958a127a27",
                "465228e80c5165c6"
            ],
            [
                "20cdd20af2ac157d",
                "62f7d5be3ac0d3a8"
            ]
        ]
    },
    {
        "id": "104148958a127a27",
        "type": "change",
        "z": "f7e96a32e56d72eb",
        "name": "有缓存",
        "rules": [],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1130,
        "y": 380,
        "wires": [
            [
                "a6df7d880adde7dd"
            ]
        ]
    },
    {
        "id": "e51a89d4f3470cfa",
        "type": "change",
        "z": "f7e96a32e56d72eb",
        "name": "Z2M获取请求",
        "rules": [],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 740,
        "y": 400,
        "wires": [
            [
                "d466ad43414d7ef2"
            ]
        ]
    },
    {
        "id": "a6df7d880adde7dd",
        "type": "link out",
        "z": "f7e96a32e56d72eb",
        "name": "",
        "mode": "link",
        "links": [
            "f4460e5db856239e"
        ],
        "x": 1295,
        "y": 380,
        "wires": []
    },
    {
        "id": "ea899d2e95e95576",
        "type": "link in",
        "z": "f7e96a32e56d72eb",
        "name": "Z2M数据查询返回",
        "links": [
            "d5f2a9ab871bd1fe"
        ],
        "x": 665,
        "y": 460,
        "wires": [
            [
                "ada4b9868b069c4d"
            ]
        ]
    },
    {
        "id": "ada4b9868b069c4d",
        "type": "function",
        "z": "f7e96a32e56d72eb",
        "name": "查询返回",
        "func": "let data = global.get(\"data\");\nlet common = global.get(\"common\");\nlet _payload = msg._payload;\nlet _hd = _payload.hd;\nlet _pld = _payload.pld;\n\n\nlet device = data.devices[_pld.id];\nlet z2m = device.z2m || {};\ndevice.z2m = z2m;\nlet _msg = {};\n\nif (msg.payload) {\n    if (msg.payload[0]) {\n        let pld = msg.payload[0].pld;\n        common.keyDUnder2Dot(pld, true);\n        z2m.datafile = pld.datafile;\n        _msg.result = 1;\n    } else {\n        z2m.defaultDatafile = data.z2m.defaultDatafile;\n        _msg.result = 0;\n    }\n    _msg.payload = msg._payload;\n    return _msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 460,
        "wires": [
            [
                "d466ad43414d7ef2",
                "c6e1604bf9b4a0ae"
            ]
        ]
    },
    {
        "id": "c6e1604bf9b4a0ae",
        "type": "debug",
        "z": "f7e96a32e56d72eb",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 930,
        "y": 500,
        "wires": []
    },
    {
        "id": "465228e80c5165c6",
        "type": "debug",
        "z": "f7e96a32e56d72eb",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1170,
        "y": 460,
        "wires": []
    },
    {
        "id": "20cdd20af2ac157d",
        "type": "debug",
        "z": "f7e96a32e56d72eb",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1170,
        "y": 500,
        "wires": []
    },
    {
        "id": "7c00facf6a435e61",
        "type": "debug",
        "z": "f7e96a32e56d72eb",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1170,
        "y": 560,
        "wires": []
    },
    {
        "id": "c7bc800d1c9dda6d",
        "type": "link out",
        "z": "f7e96a32e56d72eb",
        "name": "",
        "mode": "link",
        "links": [
            "1174792896cf4996"
        ],
        "x": 1295,
        "y": 580,
        "wires": []
    },
    {
        "id": "62f7d5be3ac0d3a8",
        "type": "change",
        "z": "f7e96a32e56d72eb",
        "name": "查询",
        "rules": [],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1130,
        "y": 420,
        "wires": [
            [
                "34edf26e3f576c05"
            ]
        ]
    },
    {
        "id": "34edf26e3f576c05",
        "type": "link out",
        "z": "f7e96a32e56d72eb",
        "name": "",
        "mode": "link",
        "links": [
            "d57ad9b001fdc2bc"
        ],
        "x": 1295,
        "y": 420,
        "wires": []
    },
    {
        "id": "8578476a17c75431",
        "type": "function",
        "z": "f7e96a32e56d72eb",
        "name": "指令中转请求",
        "func": "let data = global.get(\"data\");\nlet ids = data.ids;\nlet hd = msg.payload.hd;\n\nif (hd.to.type == \"dev\") {\n    let dev = data.devices[hd.to.id];\n    if (dev) {\n        if (dev.pid) {\n            hd.to.cid = hd.to.id;\n            hd.to.id = dev.pid;\n        }\n        \n        \n        let domId =  hd.pref.dom ? hd.pref.dom : dev.dom_id;\n        if (!domId)\n            domId = dev.domain ? dev.domain.id : \"\";\n        \n        hd.pref.app = hd.pref.app ? hd.pref.app : ids.app;\n        hd.pref.dom = domId;\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 180,
        "wires": [
            [
                "eda86a17cbf189f0",
                "91fc74f09e505263"
            ]
        ]
    },
    {
        "id": "66b2db62d4dffe2a",
        "type": "inject",
        "z": "f7e96a32e56d72eb",
        "name": "",
        "props": [
            {
                "p": "payload.pld.id",
                "v": "ESP8266x00068a16",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 970,
        "y": 460,
        "wires": [
            [
                "62f7d5be3ac0d3a8"
            ]
        ]
    },
    {
        "id": "17a7e1551d52f443",
        "type": "function",
        "z": "f7e96a32e56d72eb",
        "name": "平台",
        "func": "let data = global.get(\"data\");\nlet ids = data.ids;\nlet hd = msg.payload.hd;\nlet plf = data.platforms[hd.from.id];\nif (plf && plf.enabled) {\n    let topics = hd.tpc.split(\"/\");\n    let _hd = Object.assign({}, hd);\n\n    _hd.pref = {\n        app: ids.app,\n        dom: \"0\"\n    };\n    _hd.from = {\n        type: \"dio\",\n        id: ids.dio\n    };\n    _hd.to = hd.from;\n    _hd.stp = 1;\n    \n    let _pld = {\n        app_id : plf.app.id,\n        dio_id : data.ids.dio,\n        plf_id : plf.id\n    }\n    return {\n        payload: {\n            hd: _hd,\n            pld: _pld\n        }\n    }\n    \n}\n    ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 180,
        "wires": [
            [
                "8f5000be83384a7a",
                "2812239d3e85657b"
            ]
        ]
    },
    {
        "id": "eda86a17cbf189f0",
        "type": "link out",
        "z": "f7e96a32e56d72eb",
        "name": "",
        "mode": "link",
        "links": [
            "f4460e5db856239e"
        ],
        "x": 725,
        "y": 180,
        "wires": []
    },
    {
        "id": "cf0c6d87cee4ec8f",
        "type": "debug",
        "z": "f7e96a32e56d72eb",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 1100,
        "wires": []
    },
    {
        "id": "9a50796bcc6a6fae",
        "type": "switch",
        "z": "f7e96a32e56d72eb",
        "name": "事件",
        "property": "payload.hd.entry.id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "device_joined",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "device_leave",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "device_announce",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "device_interview",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 450,
        "y": 800,
        "wires": [
            [
                "959124baa8cfaab0"
            ],
            [
                "815f8e7e81ebe536"
            ],
            [
                "3dd901b26f666240"
            ],
            [
                "77f2b74ece19e1b7"
            ]
        ]
    },
    {
        "id": "959124baa8cfaab0",
        "type": "function",
        "z": "f7e96a32e56d72eb",
        "name": "device_joined",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 740,
        "wires": [
            [
                "cf0c6d87cee4ec8f",
                "0d95fa680207c90c",
                "b1436eeab313997f"
            ]
        ]
    },
    {
        "id": "815f8e7e81ebe536",
        "type": "function",
        "z": "f7e96a32e56d72eb",
        "name": "device_leave",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 780,
        "wires": [
            [
                "cf0c6d87cee4ec8f",
                "0d95fa680207c90c",
                "8fb077359381dc26"
            ]
        ]
    },
    {
        "id": "3dd901b26f666240",
        "type": "function",
        "z": "f7e96a32e56d72eb",
        "name": "device_announce",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 820,
        "wires": [
            [
                "cf0c6d87cee4ec8f",
                "0d95fa680207c90c"
            ]
        ]
    },
    {
        "id": "77f2b74ece19e1b7",
        "type": "function",
        "z": "f7e96a32e56d72eb",
        "name": "device_interview",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 860,
        "wires": [
            [
                "cf0c6d87cee4ec8f",
                "0d95fa680207c90c",
                "1463b48fa0bd9ab1"
            ]
        ]
    },
    {
        "id": "91fc74f09e505263",
        "type": "debug",
        "z": "f7e96a32e56d72eb",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 650,
        "y": 140,
        "wires": []
    },
    {
        "id": "0d95fa680207c90c",
        "type": "debug",
        "z": "f7e96a32e56d72eb",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "topic",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 1020,
        "wires": []
    },
    {
        "id": "fec2f1866a1ba0bd",
        "type": "function",
        "z": "f7e96a32e56d72eb",
        "name": "更新设备",
        "func": "let data = global.get(\"data\");\nlet hd = msg.payload.hd;\nlet pld = msg.payload.pld;\nlet dev = data.devices[pld.id];\nlet _pld = {\n    id: pld.id,\n    pid: pld.pid,\n    name: dev.name ? dev.name : pld.id,\n    app_id: dev.app_id,\n    dom_id: dev.dom_id,\n    vendor: pld.vendor,\n    model:  pld.model,\n    disabled: dev.disabled\n}\n\nObject.assign(dev, _pld)\n\nreturn {\n    payload: {\n        pld: _pld\n    }\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 340,
        "wires": [
            [
                "34aa83c186d592f9"
            ]
        ]
    },
    {
        "id": "34aa83c186d592f9",
        "type": "link out",
        "z": "f7e96a32e56d72eb",
        "name": "更新设备数据请求",
        "mode": "link",
        "links": [
            "2b33ccdffdb43c37"
        ],
        "x": 1295,
        "y": 340,
        "wires": []
    },
    {
        "id": "b1436eeab313997f",
        "type": "function",
        "z": "f7e96a32e56d72eb",
        "name": "更新设备",
        "func": "let data = global.get(\"data\");\nlet common = global.get(\"common\");\nlet hd = msg.payload.hd;\nlet pld = msg.payload.pld;\nlet id = hd.from.cid ? hd.from.cid : hd.from.id;\nlet pid = hd.from.cid ? hd.from.id : null;\nlet dev = data.devices[id] || {};\n\nlet _pld = {\n    id: id,\n    pid: pid,\n    name: dev.name ? dev.name : id,\n    app_id: hd.pref.app,\n    dom_id: hd.pref.dom,\n    vendor: dev.vendor,\n    model:  dev.model,\n    disabled: dev.disabled\n}\n\ndev = Object.assign(dev, _pld)\ncommon.fixUpDev(dev, false, false);\n\nreturn {\n    payload: {\n        hd: hd,\n        pld: _pld\n    },\n    device: dev\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 740,
        "wires": [
            [
                "e9fd3750de45be3f",
                "fc905384f9206ae5"
            ]
        ]
    },
    {
        "id": "8fb077359381dc26",
        "type": "function",
        "z": "f7e96a32e56d72eb",
        "name": "更新设备",
        "func": "let data = global.get(\"data\");\nlet common = global.get(\"common\");\nlet hd = msg.payload.hd;\nlet pld = msg.payload.pld;\nlet id = hd.from.cid ? hd.from.cid : hd.from.id;\nlet pid = hd.from.cid ? hd.from.id : null;\nlet dev = data.devices[id] || {};\nlet devBak = Object.assign({}, dev);\n\n\nlet _pld = {\n    id: id,\n    pid: null,\n    name: dev.name ? dev.name : id,\n    app_id: hd.pref.app,\n    dom_id: null,\n    vendor: dev.vendor,\n    model:  dev.model,\n    disabled: dev.disabled\n}\n\n\ndev = Object.assign(dev, _pld)\n\nreturn {\n    payload: {\n        hd: hd,\n        pld: _pld\n    },\n    device: devBak\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 780,
        "wires": [
            [
                "e9fd3750de45be3f",
                "fc905384f9206ae5"
            ]
        ]
    },
    {
        "id": "e9fd3750de45be3f",
        "type": "link out",
        "z": "f7e96a32e56d72eb",
        "name": "device_joined",
        "mode": "link",
        "links": [
            "2b33ccdffdb43c37"
        ],
        "x": 1285,
        "y": 760,
        "wires": []
    },
    {
        "id": "1463b48fa0bd9ab1",
        "type": "function",
        "z": "f7e96a32e56d72eb",
        "name": "更新设备",
        "func": "let data = global.get(\"data\");\nlet common = global.get(\"common\");\nlet hd = msg.payload.hd;\nlet pld = msg.payload.pld;\nlet id = hd.from.cid;\nlet pid = hd.from.id\nlet dev = data.devices[id] || {};\nlet def = pld.definition;\nif (!def) \n    return;\n\n\nlet _pld = {\n    id: id,\n    pid: pid,\n    name: dev.name ? dev.name : id,\n    app_id: hd.pref.app,\n    dom_id: hd.pref.dom,\n    vendor: def.vendor,\n    model:  def.model,\n    disabled: dev.disabled\n}\n\ndev = Object.assign(dev, _pld)\ncommon.fixUpDev(dev, false, false);\n\nreturn {\n    payload: {\n        hd: hd,\n        pld: _pld\n    },\n    device: dev\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 860,
        "wires": [
            [
                "e9fd3750de45be3f",
                "fc905384f9206ae5"
            ]
        ]
    },
    {
        "id": "fc905384f9206ae5",
        "type": "function",
        "z": "f7e96a32e56d72eb",
        "name": "发布事件",
        "func": "// let data = global.get(\"data\");\n// let hd = msg.payload.hd;\n// let pld = msg.payload.pld;\n// let dev = data.devices[pld.id];\n// if (!dev || !dev.vendor || !dev.model) \n//     return;\n\n// let _hd = {\n//     pref: hd.pref,\n//     entry: hd.entry\n// }\n\n// let _pld = Object.assign({}, pld);\n\n// return {\n//     payload: {\n//         hd: _hd,\n//         pld: _pld\n//     }\n// };\n\nlet dev = msg.device;\nif(!dev) return;\n\nlet hd = msg.payload.hd;\nlet pld = msg.payload.pld;\n\nlet _hd = {\n    pref: hd.pref,\n    entry: hd.entry\n}\n\nlet _pld = {};\n\nObject.keys(pld).forEach(key => {\n    _pld[key] = dev[key];\n})\n\nreturn {\n    payload: {\n        hd: _hd,\n        pld: _pld\n    }\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 900,
        "wires": [
            [
                "28a5d4729e59f380"
            ]
        ]
    },
    {
        "id": "28a5d4729e59f380",
        "type": "link out",
        "z": "f7e96a32e56d72eb",
        "name": "",
        "mode": "link",
        "links": [
            "f4460e5db856239e"
        ],
        "x": 1285,
        "y": 900,
        "wires": []
    },
    {
        "id": "6ceef64b7c4cebcc",
        "type": "change",
        "z": "f7e96a32e56d72eb",
        "name": "自定义查询请求",
        "rules": [],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 740,
        "y": 640,
        "wires": [
            [
                "396f6c335713be25"
            ]
        ]
    },
    {
        "id": "396f6c335713be25",
        "type": "link out",
        "z": "f7e96a32e56d72eb",
        "name": "",
        "mode": "link",
        "links": [
            "800621f0c9f46a27"
        ],
        "x": 1295,
        "y": 640,
        "wires": []
    },
    {
        "id": "77eacd4e3749925d",
        "type": "mongodb in",
        "z": "25fe735d371c65bb",
        "mongodb": "07e7b1954a01cc92",
        "name": "预生产查找",
        "collection": "",
        "operation": "find",
        "x": 550,
        "y": 220,
        "wires": [
            [
                "d695b815466ad76c",
                "272546c8bfd46694"
            ]
        ]
    },
    {
        "id": "0397a839187b98d3",
        "type": "mongodb out",
        "z": "25fe735d371c65bb",
        "mongodb": "07e7b1954a01cc92",
        "name": "预生产增删改",
        "collection": "",
        "payonly": true,
        "upsert": true,
        "multi": false,
        "operation": "insert",
        "x": 560,
        "y": 400,
        "wires": []
    },
    {
        "id": "95df2cdb0abd3d79",
        "type": "link in",
        "z": "25fe735d371c65bb",
        "name": "增加数据输入",
        "links": [],
        "x": 205,
        "y": 420,
        "wires": [
            [
                "d0843460d726d6cf"
            ]
        ]
    },
    {
        "id": "9bfc8855190691e9",
        "type": "link in",
        "z": "25fe735d371c65bb",
        "name": "查询数据输入",
        "links": [
            "1d7c8bf676bfd405"
        ],
        "x": 205,
        "y": 260,
        "wires": [
            [
                "0276501b54d14509"
            ]
        ]
    },
    {
        "id": "272546c8bfd46694",
        "type": "link out",
        "z": "25fe735d371c65bb",
        "name": "查询数据返回",
        "mode": "link",
        "links": [
            "cfdf93b3e832d7d7"
        ],
        "x": 815,
        "y": 260,
        "wires": []
    },
    {
        "id": "d695b815466ad76c",
        "type": "debug",
        "z": "25fe735d371c65bb",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 120,
        "wires": []
    },
    {
        "id": "0276501b54d14509",
        "type": "switch",
        "z": "25fe735d371c65bb",
        "name": "",
        "property": "POD_NAME",
        "propertyType": "env",
        "rules": [
            {
                "t": "cont",
                "v": "-preproduct-",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 350,
        "y": 260,
        "wires": [
            [
                "77eacd4e3749925d"
            ],
            [
                "f72e9c3b3f9ec62a",
                "048d83dd7bc6b9d2"
            ]
        ]
    },
    {
        "id": "f72e9c3b3f9ec62a",
        "type": "mongodb in",
        "z": "25fe735d371c65bb",
        "d": true,
        "mongodb": "1156755863b3897c",
        "name": "开发查找",
        "collection": "",
        "operation": "find",
        "x": 540,
        "y": 300,
        "wires": [
            [
                "272546c8bfd46694",
                "d695b815466ad76c"
            ]
        ]
    },
    {
        "id": "d0843460d726d6cf",
        "type": "switch",
        "z": "25fe735d371c65bb",
        "name": "",
        "property": "POD_NAME",
        "propertyType": "env",
        "rules": [
            {
                "t": "cont",
                "v": "-preproduct-",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 350,
        "y": 420,
        "wires": [
            [
                "0397a839187b98d3"
            ],
            [
                "e299c973e04b3e51"
            ]
        ]
    },
    {
        "id": "e299c973e04b3e51",
        "type": "mongodb out",
        "z": "25fe735d371c65bb",
        "d": true,
        "mongodb": "1156755863b3897c",
        "name": "开发增删改",
        "collection": "",
        "payonly": true,
        "upsert": true,
        "multi": false,
        "operation": "insert",
        "x": 550,
        "y": 460,
        "wires": []
    },
    {
        "id": "048d83dd7bc6b9d2",
        "type": "debug",
        "z": "25fe735d371c65bb",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 490,
        "y": 120,
        "wires": []
    },
    {
        "id": "b516ac92ea92032f",
        "type": "mongodb out",
        "z": "25fe735d371c65bb",
        "mongodb": "07e7b1954a01cc92",
        "name": "预生产改增",
        "collection": "",
        "payonly": true,
        "upsert": true,
        "multi": false,
        "operation": "update",
        "x": 550,
        "y": 540,
        "wires": []
    },
    {
        "id": "53e7a294eeb90f43",
        "type": "link in",
        "z": "25fe735d371c65bb",
        "name": "改增数据输入",
        "links": [
            "0cb53f3e7d0bd8cb"
        ],
        "x": 205,
        "y": 560,
        "wires": [
            [
                "376ac808b1944c3f"
            ]
        ]
    },
    {
        "id": "376ac808b1944c3f",
        "type": "switch",
        "z": "25fe735d371c65bb",
        "name": "",
        "property": "POD_NAME",
        "propertyType": "env",
        "rules": [
            {
                "t": "cont",
                "v": "-preproduct-",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 350,
        "y": 560,
        "wires": [
            [
                "b516ac92ea92032f"
            ],
            [
                "26a038e5e4d76110"
            ]
        ]
    },
    {
        "id": "26a038e5e4d76110",
        "type": "mongodb out",
        "z": "25fe735d371c65bb",
        "d": true,
        "mongodb": "1156755863b3897c",
        "name": "开发改增",
        "collection": "",
        "payonly": true,
        "upsert": true,
        "multi": false,
        "operation": "update",
        "x": 540,
        "y": 600,
        "wires": []
    }
]