[
    {
        "id": "7c7a09edf982e2f4",
        "type": "tab",
        "label": "全局配置(数据)",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "63bcc9db2b38df75",
        "type": "tab",
        "label": "接口调用",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "25fe735d371c65bb",
        "type": "tab",
        "label": "MongDB",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "b7b9b4f87ca81b1c",
        "type": "tab",
        "label": "影子设备",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "e3c37262fcb472bd",
        "type": "tab",
        "label": "影子订阅",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "8ef2d550b8e4f725",
        "type": "tab",
        "label": "修改设备配置（测试）",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "ddc3fe4a88f96adf",
        "type": "nd-mongodb",
        "hostname": "mongodb",
        "topology": "direct",
        "connectOptions": "",
        "port": "27017",
        "db": "",
        "name": "mongodb"
    },
    {
        "id": "790bcfc072decbef",
        "type": "mqtt-broker",
        "name": "north_output",
        "broker": "push-access.sdp.101.com",
        "port": "1883",
        "clientid": "",
        "autoConnect": false,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "e0fae44751c7a250",
        "type": "mqtt-broker",
        "name": "south_output",
        "broker": "test",
        "port": "1883",
        "clientid": "",
        "autoConnect": false,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "acbe893ce0e86722",
        "type": "mqtt-broker",
        "name": "south_input",
        "broker": "push-access.sdp.101.com",
        "port": "11882",
        "clientid": "",
        "autoConnect": false,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "340486ab3bf5bf39",
        "type": "mqtt-broker",
        "name": "dataio_input",
        "broker": "127.0.0.1",
        "port": "1883",
        "clientid": "",
        "autoConnect": false,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "ccc535250cd7677b",
        "type": "mqtt-broker",
        "name": "dataio_output",
        "broker": "127.0.0.1",
        "port": "1883",
        "clientid": "",
        "autoConnect": false,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "f544f205.d51a7",
        "type": "inject",
        "z": "7c7a09edf982e2f4",
        "name": "初始化",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 100,
        "wires": [
            [
                "683f9c514d3dc3f8"
            ]
        ]
    },
    {
        "id": "52f82eb73840e302",
        "type": "OS",
        "z": "7c7a09edf982e2f4",
        "name": "",
        "x": 430,
        "y": 100,
        "wires": [
            [
                "705cd1a4e7548610"
            ]
        ]
    },
    {
        "id": "705cd1a4e7548610",
        "type": "change",
        "z": "7c7a09edf982e2f4",
        "name": "OS",
        "rules": [
            {
                "t": "set",
                "p": "os",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 570,
        "y": 100,
        "wires": [
            [
                "c27b74647cc92e82"
            ]
        ]
    },
    {
        "id": "c27b74647cc92e82",
        "type": "home-dir",
        "z": "7c7a09edf982e2f4",
        "x": 720,
        "y": 100,
        "wires": [
            [
                "3e822ed879b8777e"
            ]
        ]
    },
    {
        "id": "3e822ed879b8777e",
        "type": "change",
        "z": "7c7a09edf982e2f4",
        "name": "datadir",
        "rules": [
            {
                "t": "set",
                "p": "os.datadir",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 870,
        "y": 100,
        "wires": [
            [
                "a6a4ebf94a8b8924"
            ]
        ]
    },
    {
        "id": "4aa5b949a197bcb7",
        "type": "inject",
        "z": "7c7a09edf982e2f4",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "data",
        "payloadType": "global",
        "x": 220,
        "y": 900,
        "wires": [
            [
                "61299e55f08ac3e1"
            ]
        ]
    },
    {
        "id": "61299e55f08ac3e1",
        "type": "debug",
        "z": "7c7a09edf982e2f4",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 410,
        "y": 900,
        "wires": []
    },
    {
        "id": "1188b78d61e6e2a8",
        "type": "link out",
        "z": "7c7a09edf982e2f4",
        "name": "配置完成",
        "mode": "link",
        "links": [
            "906bb62a708b4c0c",
            "6f384d97e4e51060",
            "5c3bc250fbfc485b",
            "b2168926188a5904"
        ],
        "x": 935,
        "y": 720,
        "wires": []
    },
    {
        "id": "6423346762c80c34",
        "type": "debug",
        "z": "7c7a09edf982e2f4",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 470,
        "y": 820,
        "wires": []
    },
    {
        "id": "4754da03d64fad4b",
        "type": "function",
        "z": "7c7a09edf982e2f4",
        "name": "数据初始化",
        "func": "let config = msg.payload;\n\n Object.keys(config).forEach(key => {\n    global.set(key, config[key])\n})\n\nlet data = global.get(\"data\");\nlet ids = global.get(\"ids\");\n\nlet app = data.app;\napp.domains = app.domains || {};\napp.platforms = app.platforms || {};\n\ndata.domains = app.domains;\ndata.platforms = app.platforms;\ndata.dispatchers = {};\ndata.edges = {};\ndata.devices = {};\ndata.mqtt = app.mqtt;\ndata.mongodb = app.mongodb;\ndata.topics = app.mqtt.topics;\ndata.z2m = app.z2m;\ndata.ids = ids;\ndata.shadows = app.shadows;\n\nlet _msg = {payload: data};\n\nif (env.get(\"IOT_CONFIG_FILE_FIRST\") == \"1\" || global.get(\"data_from_db\") == 1) {\n    return [null, _msg];\n}\nelse\n    return [_msg, null];\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 374,
        "wires": [
            [
                "82d624e156acd716"
            ],
            [
                "0666cb29a70a9804"
            ]
        ]
    },
    {
        "id": "fe1774a6b4d68308",
        "type": "function",
        "z": "7c7a09edf982e2f4",
        "name": "展开主题函数",
        "func": "let data = global.get(\"data\");\nlet common = global.get(\"common\");\nlet gids = global.get(\"ids\");\n\nlet expandTopic = {\n    expandStr : function(v, _ids) {\n        let ids = Object.assign({}, gids);\n        ids = Object.assign(ids, _ids || {});\n\n        if (typeof v == \"string\") {\n            v = v.replace(/\\{APP_ID\\}/g, env.get(\"IOT_APP_ID\") || \"\");\n            v = v.replace(/\\{DOM_ID\\}/g, env.get(\"IOT_DOM_ID\") || \"\");\n            v = v.replace(/\\{DSP_ID\\}/g, env.get(\"IOT_DSP_ID\") || \"\");\n            v = v.replace(/\\{EDG_ID\\}/g, env.get(\"IOT_EDG_ID\") || \"\");\n            v = v.replace(/\\{DIO_ID\\}/g, env.get(\"IOT_DIO_ID\") || \"\");\n            v = v.replace(/\\{PLF_ID\\}/g, env.get(\"IOT_PLF_ID\") || \"\");\n            v = v.replace(/\\{HOSTNAME\\}/g, env.get(\"HOSTNAME\") || env.get(\"COMPUTERNAME\") || \"\");\n            \n            v = v.replace(/\\{app\\}/g, ids.app || \"\");\n            v = v.replace(/\\{dom\\}/g, ids.dom || \"\");\n            v = v.replace(/\\{dsp\\}/g, ids.dsp || \"\");\n            v = v.replace(/\\{edg\\}/g, ids.edg || \"\");\n            v = v.replace(/\\{dio\\}/g, ids.dio || \"\");\n            v = v.replace(/\\{plf\\}/g, ids.plf || \"\");\n            if (ids.dev)\n                v = v.replace(/\\{dev\\}/g, ids.dev || \"\");\n        }\n        return v;\n    },\n    expandArray : function(v, _ids) {\n        if (Array.isArray(v)) {\n            for(let i=0; i < v.length; i++) {\n                v[i] = this.expand(v[i], _ids);\n            }\n        }\n        return arr;\n    },\n    expandObj : function(v, _ids) {\n        if (typeof v == \"object\") {\n            let keys = Object.keys(v);\n            keys.forEach(k => {\n                v[k] = this.expand(v[k], _ids);\n            });\n        }\n        return v;        \n    },\n    expand : function(v, _ids) {\n        if (typeof v == \"string\")\n            v = this.expandStr(v, _ids);\n                    \n        if (Array.isArray(v)) {\n            v = expandArray(v, _ids);\n        }\n        \n        if (typeof v == \"object\") {\n            v = this.expandObj(v, _ids)\n        }\n                \n        return v\n    }\n}\n    \n\n\ncommon.expandTopic = expandTopic;\n\nreturn {payload: data};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 460,
        "wires": [
            [
                "de1af31ddcf813b0"
            ]
        ]
    },
    {
        "id": "de1af31ddcf813b0",
        "type": "function",
        "z": "7c7a09edf982e2f4",
        "name": "缓存数据函数",
        "func": "let data = global.get(\"data\");\nlet common = global.get(\"common\");\n\nlet online = function(){\n    let events = this.events;\n    if (events && events.status)\n        return events.status.pld.online;\n    return 0;\n}\n\nlet cachePayload = function(payload) {\n    let hd = payload.hd;\n    let pld = payload.pld;\n    \n    if (hd.from.type == \"dsp\") {\n        let dsp = data.dispatchers[hd.from.id];\n        if (!dsp) return;\n        \n        dsp.id = hd.from.id;\n        dsp.events = dsp.events || {};\n        dsp.events[hd.entry.id] = payload;\n        dsp.online = online;\n        data.dispatchers[hd.from.id] = dsp;\n    }\n    \n    if (hd.from.type == \"edg\") {\n        let edg = data.edges[hd.from.id];\n        if (!edg) return;\n        \n        edg.id = hd.from.id;\n        edg.events = edg.events || {};\n        edg.events[hd.entry.id] = payload;\n        edg.online = online;\n        data.edges[hd.from.id] = edg;\n    }    \n    \n    if (hd.from.type == \"dev\") {\n        let dev = data.devices[hd.from.id];\n        if (!dev) {\n            let pid = hd.from.pid;\n            let pdev = pid ? data.devices[pid] : null;\n            if (pdev){\n                dev = {};\n            } else {\n                return;\n            }\n        };\n        \n        dev.id = hd.from.id;\n        dev.events = dev.events || {};\n        if (hd.from.pid) {\n            dev.pid = hd.from.pid;\n            dev.pdev = data.devices[dev.pid];\n            dev.domain = dev.pdev && dev.pdev.domain;\n        }\n        dev.events[hd.entry.id] = payload;\n        dev.online = online;\n        data.devices[hd.from.id] = dev;\n        let edgId = hd.ids && hd.ids.edg || pld.edg_id\n        if (edgId) {\n            let edg = data.edges[edgId];\n            if (edg) {\n                if (dev.edge && dev.edge.id != edgId) {\n                    delete dev.edge.devices[dev.id]\n                }\n                dev.edge = edg;\n                edg.devices = edg.devices || {};\n                edg.devices[dev.id] = dev;;\n            }\n        }\n    }\n\n    if (hd.from.type == \"plf\") {\n        let plf = data.platforms[hd.from.id];\n        if (!plf) return;\n        \n        plf.id = hd.from.id;\n        plf.events = plf.events || {};\n        plf.events[hd.entry.id] = payload;\n        plf.online = online;\n        data.platforms[hd.from.id] = plf;\n    }\n    \n    \n    return payload;\n\n}\n\ncommon.cachePayload = cachePayload;\n\nreturn {payload: data};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 500,
        "wires": [
            [
                "aea3af329e2e33ba"
            ]
        ]
    },
    {
        "id": "5cddc77aa8c606cd",
        "type": "function",
        "z": "7c7a09edf982e2f4",
        "name": "获取HD主题函数",
        "func": "let common = global.get(\"common\");\nlet ids = global.get(\"data\").ids;\n\nlet getHDTopic = function(hd) {\n    let tpc = \"\";\n    // let ids = hd.ids || gids;\n    if (!hd.pref) hd.pref = {};\n    if (!hd.pref.app) hd.pref.app = (ids.app ? ids.app : \"0\");\n    if (!hd.pref.dom) hd.pref.dom = (ids.dom ? ids.dom : \"0\");\n    \n    if (!hd.from) hd.from = {};\n    if (!hd.from.type) hd.from.type = \"dio\";\n    if (!hd.from.id) hd.from.id = ids.dio;\n    if (!hd.to) hd.to = {};\n    if (!hd.to.type) hd.to.type = \"0\";\n    if (!hd.to.id) hd.to.id = \"0\";\n    if (!hd.entry) hd.entry = {};\n    if (!hd.entry.type) hd.entry.type = \"0\";\n    if (!hd.entry.id) hd.entry.id = \"0\";\n    if (!hd.sid) hd.sid = \"0\";\n    if (!hd.stp) hd.stp = 0;\n    if (!hd.version) hd.version = global.get(\"version\")\n\n\n    tpc =   hd.pref.app + \"/\" + hd.pref.dom + \"/\" + \n            hd.from.type + \"/\" + hd.from.id + \"/\" + \n            hd.to.type + \"/\" + hd.to.id + \"/\" + \n            hd.entry.type + \"/\" + hd.entry.id;\n    return tpc;\n}\n\n\ncommon.getHDTopic = getHDTopic;\n\nreturn {payload: common};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 580,
        "wires": [
            [
                "2316a7453cae5a40"
            ]
        ]
    },
    {
        "id": "2316a7453cae5a40",
        "type": "function",
        "z": "7c7a09edf982e2f4",
        "name": "设备调度函数",
        "func": "let data = global.get(\"data\");\nlet common = global.get(\"common\");\n// let ids = global.get(\"data\").ids;\n\n\nlet dispatch = {\n    getValidEdge : function(dom) {\n        let result;\n        Object.values(dom.edges).every(edg => {\n            if (edg.enabled && edg.online && edg.online()) {\n                let dsp = edg.dispatcher;\n                if (dsp && dsp.enabled && dsp.online && dsp.online()) {\n                    result = edg;\n                    return false;\n                }\n            }\n            return true;\n        })\n        \n        return result;\n        \n        // let values = Object.values(dom.edges);\n        // let result;\n        // for(let i = 0; i < values.length; i++) {\n        //     let edg = values[i];\n        //     if (edg.enabled && edg.online && edg.online()) {\n        //         let dsp = edg.dispatcher;\n        //         if (dsp && dsp.enabled && dsp.online && dsp.online()) {\n        //             result = value;\n        //             break;\n        //         }\n        //     }\n        // }\n\n        \n    },\n    \n    dispatchDevice : function(devId){\n        let dev = data.devices[devId];\n        if (!dev) return;\n        \n        let edg;\n        edg = dev.edge;\n        \n        if (!edg || !edg.id || !edg.enabled || !(edg.online && edg.online()) ) {\n            if (edg  && edg.devices)\n                delete edg.devices[dev.id];\n            edg = this.getValidEdge(dev.domain);\n        }\n        if (edg) {\n            let devs = edg.devices || {};\n            devs[dev.id] = dev;\n            edg.devices = devs; \n        }\n        \n        dev.edge = edg;\n        return edg;\n    }\n}\n  \n  \n\ncommon.dispatch = dispatch;\n\nreturn {payload: common};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 620,
        "wires": [
            [
                "ae41ab375db2ecf6"
            ]
        ]
    },
    {
        "id": "aea3af329e2e33ba",
        "type": "function",
        "z": "7c7a09edf982e2f4",
        "name": "键值转ID函数",
        "func": "let common = global.get(\"common\");\n\nlet keyToObjId = function(objs) {\n    let keys = Object.keys(objs);\n    keys.forEach(key => {\n        let obj = objs[key];\n        if (typeof obj == \"object\") \n            obj.id = key;\n    })        \n}\n    \nlet keyDot2DUnder = function (objs, recu) {\n    Object.keys(objs).forEach(key => {\n        let obj = objs[key];\n        delete objs[key];\n        key = key.replace(/\\./g, \"__\");\n        objs[key] = obj;\n        if (typeof obj == \"object\" && recu) \n            this.keyDot2DUnder(obj, recu);\n    })     \n}\n\nlet keyDUnder2Dot = function (objs, recu) {\n    Object.keys(objs).forEach(key => {\n        let obj = objs[key];\n        delete objs[key];\n        key = key.replace(/__/g, \".\");\n        objs[key] = obj;\n        if (typeof obj == \"object\" && recu) \n            this.keyDUnder2Dot(obj, recu);\n    })     \n}\n\n\ncommon.keyToObjId = keyToObjId;\ncommon.keyDot2DUnder = keyDot2DUnder;\ncommon.keyDUnder2Dot = keyDUnder2Dot;\n\nreturn {payload: common};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 540,
        "wires": [
            [
                "5cddc77aa8c606cd"
            ]
        ]
    },
    {
        "id": "fc89e9165d2ffb12",
        "type": "function",
        "z": "7c7a09edf982e2f4",
        "name": "数据补全",
        "func": "let data = global.get(\"data\");\nlet common = global.get(\"common\");\n\nlet fixUpDom = function(_dom, notNewIfNotExist, recu) {\n    if (!_dom || !_dom.id) return;\n    \n    let domId = _dom.id;\n    let doms = data.app.domains;\n    \n    let dom = doms[domId];\n    if (!dom) {\n        if (notNewIfNotExist)\n            dom = _dom;\n        else\n            dom = Object.assign({}, _dom);\n    } else {\n         dom = Object.assign(dom, _dom);\n    }\n\n    dom.id = domId;\n    dom.app = data.app;\n    dom.dispatchers = dom.dispatchers || {};\n    dom.edges = dom.edges || {};\n    dom.devices = dom.devices || {};\n    dom.attrs = _dom;\n    doms[domId] = dom;\n\n    if (recu) {\n        Object.keys(dom.dispatchers).forEach(dspId => {\n            let dsp = dom.dispatchers[dspId];\n            dsp.id = dspId;\n            dsp.app_id = dom.app.id;\n            dsp.dom_id = domId;\n            this.fixUpDsp(dsp, notNewIfNotExist, recu);\n        })\n    }\n}\n\nlet fixUpDsp = function(_dsp, notNewIfNotExist, recu) {\n    if (!_dsp || !_dsp.id || !_dsp.dom_id) {\n        if (_dsp && _dsp.id) \n            data.dispatchers[_dsp.id] = _dsp;\n        return;\n    }\n\n    let domId = _dsp.dom_id;\n    let dspId = _dsp.id;\n    let doms = data.domains;\n    let dom = doms[domId];\n    let dsps = data.dispatchers;\n    let dsp = dsps[dspId];\n    let dysub = false;\n    \n    if (!dom) {\n        node.error(\"dsp没有租户：\" + dspId);\n        return;\n    };\n    \n    if (!dsp) {\n        if (notNewIfNotExist)\n            dsp = _dsp;\n        else\n            dsp = Object.assign({}, _dsp);\n        dysub = true;\n    } else {\n        dsp = Object.assign(dsp, _dsp);\n    }\n    \n    \n    dsp.id = dspId;\n    dsp.domain = dom;\n    dsp.edges = dsp.edges || {};\n    dom.dispatchers[dspId] = dsp;\n    data.dispatchers[dspId] = dsp;\n    //订阅调度上下线\n    if (dysub) node.send([{dispatcher: dsp}, null]);\n    \n    if (recu) {\n        Object.keys(dsp.edges).forEach(edgId => {\n            let edg = dsp.edges[edgId];\n            edg.id =edgId;\n            edg.app_id = dom.app.id;\n            edg.dom_id = dom.id;\n            edg.dsp_id = dsp.id;\n            this.fixUpEdg(edg, notNewIfNotExist, recu);\n        })\n    }\n}\n\nlet fixUpEdg = function(_edg, notNewIfNotExist, recu) {\n    if (!_edg || !_edg.id || !_edg.dom_id || !_edg.dsp_id){\n        if (_edg && _edg.id) \n            data.edges[_edg.id] = _edg;\n        return;  \n    } \n\n    let domId = _edg.dom_id;\n    let dspId = _edg.dsp_id;\n    let edgId = _edg.id;\n    let doms = data.domains;\n    let dom = doms[domId];\n    let dsps = data.dispatchers;\n    let dsp = dsps[dspId];\n    let edgs = data.edges;\n    let edg = edgs[edgId];\n    let dysub = false;\n    \n    if (!dom || !dsp) {\n        node.error(\"edg 没有租户或DSP:\" + edgId);\n        return;\n    };\n    \n    if (!edg) {\n        if (notNewIfNotExist)\n            edg = _edg;\n        else\n            edg = Object.assign({}, _edg);\n        dysub = true;\n    } else {\n        edg = Object.assign(edg, _edg);\n    }\n    \n    edg.id = edgId;\n    edg.dispatcher = dsp;\n    edg.devices = edg.devices || {};\n    dsp.edges[edgId] = edg;\n    dom.edges[edgId] = edg;\n    data.edges[edgId] = edg;\n    \n    //订阅边缘上下线\n    if (dysub) node.send([{edge: edg}, null])\n}\n\nlet fixUpDev = function(_dev, notNewIfNotExist) {\n    if (!_dev || !_dev.id || !_dev.dom_id) {\n        if (_dev && _dev.id)\n            data.devices[_dev.id] = _dev;\n        return;\n    }\n\n    let devId = _dev.id;\n    let domId = _dev.dom_id;\n    let doms = data.domains;\n    let dom = doms[domId];\n    let devs = data.devices;\n    let dev = devs[devId];\n    let dysub = false;\n    \n    if (!dom) {\n        node.error(\"dev没有租户:\" + devId);\n        return;\n    };\n    \n    if (!dev) {\n        if (notNewIfNotExist)\n            dev = _dev;\n        else\n            dev = Object.assign({}, _dev);\n        dysub = true;\n    } else {\n        dev = Object.assign(dev, _dev);\n    }\n    \n    dev.id = devId;\n    dev.domain = dom;\n    dom.devices[devId] = dev;\n    data.devices[devId] = dev;\n    \n    //订阅设备上下线\n    if (dysub)  node.send([{device: dev}, null]);\n    \n}\n\nlet fixUpPlf = function(_plf, notNewIfNotExist) {\n    if (!_plf || !_plf.id) return;\n    \n    let plfId = _plf.id;\n    let plfs = data.app.platforms;\n    let dysub = false;\n    \n    let plf = plfs[plfId];\n    if (!plf) {\n        if (notNewIfNotExist)\n            plf = _plf;\n        else\n            plf = Object.assign({}, _plf);\n        dysub = true;\n    } else {\n        plf = Object.assign(plf, _plf);\n    }\n\n    plf.id = plfId;\n    plf.app = data.app;\n    plfs[plfId] = plf;\n    \n    //订阅平台上下线\n    if (dysub)  node.send([{platform: plf}, null])\n\n}\n\n\nlet fixUpData = function() {\n    let doms = data.app.domains;\n    Object.keys(doms).forEach(domId => {\n        let dom = doms[domId];\n        dom.id = domId;\n        this.fixUpDom(dom, true, true);\n        if (dom.reg_devices) {\n            regDevs = dom.reg_devices;\n            Object.keys(regDevs).forEach(devId => {\n                let val = regDevs[devId];\n                dev = {};\n                if (typeof val == \"object\" ) {\n                    dev = Object.assign(dev, val);\n                } else {\n                    dev.name = val;\n                }\n                dev.id = devId;\n                dev.app_id = dev.app_id || dom.app.id;\n                dev.dom_id = dev.dom_id || dom.id;\n                 \n                this.fixUpDev(dev, false)\n            })\n        }\n    });\n    \n    let plfs = data.app.platforms;\n    Object.keys(plfs).forEach(plfId => {\n        let plf = plfs[plfId];\n        plf.id = plfId;\n        this.fixUpPlf(plf, true);\n    })\n    \n}\n\ncommon.fixUpData = fixUpData;\ncommon.fixUpDom = fixUpDom;\ncommon.fixUpDsp = fixUpDsp;\ncommon.fixUpEdg = fixUpEdg;\ncommon.fixUpDev = fixUpDev;\ncommon.fixUpPlf = fixUpPlf;\n\ncommon.expandTopic.expand(data.ids);   \ncommon.expandTopic.expand(data.topics.subs);\ncommon.expandTopic.expand(data.topics.services);\ndata.app.id = data.ids.app;\n\ncommon.fixUpData();\ncommon.keyToObjId(data.domains);\ncommon.keyToObjId(data.dispatchers);\ncommon.keyToObjId(data.edges);\ncommon.keyToObjId(data.devices);\n\n\n\nreturn [null, {payload: data}];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 700,
        "wires": [
            [
                "806baee163cb44cc"
            ],
            [
                "1188b78d61e6e2a8",
                "6423346762c80c34",
                "984299f5f2358be9"
            ]
        ]
    },
    {
        "id": "a6a4ebf94a8b8924",
        "type": "switch",
        "z": "7c7a09edf982e2f4",
        "name": "是否激活数据？",
        "property": "IOT_ENABLE_DIO",
        "propertyType": "env",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 160,
        "y": 180,
        "wires": [
            [
                "c0624055eec65ac4"
            ],
            []
        ]
    },
    {
        "id": "c0624055eec65ac4",
        "type": "function",
        "z": "7c7a09edf982e2f4",
        "name": "配置文件",
        "func": "\nreturn {\n    filename: env.get(\"IOT_CONFIG_FILE\")\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 180,
        "wires": [
            [
                "387bc8ba683df91f"
            ]
        ]
    },
    {
        "id": "874e2ff0304f3dd7",
        "type": "json",
        "z": "7c7a09edf982e2f4",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 730,
        "y": 180,
        "wires": [
            [
                "41508da4717ed53b"
            ]
        ]
    },
    {
        "id": "387bc8ba683df91f",
        "type": "file in",
        "z": "7c7a09edf982e2f4",
        "name": "读配置文件",
        "filename": "",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 570,
        "y": 180,
        "wires": [
            [
                "874e2ff0304f3dd7"
            ]
        ]
    },
    {
        "id": "683f9c514d3dc3f8",
        "type": "change",
        "z": "7c7a09edf982e2f4",
        "name": "version",
        "rules": [
            {
                "t": "set",
                "p": "version",
                "pt": "global",
                "to": "0.0.1",
                "tot": "str"
            },
            {
                "t": "delete",
                "p": "data_from_file",
                "pt": "global"
            },
            {
                "t": "delete",
                "p": "data_from_db",
                "pt": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 300,
        "y": 100,
        "wires": [
            [
                "52f82eb73840e302"
            ]
        ]
    },
    {
        "id": "b1a104c8f9b78d59",
        "type": "link in",
        "z": "7c7a09edf982e2f4",
        "name": "",
        "links": [
            "13a9b4457054c058"
        ],
        "x": 175,
        "y": 500,
        "wires": [
            [
                "b02e4a662da7d59c"
            ]
        ]
    },
    {
        "id": "82d624e156acd716",
        "type": "change",
        "z": "7c7a09edf982e2f4",
        "name": "获取配置",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 580,
        "y": 340,
        "wires": [
            [
                "ac13383ff111fbcf",
                "87a29e8ed86c5747"
            ]
        ]
    },
    {
        "id": "fcb9bbaa875f8ea9",
        "type": "link out",
        "z": "7c7a09edf982e2f4",
        "name": "获取配置延迟输出",
        "mode": "link",
        "links": [
            "95f8abc4558b9fe4"
        ],
        "x": 935,
        "y": 380,
        "wires": []
    },
    {
        "id": "ac13383ff111fbcf",
        "type": "delay",
        "z": "7c7a09edf982e2f4",
        "name": "",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 780,
        "y": 380,
        "wires": [
            [
                "fcb9bbaa875f8ea9"
            ]
        ]
    },
    {
        "id": "1924f7fd90ef314c",
        "type": "function",
        "z": "7c7a09edf982e2f4",
        "name": "获取数据节点",
        "func": "let config = msg.payload;\nlet data = config.dataio;\nif (data && data.global) {\n    let _msg = {\n        payload: data.global\n    };\n    return [null, _msg]\n} else {\n    return [{}, null]\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 340,
        "wires": [
            [
                "82d624e156acd716"
            ],
            [
                "4754da03d64fad4b",
                "fe709efeac771813"
            ]
        ]
    },
    {
        "id": "fe709efeac771813",
        "type": "debug",
        "z": "7c7a09edf982e2f4",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 350,
        "y": 280,
        "wires": []
    },
    {
        "id": "806baee163cb44cc",
        "type": "function",
        "z": "7c7a09edf982e2f4",
        "name": "订阅上下线主题",
        "func": "let data = global.get(\"data\");\nlet common = global.get(\"common\");\nlet topic;\nlet ids = {};\nif (msg.dispatcher) {\n    topic = data.topics.dysubs.dsp_evt_status;\n    ids.dsp = msg.dispatcher.id;\n}\n\nif (msg.edge) {\n    topic = data.topics.dysubs.edg_evt_status;\n    ids.edg = msg.edge.id;    \n}\n\nif (msg.device) {\n    topic = data.topics.dysubs.dev_evt_status;\n    ids.dev = msg.device.id;    \n}\n\nif (msg.platform) {\n    topic = data.topics.dysubs.plf_evt_status;\n    ids.plf = msg.platform.id;      \n}\n\nif (topic) {\n    topic = common.expandTopic.expandStr(topic, ids);\n\n    node.send({\n            action: \"unsubscribe\",\n            topic: topic\n    })\n    \n    node.send({\n            action: \"subscribe\",\n            topic: topic\n    })\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 680,
        "wires": [
            [
                "c681ca1c09bbf5eb",
                "be8dee420468e410"
            ]
        ]
    },
    {
        "id": "c681ca1c09bbf5eb",
        "type": "link out",
        "z": "7c7a09edf982e2f4",
        "name": "订阅上下线主题输出",
        "mode": "link",
        "links": [
            "1fbea7baf2a0c450"
        ],
        "x": 935,
        "y": 680,
        "wires": []
    },
    {
        "id": "be8dee420468e410",
        "type": "debug",
        "z": "7c7a09edf982e2f4",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "topic",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1000,
        "y": 580,
        "wires": []
    },
    {
        "id": "35ef90ce6fa2dfd3",
        "type": "link out",
        "z": "7c7a09edf982e2f4",
        "name": "刷新数据",
        "mode": "link",
        "links": [
            "46c7be7c38c2cddc"
        ],
        "x": 935,
        "y": 760,
        "wires": []
    },
    {
        "id": "984299f5f2358be9",
        "type": "delay",
        "z": "7c7a09edf982e2f4",
        "name": "1秒后刷新数据",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 580,
        "y": 760,
        "wires": [
            [
                "35ef90ce6fa2dfd3",
                "109b0482f3439c03"
            ]
        ]
    },
    {
        "id": "109b0482f3439c03",
        "type": "delay",
        "z": "7c7a09edf982e2f4",
        "name": "3秒后上线通知",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 780,
        "y": 800,
        "wires": [
            [
                "9505a529442793c0"
            ]
        ]
    },
    {
        "id": "9505a529442793c0",
        "type": "link out",
        "z": "7c7a09edf982e2f4",
        "name": "上线通知输出",
        "mode": "link",
        "links": [
            "cac9b036a1b34134"
        ],
        "x": 935,
        "y": 800,
        "wires": []
    },
    {
        "id": "0666cb29a70a9804",
        "type": "function",
        "z": "7c7a09edf982e2f4",
        "name": "GUID函数",
        "func": "let data = global.get(\"data\");\nlet common = global.get(\"common\");\n   \nlet guid = function(len, start) {\n    let result = 'xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx'.replace(/[xy]/g, function(c){\n        let r = Math.random()*16|0;\n        let v = c == 'x' ? r : (r&0x3|0x8);\n        return v.toString(16);\n    })\n    len = len ? len : result.length;\n    return result.substr(start, len);\n}\n\ncommon.guid = guid;\n\nreturn {payload: data};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 420,
        "wires": [
            [
                "fe1774a6b4d68308"
            ]
        ]
    },
    {
        "id": "87a29e8ed86c5747",
        "type": "link out",
        "z": "7c7a09edf982e2f4",
        "name": "获取配置输出",
        "mode": "link",
        "links": [
            "fbd24133642ac624"
        ],
        "x": 935,
        "y": 340,
        "wires": []
    },
    {
        "id": "41508da4717ed53b",
        "type": "change",
        "z": "7c7a09edf982e2f4",
        "name": "来源文件",
        "rules": [
            {
                "t": "set",
                "p": "data_from_file",
                "pt": "global",
                "to": "1",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 140,
        "y": 300,
        "wires": [
            [
                "1924f7fd90ef314c"
            ]
        ]
    },
    {
        "id": "b02e4a662da7d59c",
        "type": "change",
        "z": "7c7a09edf982e2f4",
        "name": "来源数据库",
        "rules": [
            {
                "t": "set",
                "p": "data_from_db",
                "pt": "global",
                "to": "1",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 150,
        "y": 380,
        "wires": [
            [
                "1924f7fd90ef314c"
            ]
        ]
    },
    {
        "id": "ae41ab375db2ecf6",
        "type": "function",
        "z": "7c7a09edf982e2f4",
        "name": "事件触发器",
        "func": "let EventEmitter = {\n  _events: {} ,\n\n  on: function(event, cb) {\n    const query = this._events[event] || [] \n    query.push(cb)  \n    this._events[event] = query \n    return this\n  },\n\n  off: function(event, cb) {\n    const query = this._events[event] \n    this._events[event] = query && query.filter(fn => fn !== cb) \n    return this\n  },\n\n\n  emit: function(...args) {\n    const query = this._events[args[0]],  params = Array.prototype.slice.call(args, 1) \n    query.forEach(fn => {\n      fn(...params)\n    })\n    return this\n  },\n\n\n  once: function(event, cb) {\n    const wrapperFun = (...args) => {\n      cb(...args) \n      this.off(event, wrapperFun) \n    }\n    this.on(event, wrapperFun) \n    return this\n  }\n}\n\nlet common = global.get(\"common\");\ncommon.eventEmitter = EventEmitter;\nreturn {payload: common};\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 660,
        "wires": [
            [
                "fc89e9165d2ffb12"
            ]
        ]
    },
    {
        "id": "3117ede74b04d9c4",
        "type": "comment",
        "z": "63bcc9db2b38df75",
        "name": "MG数据查询",
        "info": "",
        "x": 150,
        "y": 80,
        "wires": []
    },
    {
        "id": "95f8abc4558b9fe4",
        "type": "link in",
        "z": "63bcc9db2b38df75",
        "name": "获取配置数据",
        "links": [
            "fcb9bbaa875f8ea9"
        ],
        "x": 105,
        "y": 180,
        "wires": [
            [
                "148e5a4f336db704"
            ]
        ]
    },
    {
        "id": "148e5a4f336db704",
        "type": "function",
        "z": "63bcc9db2b38df75",
        "name": "获取配置数据",
        "func": "let _msg = {};\n_msg.collection = \"ndiot_config\";\n_msg.operation = \"find\";\n_msg.payload = {\n    \"dataio.global.data.app.id\": env.get(\"IOT_APP_ID\")\n}\n\n_msg._topic = msg._topic || \"find_ndiot_config\";\n_msg._payload = msg.payload;\nreturn _msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 180,
        "wires": [
            [
                "1d7c8bf676bfd405"
            ]
        ]
    },
    {
        "id": "1d7c8bf676bfd405",
        "type": "link out",
        "z": "63bcc9db2b38df75",
        "name": "",
        "mode": "link",
        "links": [
            "9bfc8855190691e9"
        ],
        "x": 555,
        "y": 220,
        "wires": []
    },
    {
        "id": "6f39e4ac99d30a07",
        "type": "switch",
        "z": "63bcc9db2b38df75",
        "name": "MG数据返回",
        "property": "_topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "find_ndiot_config",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "find_ndiot_z2m_datafile",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "find_ndiot_domains",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "find_ndiot_dispatchers",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "find_ndiot_edges",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "find_ndiot_devices",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "find_ndiot_platforms",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "custom_find",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 8,
        "x": 270,
        "y": 600,
        "wires": [
            [
                "361c77e72a85832a"
            ],
            [
                "8f366ee3986be4d3"
            ],
            [
                "5e9291d2b6187ea4"
            ],
            [
                "627468f7c11147be"
            ],
            [
                "c609d682d722b625"
            ],
            [
                "96a28f5c17c0712b"
            ],
            [
                "b136be555d0b9756"
            ],
            [
                "605abd3b667aff19"
            ]
        ]
    },
    {
        "id": "cfdf93b3e832d7d7",
        "type": "link in",
        "z": "63bcc9db2b38df75",
        "name": "",
        "links": [
            "272546c8bfd46694"
        ],
        "x": 105,
        "y": 600,
        "wires": [
            [
                "6f39e4ac99d30a07"
            ]
        ]
    },
    {
        "id": "b22fe37d91a17773",
        "type": "debug",
        "z": "63bcc9db2b38df75",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 800,
        "wires": []
    },
    {
        "id": "13a9b4457054c058",
        "type": "link out",
        "z": "63bcc9db2b38df75",
        "name": "配置数据输出",
        "mode": "link",
        "links": [
            "b1a104c8f9b78d59"
        ],
        "x": 665,
        "y": 560,
        "wires": []
    },
    {
        "id": "361c77e72a85832a",
        "type": "function",
        "z": "63bcc9db2b38df75",
        "name": "配置数据返回",
        "func": "if (msg.payload && msg.payload[0]) {\n    return {\n        payload: msg.payload[0]\n    };\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 560,
        "wires": [
            [
                "13a9b4457054c058"
            ]
        ]
    },
    {
        "id": "d57ad9b001fdc2bc",
        "type": "link in",
        "z": "63bcc9db2b38df75",
        "name": "获取Z2M数据",
        "links": [
            "34edf26e3f576c05"
        ],
        "x": 105,
        "y": 220,
        "wires": [
            [
                "c7fa18b4bd0ac250"
            ]
        ]
    },
    {
        "id": "c7fa18b4bd0ac250",
        "type": "function",
        "z": "63bcc9db2b38df75",
        "d": true,
        "name": "获取Z2M数据",
        "func": "let _msg = {};\n_msg.collection = \"ndiot_z2m_datafile\";\n_msg.operation = \"find\";\n_msg.sort = { \"hd.tms\": -1};\n_msg.limit = 2;\n_msg.payload = {\"pld.id\": msg.payload.pld.id }\n\n_msg._topic =  msg._topic || \"find_ndiot_z2m_datafile\";\n_msg._payload = msg.payload;\nreturn _msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 220,
        "wires": [
            [
                "1d7c8bf676bfd405"
            ]
        ]
    },
    {
        "id": "8f366ee3986be4d3",
        "type": "function",
        "z": "63bcc9db2b38df75",
        "d": true,
        "name": "Z2M数据返回",
        "func": "return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 600,
        "wires": [
            [
                "d5f2a9ab871bd1fe"
            ]
        ]
    },
    {
        "id": "d5f2a9ab871bd1fe",
        "type": "link out",
        "z": "63bcc9db2b38df75",
        "name": "",
        "mode": "link",
        "links": [
            "ea899d2e95e95576"
        ],
        "x": 665,
        "y": 600,
        "wires": []
    },
    {
        "id": "4b05f49dd8af684c",
        "type": "function",
        "z": "63bcc9db2b38df75",
        "name": "获取租户数据",
        "func": "let data = global.get(\"data\");\nlet _msg = {};\n_msg.collection = \"ndiot_domains\";\n_msg.operation = \"find\";\n_msg.payload = {\n    \"app_id\": data.ids.app\n}\n\n_msg._topic =  msg._topic ||  \"find_ndiot_domains\";\n_msg._payload = msg.payload;\nreturn _msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 260,
        "wires": [
            [
                "1d7c8bf676bfd405"
            ]
        ]
    },
    {
        "id": "46c7be7c38c2cddc",
        "type": "link in",
        "z": "63bcc9db2b38df75",
        "name": "获取租户数据输入",
        "links": [
            "35ef90ce6fa2dfd3"
        ],
        "x": 105,
        "y": 260,
        "wires": [
            [
                "4b05f49dd8af684c"
            ]
        ]
    },
    {
        "id": "cc0a7e91c0aa45d3",
        "type": "inject",
        "z": "63bcc9db2b38df75",
        "name": "刷新数据",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 180,
        "y": 120,
        "wires": [
            [
                "4b05f49dd8af684c"
            ]
        ]
    },
    {
        "id": "c9ed042290e65893",
        "type": "function",
        "z": "63bcc9db2b38df75",
        "d": true,
        "name": "获取平台数据",
        "func": "let data = global.get(\"data\");\nlet _msg = {};\n_msg.collection = \"ndiot_platforms\";\n_msg.operation = \"find\";\n_msg.payload = {\n    \"app_id\": data.ids.app\n}\n\n_msg._topic =  msg._topic ||  \"find_ndiot_platforms\";\n_msg._payload = msg.payload;\nreturn _msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 420,
        "wires": [
            [
                "1d7c8bf676bfd405"
            ]
        ]
    },
    {
        "id": "9aacc904775bd744",
        "type": "link in",
        "z": "63bcc9db2b38df75",
        "name": "获取平台数据输入",
        "links": [
            "ef593130e482cb73"
        ],
        "x": 105,
        "y": 420,
        "wires": [
            [
                "c9ed042290e65893"
            ]
        ]
    },
    {
        "id": "b136be555d0b9756",
        "type": "function",
        "z": "63bcc9db2b38df75",
        "d": true,
        "name": "平台数据返回处理",
        "func": "common = global.get(\"common\");\n\nlet plfs = msg.payload;\nplfs.forEach(plf => {\n    common.fixUpPlf(plf, false, false);\n})\n\nmsg._topic = null",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "fa0a362c12abdc77",
        "type": "function",
        "z": "63bcc9db2b38df75",
        "d": true,
        "name": "获取设备数据",
        "func": "let data = global.get(\"data\");\nlet _msg = {};\n_msg.collection = \"ndiot_devices\";\n_msg.operation = \"find\";\n_msg.payload = {\n    \"app_id\": data.ids.app,\n}\n\n_msg._topic =  msg._topic ||  \"find_ndiot_devices\";\n_msg._payload = msg.payload;\nreturn _msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 380,
        "wires": [
            [
                "1d7c8bf676bfd405"
            ]
        ]
    },
    {
        "id": "ee53e76d0242e9d5",
        "type": "link in",
        "z": "63bcc9db2b38df75",
        "name": "获取设备数据输入",
        "links": [
            "6956d225725ebcfb"
        ],
        "x": 105,
        "y": 380,
        "wires": [
            [
                "fa0a362c12abdc77"
            ]
        ]
    },
    {
        "id": "1d66111cce615644",
        "type": "link in",
        "z": "63bcc9db2b38df75",
        "name": "获取调度数据输入",
        "links": [],
        "x": 105,
        "y": 300,
        "wires": [
            [
                "9da6dcd3ccd273b5"
            ]
        ]
    },
    {
        "id": "9da6dcd3ccd273b5",
        "type": "function",
        "z": "63bcc9db2b38df75",
        "d": true,
        "name": "获取调度数据",
        "func": "let data = global.get(\"data\");\nlet _msg = {};\n_msg.collection = \"ndiot_dispatchers\";\n_msg.operation = \"find\";\n_msg.payload = {\n    \"app_id\": data.ids.app\n}\n\n_msg._topic =  msg._topic ||  \"find_ndiot_dispatchers\";\n_msg._payload = msg.payload;\nreturn _msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 300,
        "wires": [
            [
                "1d7c8bf676bfd405"
            ]
        ]
    },
    {
        "id": "2b18a3e29ad392bc",
        "type": "link in",
        "z": "63bcc9db2b38df75",
        "name": "获取边缘数据输入",
        "links": [
            "d1161b505c291875"
        ],
        "x": 105,
        "y": 340,
        "wires": [
            [
                "52be2cb6349ffd94"
            ]
        ]
    },
    {
        "id": "52be2cb6349ffd94",
        "type": "function",
        "z": "63bcc9db2b38df75",
        "d": true,
        "name": "获取边缘数据",
        "func": "let data = global.get(\"data\");\nlet _msg = {};\n_msg.collection = \"ndiot_edges\";\n_msg.operation = \"find\";\n_msg.payload = {\n    \"app_id\": data.ids.app,\n}\n\n_msg._topic =  msg._topic ||  \"find_ndiot_edges\";\n_msg._payload = msg.payload;\nreturn _msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 340,
        "wires": [
            [
                "1d7c8bf676bfd405"
            ]
        ]
    },
    {
        "id": "5e9291d2b6187ea4",
        "type": "function",
        "z": "63bcc9db2b38df75",
        "name": "租户数据返回处理",
        "func": "common = global.get(\"common\");\n\nlet doms = msg.payload;\ndoms.forEach(dom => {\n    common.fixUpDom(dom, false, false);\n})\n\nmsg._topic = null\nreturn msg\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 640,
        "wires": [
            [
                "295c377cf477e68a",
                "b22fe37d91a17773"
            ]
        ]
    },
    {
        "id": "627468f7c11147be",
        "type": "function",
        "z": "63bcc9db2b38df75",
        "d": true,
        "name": "调度数据返回处理",
        "func": "let common = global.get(\"common\");\nlet dsps = msg.payload;\ndsps.forEach(dsp => {\n    common.fixUpDsp(dsp, false, false);\n})\n\nmsg._topic = null\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 680,
        "wires": [
            [
                "d1161b505c291875",
                "b22fe37d91a17773"
            ]
        ]
    },
    {
        "id": "c609d682d722b625",
        "type": "function",
        "z": "63bcc9db2b38df75",
        "d": true,
        "name": "边缘数据返回处理",
        "func": "let common = global.get(\"common\");\nlet edgs = msg.payload;\nedgs.forEach(edg => {\n    common.fixUpEdg(edg, false, false);\n})\n\nmsg._topic = null\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 720,
        "wires": [
            [
                "6956d225725ebcfb",
                "b22fe37d91a17773"
            ]
        ]
    },
    {
        "id": "96a28f5c17c0712b",
        "type": "function",
        "z": "63bcc9db2b38df75",
        "d": true,
        "name": "设备数据返回处理",
        "func": "common = global.get(\"common\");\n\nlet devs = msg.payload;\ndevs.forEach(dev => {\n    common.fixUpDev(dev, false, false);\n})\n\nmsg._topic = null\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 760,
        "wires": [
            [
                "ef593130e482cb73",
                "b22fe37d91a17773"
            ]
        ]
    },
    {
        "id": "295c377cf477e68a",
        "type": "link out",
        "z": "63bcc9db2b38df75",
        "name": "租户数据返回处理",
        "mode": "link",
        "links": [],
        "x": 665,
        "y": 640,
        "wires": []
    },
    {
        "id": "d1161b505c291875",
        "type": "link out",
        "z": "63bcc9db2b38df75",
        "name": "调度数据返回处理输出",
        "mode": "link",
        "links": [
            "2b18a3e29ad392bc"
        ],
        "x": 665,
        "y": 680,
        "wires": []
    },
    {
        "id": "6956d225725ebcfb",
        "type": "link out",
        "z": "63bcc9db2b38df75",
        "name": "边缘数据返回处理",
        "mode": "link",
        "links": [
            "ee53e76d0242e9d5"
        ],
        "x": 665,
        "y": 720,
        "wires": []
    },
    {
        "id": "ef593130e482cb73",
        "type": "link out",
        "z": "63bcc9db2b38df75",
        "name": "设备数据返回处理",
        "mode": "link",
        "links": [
            "9aacc904775bd744"
        ],
        "x": 665,
        "y": 760,
        "wires": []
    },
    {
        "id": "3e267f77b5d2211a",
        "type": "function",
        "z": "63bcc9db2b38df75",
        "name": "自定义查询数据",
        "func": "msg.operation = msg.operation || \"find\";\nmsg._topic = msg._topic ||  \"custom_find\";\nmsg._payload = msg._payload || msg.payload;\nmsg._msg = msg._msg || msg;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 460,
        "wires": [
            [
                "1d7c8bf676bfd405"
            ]
        ]
    },
    {
        "id": "800621f0c9f46a27",
        "type": "link in",
        "z": "63bcc9db2b38df75",
        "name": "自定义查询数据输入",
        "links": [
            "396f6c335713be25",
            "d40518fc1ce83c76",
            "b48d540577e24698",
            "a3e69ee53f0edc11"
        ],
        "x": 105,
        "y": 460,
        "wires": [
            [
                "3e267f77b5d2211a"
            ]
        ]
    },
    {
        "id": "b41b12708ccf38fc",
        "type": "link out",
        "z": "63bcc9db2b38df75",
        "name": "自定义查询数据输出",
        "mode": "link",
        "links": [
            "8781379974d5e7ea",
            "889ecc71f326a9bd",
            "6b0382863a343132"
        ],
        "x": 665,
        "y": 840,
        "wires": []
    },
    {
        "id": "605abd3b667aff19",
        "type": "function",
        "z": "63bcc9db2b38df75",
        "name": "自定义查询返回处理",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 840,
        "wires": [
            [
                "b41b12708ccf38fc"
            ]
        ]
    },
    {
        "id": "9bfc8855190691e9",
        "type": "link in",
        "z": "25fe735d371c65bb",
        "name": "查询数据输入",
        "links": [
            "1d7c8bf676bfd405"
        ],
        "x": 195,
        "y": 260,
        "wires": [
            [
                "a87fabeecac73db8",
                "0a9518d032f2664b"
            ]
        ]
    },
    {
        "id": "272546c8bfd46694",
        "type": "link out",
        "z": "25fe735d371c65bb",
        "name": "查询数据返回",
        "mode": "link",
        "links": [
            "cfdf93b3e832d7d7"
        ],
        "x": 925,
        "y": 260,
        "wires": []
    },
    {
        "id": "53e7a294eeb90f43",
        "type": "link in",
        "z": "25fe735d371c65bb",
        "name": "更新数据输入",
        "links": [
            "0cb53f3e7d0bd8cb",
            "863a57772c22291c",
            "0ca0227de6c58e42"
        ],
        "x": 195,
        "y": 340,
        "wires": [
            [
                "46f6c14ebaa1abda",
                "3e6fb8f12a7e5395"
            ]
        ]
    },
    {
        "id": "3960aeb5f2e90e50",
        "type": "function",
        "z": "25fe735d371c65bb",
        "name": "获取环境连接",
        "func": "let data = global.get(\"data\");\n\nlet podname = env.get(\"POD_NAME\") || \"\";\nlet name = \"develop\";\nif (podname.indexOf(\"-preproduct-\") >=0 )\n    name = \"preproduct\";\nelse if (podname.indexOf(\"-product-\") >=0 )\n    name = \"product\";\nelse if (podname.indexOf(\"-test-\") >=0 )\n    name = \"test\";\n\n\nlet mgUrl = data.mongodb[name] || data.mongodb[develop];\n\nreturn {\n    action: \"connect\",\n    url: mgUrl.url\n};\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 160,
        "wires": [
            [
                "46f6c14ebaa1abda",
                "a87fabeecac73db8"
            ]
        ]
    },
    {
        "id": "fbd24133642ac624",
        "type": "link in",
        "z": "25fe735d371c65bb",
        "name": "",
        "links": [
            "87a29e8ed86c5747"
        ],
        "x": 195,
        "y": 160,
        "wires": [
            [
                "3960aeb5f2e90e50"
            ]
        ]
    },
    {
        "id": "46f6c14ebaa1abda",
        "type": "nd-mg-out",
        "z": "25fe735d371c65bb",
        "mongodb": "ddc3fe4a88f96adf",
        "name": "nd-mg-out",
        "collection": "",
        "payonly": true,
        "upsert": true,
        "multi": false,
        "operation": "update",
        "x": 670,
        "y": 340,
        "wires": []
    },
    {
        "id": "a87fabeecac73db8",
        "type": "nd-mg-in",
        "z": "25fe735d371c65bb",
        "mongodb": "ddc3fe4a88f96adf",
        "name": "nd-mg-in",
        "collection": "",
        "operation": "find",
        "x": 660,
        "y": 260,
        "wires": [
            [
                "272546c8bfd46694",
                "0a9518d032f2664b"
            ]
        ]
    },
    {
        "id": "0a9518d032f2664b",
        "type": "debug",
        "z": "25fe735d371c65bb",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 320,
        "wires": []
    },
    {
        "id": "e8afb74a0a312c24",
        "type": "function",
        "z": "25fe735d371c65bb",
        "name": "更新设备配置数据",
        "func": "let data = global.get(\"data\");\n\nlet pld = msg.payload;\n\nlet _msg = {};\n_msg.collection = \"ndiot_devices\";\n_msg.operation = \"update\";\n\n_msg.payload = {$set: pld}\n_msg.query = {\n    \"id\": pld.id\n}\n\n_msg._topic =  msg._topic ||  \"upsert_ndiot_devices\";\n_msg._payload = msg.payload;\nreturn _msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 760,
        "wires": [
            [
                "46f6c14ebaa1abda"
            ]
        ]
    },
    {
        "id": "1a8afea825a81942",
        "type": "inject",
        "z": "25fe735d371c65bb",
        "name": "",
        "props": [
            {
                "p": "payload.id",
                "v": "0x00158d000353c53f",
                "vt": "str"
            },
            {
                "p": "payload.pid",
                "v": "ESP8266x005dce30",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 760,
        "wires": [
            [
                "e8afb74a0a312c24"
            ]
        ]
    },
    {
        "id": "3e6fb8f12a7e5395",
        "type": "debug",
        "z": "25fe735d371c65bb",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 350,
        "y": 400,
        "wires": []
    },
    {
        "id": "964acd93ebf1e118",
        "type": "http in",
        "z": "b7b9b4f87ca81b1c",
        "name": "",
        "url": "/shadows_get_plugins",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 250,
        "y": 520,
        "wires": [
            [
                "ce1ccbb4bb9bdcf5"
            ]
        ]
    },
    {
        "id": "805382e936c84350",
        "type": "http response",
        "z": "b7b9b4f87ca81b1c",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1130,
        "y": 720,
        "wires": []
    },
    {
        "id": "01576f8d65769792",
        "type": "function",
        "z": "b7b9b4f87ca81b1c",
        "name": "ND--20200609EVI",
        "func": "msg.collection = \"ndiot_devices\";\nmsg.operation = \"find\";\nmsg.payload = {\n    \"app_id\": \"ndiot\",\n    \"dom_id\": \"test\"\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 100,
        "wires": [
            [
                "b48d540577e24698"
            ]
        ]
    },
    {
        "id": "b48d540577e24698",
        "type": "link out",
        "z": "b7b9b4f87ca81b1c",
        "name": "",
        "mode": "link",
        "links": [
            "800621f0c9f46a27"
        ],
        "x": 1325,
        "y": 280,
        "wires": []
    },
    {
        "id": "889ecc71f326a9bd",
        "type": "link in",
        "z": "b7b9b4f87ca81b1c",
        "name": "",
        "links": [
            "b41b12708ccf38fc"
        ],
        "x": 155,
        "y": 720,
        "wires": [
            [
                "9421c0903de71a95"
            ]
        ]
    },
    {
        "id": "d9487b8639a82be2",
        "type": "function",
        "z": "b7b9b4f87ca81b1c",
        "name": "/shadows_get_devices",
        "func": "return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 680,
        "wires": [
            [
                "805382e936c84350",
                "40463dd668190178"
            ]
        ]
    },
    {
        "id": "9421c0903de71a95",
        "type": "switch",
        "z": "b7b9b4f87ca81b1c",
        "name": "",
        "property": "req.url",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": "/shadows_get_devices",
                "vt": "str",
                "case": false
            },
            {
                "t": "regex",
                "v": "/shadows_get_plugins",
                "vt": "str",
                "case": false
            },
            {
                "t": "regex",
                "v": "/shadows_get_device_config",
                "vt": "str",
                "case": false
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 270,
        "y": 720,
        "wires": [
            [
                "d9487b8639a82be2"
            ],
            [
                "0fc3f1b496539a20"
            ],
            [
                "655170033a30d40c"
            ]
        ]
    },
    {
        "id": "98a36bcacf2ba435",
        "type": "function",
        "z": "b7b9b4f87ca81b1c",
        "name": "shadows_get_plugins",
        "func": "msg.collection = \"ndiot_plugins\";\nmsg.operation = \"find\";\ndelete msg.payload\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 280,
        "wires": [
            [
                "b48d540577e24698"
            ]
        ]
    },
    {
        "id": "0fc3f1b496539a20",
        "type": "function",
        "z": "b7b9b4f87ca81b1c",
        "name": "/shadows_get_plugins",
        "func": "    return msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 720,
        "wires": [
            [
                "805382e936c84350",
                "40463dd668190178"
            ]
        ]
    },
    {
        "id": "40463dd668190178",
        "type": "debug",
        "z": "b7b9b4f87ca81b1c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "_payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 800,
        "wires": []
    },
    {
        "id": "4d63e449837668dc",
        "type": "switch",
        "z": "b7b9b4f87ca81b1c",
        "name": "shadows_get_devices",
        "property": "payload.pld.edg_id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "ndiot-edg-test",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ndiot-edg-nd",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ndiot-plf-bfy",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ndiot-plf-ndv1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ND--20200609EVI",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 6,
        "x": 740,
        "y": 180,
        "wires": [
            [
                "01576f8d65769792"
            ],
            [
                "5d46a3f21447466d"
            ],
            [
                "6f201eb39e35c7e9"
            ],
            [
                "6f201eb39e35c7e9"
            ],
            [
                "41628a9d98307655"
            ],
            [
                "41628a9d98307655"
            ]
        ]
    },
    {
        "id": "97c78617c67cf130",
        "type": "http in",
        "z": "b7b9b4f87ca81b1c",
        "name": "",
        "url": "/shadows_get_devices",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 260,
        "y": 480,
        "wires": [
            [
                "aa94c790aefc2954"
            ]
        ]
    },
    {
        "id": "5d46a3f21447466d",
        "type": "function",
        "z": "b7b9b4f87ca81b1c",
        "name": "ndiot-edg-nd",
        "func": "msg.collection = \"ndiot_devices\";\nmsg.operation = \"find\";\nmsg.payload = {\n    \"app_id\": \"ndiot\",\n    \"dom_id\": \"nd\"\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 140,
        "wires": [
            [
                "b48d540577e24698"
            ]
        ]
    },
    {
        "id": "d2c25d03779c3175",
        "type": "http in",
        "z": "b7b9b4f87ca81b1c",
        "name": "",
        "url": "/shadows_set_device_config",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 270,
        "y": 600,
        "wires": [
            [
                "805382e936c84350",
                "b49fc7df13c818f2"
            ]
        ]
    },
    {
        "id": "d1aafadeee392082",
        "type": "function",
        "z": "b7b9b4f87ca81b1c",
        "name": "更新设备配置数据",
        "func": "let data = global.get(\"data\");\n\nlet pld = msg.payload;\n\nlet _msg = {};\n_msg.collection = \"ndiot_device_config\";\n_msg.operation = \"update\";\n\n_msg.payload = pld;\n_msg.query = {\n    \"id\": pld.id\n}\n\n_msg._topic =  msg._topic ||  \"upsert_ndiot_device_config\";\n_msg._payload = msg.payload;\nreturn _msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 520,
        "wires": [
            [
                "863a57772c22291c"
            ]
        ]
    },
    {
        "id": "863a57772c22291c",
        "type": "link out",
        "z": "b7b9b4f87ca81b1c",
        "name": "更新数据",
        "mode": "link",
        "links": [
            "53e7a294eeb90f43"
        ],
        "x": 1325,
        "y": 360,
        "wires": []
    },
    {
        "id": "e262446a5245cc17",
        "type": "http in",
        "z": "b7b9b4f87ca81b1c",
        "name": "",
        "url": "/shadows_get_device_config",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 280,
        "y": 560,
        "wires": [
            [
                "430e140195396d07"
            ]
        ]
    },
    {
        "id": "430e140195396d07",
        "type": "function",
        "z": "b7b9b4f87ca81b1c",
        "name": "转换",
        "func": "msg.payload = {pld: msg.payload}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 560,
        "wires": [
            [
                "eca3cb583eef8165"
            ]
        ]
    },
    {
        "id": "655170033a30d40c",
        "type": "function",
        "z": "b7b9b4f87ca81b1c",
        "name": "/shadows_get_device_config",
        "func": "    return msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 760,
        "wires": [
            [
                "805382e936c84350",
                "40463dd668190178"
            ]
        ]
    },
    {
        "id": "6f201eb39e35c7e9",
        "type": "function",
        "z": "b7b9b4f87ca81b1c",
        "name": "ndiot-plf",
        "func": "msg.collection = \"ndiot_devices\";\nmsg.operation = \"find\";\nmsg.payload = {\n    \"app_id\": \"ndiot\"\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 180,
        "wires": [
            [
                "b48d540577e24698"
            ]
        ]
    },
    {
        "id": "41628a9d98307655",
        "type": "function",
        "z": "b7b9b4f87ca81b1c",
        "name": "获取区域设备",
        "func": "let data = global.get(\"data\");\nlet doms = data.domains;\nlet edg_id = msg.payload.pld.edg_id;\n\nlet dom_ids = []\nObject.values(doms).forEach(dom => {\n    if (dom.attrs.edg_id == edg_id) {\n        dom_ids.push({dom_id: dom.id})\n    }\n})\nif (dom_ids.length) { \n    msg.collection = \"ndiot_devices\";\n    msg.operation = \"find\";\n    msg.payload = {\n        app_id: \"ndiot\",\n        $or: dom_ids\n    }\n    \n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 220,
        "wires": [
            [
                "b48d540577e24698"
            ]
        ]
    },
    {
        "id": "6a24c8d23c7ac517",
        "type": "link in",
        "z": "b7b9b4f87ca81b1c",
        "name": "shadows_get_devices输入",
        "links": [
            "f01ae5911ec33e8e"
        ],
        "x": 305,
        "y": 180,
        "wires": [
            [
                "4d63e449837668dc"
            ]
        ]
    },
    {
        "id": "f01ae5911ec33e8e",
        "type": "link out",
        "z": "b7b9b4f87ca81b1c",
        "name": "",
        "mode": "link",
        "links": [
            "6a24c8d23c7ac517"
        ],
        "x": 705,
        "y": 480,
        "wires": []
    },
    {
        "id": "0d88ca3244a7b81a",
        "type": "link in",
        "z": "b7b9b4f87ca81b1c",
        "name": "shadows_get_plugins输入",
        "links": [
            "ecbc8eef7286fb2a"
        ],
        "x": 305,
        "y": 280,
        "wires": [
            [
                "98a36bcacf2ba435"
            ]
        ]
    },
    {
        "id": "ecbc8eef7286fb2a",
        "type": "link out",
        "z": "b7b9b4f87ca81b1c",
        "name": "",
        "mode": "link",
        "links": [
            "0d88ca3244a7b81a"
        ],
        "x": 705,
        "y": 520,
        "wires": []
    },
    {
        "id": "ae1bf2d6a4d14fc1",
        "type": "link in",
        "z": "b7b9b4f87ca81b1c",
        "name": "shadows_get_device_config输入",
        "links": [
            "eca3cb583eef8165"
        ],
        "x": 305,
        "y": 320,
        "wires": [
            [
                "d1258f2d5b91d557"
            ]
        ]
    },
    {
        "id": "eca3cb583eef8165",
        "type": "link out",
        "z": "b7b9b4f87ca81b1c",
        "name": "",
        "mode": "link",
        "links": [
            "ae1bf2d6a4d14fc1"
        ],
        "x": 705,
        "y": 560,
        "wires": []
    },
    {
        "id": "d1258f2d5b91d557",
        "type": "function",
        "z": "b7b9b4f87ca81b1c",
        "name": "shadows_get_device_config",
        "func": "msg.collection = \"ndiot_device_config\";\nmsg.operation = \"find\";\nmsg.payload = {\n    id: msg.payload.pld.id\n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 320,
        "wires": [
            [
                "b48d540577e24698"
            ]
        ]
    },
    {
        "id": "aa94c790aefc2954",
        "type": "function",
        "z": "b7b9b4f87ca81b1c",
        "name": "转换",
        "func": "msg.payload = {pld: msg.payload}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 480,
        "wires": [
            [
                "f01ae5911ec33e8e",
                "5c51603785e22b20"
            ]
        ]
    },
    {
        "id": "ce1ccbb4bb9bdcf5",
        "type": "function",
        "z": "b7b9b4f87ca81b1c",
        "name": "转换",
        "func": "msg.payload = {pld: msg.payload}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 520,
        "wires": [
            [
                "ecbc8eef7286fb2a"
            ]
        ]
    },
    {
        "id": "e2ecf287befb3f12",
        "type": "function",
        "z": "b7b9b4f87ca81b1c",
        "name": "shadows_set_device_config",
        "func": "let data = global.get(\"data\");\n\nlet pld = msg.payload.pld;\n\nlet _msg = {};\n_msg.collection = \"ndiot_device_config\";\n_msg.operation = \"update\";\n\n_msg.payload = pld;\n_msg.query = {\n    \"id\": pld.id\n}\n\n_msg._topic =  msg._topic ||  \"upsert_ndiot_device_config\";\n_msg._payload = msg.payload;\nreturn _msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 360,
        "wires": [
            [
                "863a57772c22291c"
            ]
        ]
    },
    {
        "id": "a65f5f25c0aa9598",
        "type": "link in",
        "z": "b7b9b4f87ca81b1c",
        "name": "shadows_set_device_config输入",
        "links": [
            "b2b364ab34e87de8"
        ],
        "x": 305,
        "y": 360,
        "wires": [
            [
                "e2ecf287befb3f12"
            ]
        ]
    },
    {
        "id": "b49fc7df13c818f2",
        "type": "function",
        "z": "b7b9b4f87ca81b1c",
        "name": "转换",
        "func": "msg.payload = {pld: msg.payload}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 600,
        "wires": [
            [
                "b2b364ab34e87de8"
            ]
        ]
    },
    {
        "id": "b2b364ab34e87de8",
        "type": "link out",
        "z": "b7b9b4f87ca81b1c",
        "name": "",
        "mode": "link",
        "links": [
            "a65f5f25c0aa9598"
        ],
        "x": 705,
        "y": 600,
        "wires": []
    },
    {
        "id": "6b0382863a343132",
        "type": "link in",
        "z": "b7b9b4f87ca81b1c",
        "name": "",
        "links": [
            "b41b12708ccf38fc"
        ],
        "x": 155,
        "y": 1000,
        "wires": [
            [
                "e1d1581ff7db15d9"
            ]
        ]
    },
    {
        "id": "e1d1581ff7db15d9",
        "type": "switch",
        "z": "b7b9b4f87ca81b1c",
        "name": "",
        "property": "_payload.hd.entry.id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "shadows_get_devices",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "shadows_get_plugins",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "shadows_get_device_config",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 270,
        "y": 1000,
        "wires": [
            [
                "84bc3ebc8365ea38"
            ],
            [
                "84bc3ebc8365ea38"
            ],
            [
                "84bc3ebc8365ea38"
            ],
            [
                "d2c7f9872cce023a",
                "d930fd01a2ee311e"
            ]
        ]
    },
    {
        "id": "84bc3ebc8365ea38",
        "type": "function",
        "z": "b7b9b4f87ca81b1c",
        "name": "数据返回",
        "func": "let _hd = msg._payload.hd;\nlet payload = {\n    hd: {\n        to: _hd.from,\n        entry: _hd.entry,\n        sid: _hd.sid,\n        stp: 1\n    },\n    pld: msg.payload\n}\n\nreturn {payload: payload};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 1000,
        "wires": [
            [
                "54a97af839ce4ad7"
            ]
        ]
    },
    {
        "id": "54a97af839ce4ad7",
        "type": "link out",
        "z": "b7b9b4f87ca81b1c",
        "name": "数据返回输出",
        "mode": "link",
        "links": [
            "77a6699fe0159bd7"
        ],
        "x": 695,
        "y": 1000,
        "wires": []
    },
    {
        "id": "f64765ee0e62dc76",
        "type": "switch",
        "z": "b7b9b4f87ca81b1c",
        "name": "数据服务",
        "property": "payload.hd.entry.id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "shadows_get_devices",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "shadows_get_plugins",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "shadows_get_device_config",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "shadows_set_device_config",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 420,
        "y": 100,
        "wires": [
            [
                "4d63e449837668dc"
            ],
            [
                "98a36bcacf2ba435"
            ],
            [
                "d1258f2d5b91d557"
            ],
            [
                "e2ecf287befb3f12"
            ]
        ]
    },
    {
        "id": "73816a2e289ac11e",
        "type": "link in",
        "z": "b7b9b4f87ca81b1c",
        "name": "数据服务输入",
        "links": [
            "01dd6d9e7dbdbe96"
        ],
        "x": 305,
        "y": 100,
        "wires": [
            [
                "f64765ee0e62dc76"
            ]
        ]
    },
    {
        "id": "5c51603785e22b20",
        "type": "debug",
        "z": "b7b9b4f87ca81b1c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 870,
        "y": 440,
        "wires": []
    },
    {
        "id": "d2c7f9872cce023a",
        "type": "function",
        "z": "b7b9b4f87ca81b1c",
        "name": "事件回调",
        "func": "let common = global.get(\"common\");\nlet sid = msg._msg.sid;\ncommon.eventEmitter.emit(sid, msg);\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 1060,
        "wires": [
            []
        ]
    },
    {
        "id": "d930fd01a2ee311e",
        "type": "debug",
        "z": "b7b9b4f87ca81b1c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "_msg",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 290,
        "y": 1120,
        "wires": []
    },
    {
        "id": "7ac83b1b92988b8b",
        "type": "mqtt in",
        "z": "e3c37262fcb472bd",
        "name": "北向输出订阅",
        "topic": "",
        "qos": "2",
        "datatype": "json",
        "broker": "790bcfc072decbef",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 1,
        "x": 550,
        "y": 380,
        "wires": [
            [
                "6f19c62b466942fa"
            ]
        ]
    },
    {
        "id": "805c656735b3ae6b",
        "type": "function",
        "z": "e3c37262fcb472bd",
        "name": "北向设备入网订阅",
        "func": "let data = global.get(\"data\");\n\nlet id = data.ids.edg;\nlet topics = [\n    \"0/0/dev/+/0/0/evt/device_joined\",\n    \"0/0/dev/+/0/0/evt/device_leave\",\n    \"0/0/dev/+/0/0/evt/device_interview\",\n    ]\nnode.send({\n        action: \"subscribe\",\n        topic: topics\n})\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 380,
        "wires": [
            [
                "7ac83b1b92988b8b"
            ]
        ]
    },
    {
        "id": "6f384d97e4e51060",
        "type": "link in",
        "z": "e3c37262fcb472bd",
        "name": "连接输入",
        "links": [
            "1188b78d61e6e2a8"
        ],
        "x": 185,
        "y": 320,
        "wires": [
            [
                "dcfea36eedb582e7"
            ]
        ]
    },
    {
        "id": "dcfea36eedb582e7",
        "type": "function",
        "z": "e3c37262fcb472bd",
        "name": "北向连接",
        "func": "let data = global.get(\"data\");\n\nmsg = {};\nmsg.action = \"connect\";\nmsg.broker = {\n    autoConnect: true,\n    cleansession: false,\n    force: false\n}\nObject.assign(msg.broker, data.shadows.mqtt.north.broker);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 320,
        "wires": [
            [
                "fda2603dd54b96c0"
            ]
        ]
    },
    {
        "id": "fda2603dd54b96c0",
        "type": "function",
        "z": "e3c37262fcb472bd",
        "name": "north_output",
        "func": "let common = global.get(\"common\");\n\nmsg.broker.clientid = \"north_output_\" + common.guid(8)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 320,
        "wires": [
            [
                "805c656735b3ae6b",
                "7ac83b1b92988b8b"
            ]
        ]
    },
    {
        "id": "c44e0a47dc98d56c",
        "type": "debug",
        "z": "e3c37262fcb472bd",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 320,
        "wires": []
    },
    {
        "id": "3d4e67c7e0a7f6be",
        "type": "function",
        "z": "e3c37262fcb472bd",
        "name": "更新设备数据",
        "func": "let data = global.get(\"data\");\n\nlet hd = msg.payload.hd;\nlet pld = Object.assign({}, msg.payload.pld);\nif (hd.entry.id == \"device_leave\") {\n    pld.pid = null;\n    pld.dom_id = null;\n}\n\nlet _msg = {};\n_msg.collection = \"ndiot_devices\";\n_msg.operation = \"update\";\n\n_msg.payload = {$set: pld};\n_msg.query = {\n    \"id\": pld.id\n}\n\n_msg._topic =  msg._topic ||  \"upsert_ndiot_devices\";\n_msg._payload = msg.payload;\nreturn _msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 380,
        "wires": [
            [
                "0ca0227de6c58e42",
                "c44e0a47dc98d56c"
            ]
        ]
    },
    {
        "id": "6f19c62b466942fa",
        "type": "switch",
        "z": "e3c37262fcb472bd",
        "name": "",
        "property": "payload.hd.entry.id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "device_joined",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "device_interview",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "device_leave",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 730,
        "y": 380,
        "wires": [
            [
                "3d4e67c7e0a7f6be",
                "d7dcb0b4081c919c"
            ],
            [
                "3d4e67c7e0a7f6be",
                "d7dcb0b4081c919c"
            ],
            [
                "3d4e67c7e0a7f6be",
                "d7dcb0b4081c919c"
            ]
        ]
    },
    {
        "id": "0ca0227de6c58e42",
        "type": "link out",
        "z": "e3c37262fcb472bd",
        "name": "更新设备数据",
        "mode": "link",
        "links": [
            "53e7a294eeb90f43"
        ],
        "x": 1145,
        "y": 380,
        "wires": []
    },
    {
        "id": "5c3bc250fbfc485b",
        "type": "link in",
        "z": "e3c37262fcb472bd",
        "name": "连接输入",
        "links": [
            "1188b78d61e6e2a8"
        ],
        "x": 185,
        "y": 100,
        "wires": [
            [
                "eb02a4bcd7e97a67"
            ]
        ]
    },
    {
        "id": "eb02a4bcd7e97a67",
        "type": "function",
        "z": "e3c37262fcb472bd",
        "name": "南向连接",
        "func": "let data = global.get(\"data\");\n\nmsg = {};\nmsg.action = \"connect\";\nmsg.broker = {\n    autoConnect: true,\n    cleansession: false,\n    force: false\n}\nObject.assign(msg.broker, data.shadows.mqtt.south.broker);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 100,
        "wires": [
            [
                "6727b1ee93e049d4",
                "dd26e09ac2442b2b"
            ]
        ]
    },
    {
        "id": "6727b1ee93e049d4",
        "type": "function",
        "z": "e3c37262fcb472bd",
        "name": "south_output",
        "func": "let common = global.get(\"common\");\n\nmsg.broker.clientid = \"south_output_\" + common.guid(8)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 100,
        "wires": [
            [
                "02118a1750cfc768"
            ]
        ]
    },
    {
        "id": "02118a1750cfc768",
        "type": "mqtt out",
        "z": "e3c37262fcb472bd",
        "name": "南向输出发布",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "e0fae44751c7a250",
        "x": 560,
        "y": 220,
        "wires": []
    },
    {
        "id": "799983fe4c972017",
        "type": "function",
        "z": "e3c37262fcb472bd",
        "name": "主题",
        "func": "msg.topic = \"0/0/0/0/dev/\" + msg.id + \"/0/0\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 220,
        "wires": [
            [
                "02118a1750cfc768"
            ]
        ]
    },
    {
        "id": "28e8b108665f9a11",
        "type": "link in",
        "z": "e3c37262fcb472bd",
        "name": "南向输出",
        "links": [
            "8a709b1a39d198bd",
            "4ebb953fc2da0575"
        ],
        "x": 185,
        "y": 220,
        "wires": [
            [
                "799983fe4c972017"
            ]
        ]
    },
    {
        "id": "a5fab40b8a440bb5",
        "type": "mqtt in",
        "z": "e3c37262fcb472bd",
        "name": "南向订阅",
        "topic": "",
        "qos": "2",
        "datatype": "json",
        "broker": "acbe893ce0e86722",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 1,
        "x": 540,
        "y": 160,
        "wires": [
            [
                "821bd3a334fab03b"
            ]
        ]
    },
    {
        "id": "cb11d32cb643517e",
        "type": "link in",
        "z": "e3c37262fcb472bd",
        "name": "南向订阅",
        "links": [
            "9e37d384371f67cd",
            "cab8d42b8f58b71a"
        ],
        "x": 175,
        "y": 160,
        "wires": [
            [
                "a5fab40b8a440bb5"
            ]
        ]
    },
    {
        "id": "821bd3a334fab03b",
        "type": "function",
        "z": "e3c37262fcb472bd",
        "name": "设备ID",
        "func": "msg.topics = msg.topic.split(\"/\");\nmsg.id = msg.topics[3]\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 160,
        "wires": [
            [
                "4d9d7febe299df99"
            ]
        ]
    },
    {
        "id": "dd26e09ac2442b2b",
        "type": "function",
        "z": "e3c37262fcb472bd",
        "name": "south_input",
        "func": "let common = global.get(\"common\");\n\nmsg.broker.clientid = \"south_input_\" + common.guid(8)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 60,
        "wires": [
            [
                "a5fab40b8a440bb5"
            ]
        ]
    },
    {
        "id": "4d9d7febe299df99",
        "type": "debug",
        "z": "e3c37262fcb472bd",
        "name": "南向输入",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 160,
        "wires": []
    },
    {
        "id": "112c832c3d3cb857",
        "type": "function",
        "z": "e3c37262fcb472bd",
        "name": "获取设备通知边缘",
        "func": "let data = global.get(\"data\");\nlet common = global.get(\"common\");\nlet pld = msg.payload.pld;\nlet sid = common.guid(10);\n\ncommon.eventEmitter.once(sid, _msg => {\n    let recs = _msg.payload;\n    if (recs && recs.length > 0) {\n        let dev = recs[0];\n\n        Object.keys(dev).forEach(key => {\n            pld[key] = dev[key] || pld[key];\n        })\n        delete pld._id;\n\n        let doms = data.domains;\n        let dom_id = pld.dom_id || \"default\";\n        let dom = doms[dom_id];\n        let edg_id = dom && dom.edg_id || \"ndiot-edg-default\";\n        \n        msg.topic = \"0/0/0/0/edg/\" + edg_id + \"/0/0\"\n        node.send([null, msg])\n    }\n\n})\n\n\nlet _msg = {}\n_msg.sid = sid;\n_msg.collection = \"ndiot_devices\";\n_msg.operation = \"find\";\n_msg.payload = {\n    \"id\": pld.id\n}\n\nreturn [_msg, null];\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 460,
        "wires": [
            [
                "a3e69ee53f0edc11",
                "85576523df118e2f"
            ],
            [
                "deaea4c177315b5e",
                "0986da6ec9f87061"
            ]
        ]
    },
    {
        "id": "9928c9a5edaf72b0",
        "type": "mqtt out",
        "z": "e3c37262fcb472bd",
        "name": "北向边缘输出发布",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "790bcfc072decbef",
        "x": 570,
        "y": 460,
        "wires": []
    },
    {
        "id": "b9bbfeb42454da1f",
        "type": "link in",
        "z": "e3c37262fcb472bd",
        "name": "北向输出",
        "links": [
            "deaea4c177315b5e"
        ],
        "x": 195,
        "y": 460,
        "wires": [
            [
                "9928c9a5edaf72b0",
                "6a6f1265f603ae95"
            ]
        ]
    },
    {
        "id": "deaea4c177315b5e",
        "type": "link out",
        "z": "e3c37262fcb472bd",
        "name": "通知边缘设备入网输出",
        "mode": "link",
        "links": [
            "b9bbfeb42454da1f"
        ],
        "x": 1155,
        "y": 480,
        "wires": []
    },
    {
        "id": "6a6f1265f603ae95",
        "type": "debug",
        "z": "e3c37262fcb472bd",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 350,
        "y": 560,
        "wires": []
    },
    {
        "id": "b2168926188a5904",
        "type": "link in",
        "z": "e3c37262fcb472bd",
        "name": "数据连接输入",
        "links": [
            "1188b78d61e6e2a8"
        ],
        "x": 215,
        "y": 780,
        "wires": [
            [
                "88a125ccc32b4a71"
            ]
        ]
    },
    {
        "id": "88a125ccc32b4a71",
        "type": "function",
        "z": "e3c37262fcb472bd",
        "name": "数据连接",
        "func": "let data = global.get(\"data\");\n\nmsg = {};\nmsg.action = \"connect\";\nmsg.broker = {\n    autoConnect: true,\n    cleansession: false,\n    force: false\n}\nObject.assign(msg.broker, data.shadows.mqtt.south.broker);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 780,
        "wires": [
            [
                "cd4afa8b8133945b",
                "3ecc698ece0dd59f"
            ]
        ]
    },
    {
        "id": "cd4afa8b8133945b",
        "type": "function",
        "z": "e3c37262fcb472bd",
        "name": "dataio_output",
        "func": "let common = global.get(\"common\");\n\nmsg.broker.clientid = \"dataio_output_\" + common.guid(8)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 780,
        "wires": [
            [
                "04bebc4484d6545e"
            ]
        ]
    },
    {
        "id": "04bebc4484d6545e",
        "type": "mqtt out",
        "z": "e3c37262fcb472bd",
        "name": "数据服务发布",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "ccc535250cd7677b",
        "x": 590,
        "y": 900,
        "wires": []
    },
    {
        "id": "b887e394a5738c26",
        "type": "function",
        "z": "e3c37262fcb472bd",
        "name": "发布主题",
        "func": "\nlet data = global.get(\"data\");\nlet id = data.ids.dio;\nlet hd = msg.payload.hd;\nlet topic = \"0/0/dio/\" + id + \n            \"/\" + hd.to.type + \"/\" + hd.to.id +\n            \"/\" +hd.entry.type + \"/\" + hd.entry.id\n        \n\nmsg.topic = msg.topic || topic\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 900,
        "wires": [
            [
                "04bebc4484d6545e"
            ]
        ]
    },
    {
        "id": "77a6699fe0159bd7",
        "type": "link in",
        "z": "e3c37262fcb472bd",
        "name": "数据发布输入",
        "links": [
            "4ebb953fc2da0575",
            "54a97af839ce4ad7"
        ],
        "x": 215,
        "y": 900,
        "wires": [
            [
                "b887e394a5738c26"
            ]
        ]
    },
    {
        "id": "93954e61143fa48c",
        "type": "mqtt in",
        "z": "e3c37262fcb472bd",
        "name": "数据服务订阅",
        "topic": "",
        "qos": "2",
        "datatype": "json",
        "broker": "340486ab3bf5bf39",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 1,
        "x": 580,
        "y": 840,
        "wires": [
            [
                "8a42c89d9b218de1"
            ]
        ]
    },
    {
        "id": "3ecc698ece0dd59f",
        "type": "function",
        "z": "e3c37262fcb472bd",
        "name": "dataio_input",
        "func": "let common = global.get(\"common\");\n\nmsg.broker.clientid = \"dataio_input_\" + common.guid(8)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 740,
        "wires": [
            [
                "93954e61143fa48c",
                "a33fdc542c669b38"
            ]
        ]
    },
    {
        "id": "a33fdc542c669b38",
        "type": "function",
        "z": "e3c37262fcb472bd",
        "name": "订阅主题",
        "func": "\nlet data = global.get(\"data\");\n\nlet id = data.ids.dio;\nlet topics = [\n    \"+/+/+/+/dio/\" + id + \"/+/+\"\n    ]\n    \nreturn {\n        action: \"subscribe\",\n        topic: topics\n    }\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 840,
        "wires": [
            [
                "93954e61143fa48c"
            ]
        ]
    },
    {
        "id": "01dd6d9e7dbdbe96",
        "type": "link out",
        "z": "e3c37262fcb472bd",
        "name": "数据请求输出",
        "mode": "link",
        "links": [
            "73816a2e289ac11e"
        ],
        "x": 925,
        "y": 840,
        "wires": []
    },
    {
        "id": "8a42c89d9b218de1",
        "type": "function",
        "z": "e3c37262fcb472bd",
        "name": "缓存payload",
        "func": "let topics = msg.topic.split(\"/\");\nmsg.payload.hd.from = {\n    type: topics[2],\n    id: topics[3]\n}\ndelete msg._topic\nmsg._payload = msg.payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 840,
        "wires": [
            [
                "01dd6d9e7dbdbe96"
            ]
        ]
    },
    {
        "id": "d7dcb0b4081c919c",
        "type": "delay",
        "z": "e3c37262fcb472bd",
        "name": "",
        "pauseType": "delay",
        "timeout": "500",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 950,
        "y": 420,
        "wires": [
            [
                "112c832c3d3cb857"
            ]
        ]
    },
    {
        "id": "a3e69ee53f0edc11",
        "type": "link out",
        "z": "e3c37262fcb472bd",
        "name": "获取设备通知边缘输出",
        "mode": "link",
        "links": [
            "800621f0c9f46a27"
        ],
        "x": 1155,
        "y": 440,
        "wires": []
    },
    {
        "id": "85576523df118e2f",
        "type": "debug",
        "z": "e3c37262fcb472bd",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1270,
        "y": 560,
        "wires": []
    },
    {
        "id": "0986da6ec9f87061",
        "type": "debug",
        "z": "e3c37262fcb472bd",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1030,
        "y": 560,
        "wires": []
    },
    {
        "id": "478997ca6b48d67e",
        "type": "inject",
        "z": "8ef2d550b8e4f725",
        "name": "修改设备配置",
        "props": [
            {
                "p": "id",
                "v": "ESP8266x00c1cd77",
                "vt": "str"
            },
            {
                "p": "payload.pld",
                "v": "{\"config\":{\"serial_baud\":9600,\"co_serial_baud\":9600},\"reboot\":1}",
                "vt": "json"
            },
            {
                "p": "payload.hd.entry.type",
                "v": "svc",
                "vt": "str"
            },
            {
                "p": "payload.hd.entry.id",
                "v": "config",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 270,
        "y": 240,
        "wires": [
            [
                "f9bd9e62bdf28047",
                "4ebb953fc2da0575"
            ]
        ]
    },
    {
        "id": "4ebb953fc2da0575",
        "type": "link out",
        "z": "8ef2d550b8e4f725",
        "name": "",
        "mode": "link",
        "links": [
            "28e8b108665f9a11",
            "77a6699fe0159bd7"
        ],
        "x": 565,
        "y": 320,
        "wires": []
    },
    {
        "id": "f9bd9e62bdf28047",
        "type": "function",
        "z": "8ef2d550b8e4f725",
        "name": "南向订阅设备主题",
        "func": "let id = msg.id;\nnode.send({\n        action: \"subscribe\",\n        topic: \"0/0/dev/\"+id+\"/0/0/0/0\"\n})\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 200,
        "wires": [
            [
                "cab8d42b8f58b71a"
            ]
        ]
    },
    {
        "id": "cab8d42b8f58b71a",
        "type": "link out",
        "z": "8ef2d550b8e4f725",
        "name": "",
        "mode": "link",
        "links": [
            "cb11d32cb643517e",
            "961a72d6576d44be"
        ],
        "x": 735,
        "y": 200,
        "wires": []
    },
    {
        "id": "be165941eb63027e",
        "type": "inject",
        "z": "8ef2d550b8e4f725",
        "name": "重启",
        "props": [
            {
                "p": "id",
                "v": "ESP8266x00c1cd77",
                "vt": "str"
            },
            {
                "p": "payload.pld.config",
                "v": "{}",
                "vt": "json"
            },
            {
                "p": "payload.pld.reboot",
                "v": "1",
                "vt": "num"
            },
            {
                "p": "payload.hd.entry.type",
                "v": "svc",
                "vt": "str"
            },
            {
                "p": "payload.hd.entry.id",
                "v": "reboot",
                "vt": "str"
            },
            {
                "p": "payload.hd.stp",
                "v": "0",
                "vt": "num"
            },
            {
                "p": "payload.hd.sid",
                "v": "11",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 250,
        "y": 440,
        "wires": [
            [
                "f9bd9e62bdf28047"
            ]
        ]
    },
    {
        "id": "5f864672a9e218eb",
        "type": "inject",
        "z": "8ef2d550b8e4f725",
        "name": "获取设备配置",
        "props": [
            {
                "p": "id",
                "v": "ESP8266x00c1cd77",
                "vt": "str"
            },
            {
                "p": "payload.pld",
                "v": "{\"reboot\":0}",
                "vt": "json"
            },
            {
                "p": "payload.hd.entry.type",
                "v": "svc",
                "vt": "str"
            },
            {
                "p": "payload.hd.entry.id",
                "v": "config",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 270,
        "y": 300,
        "wires": [
            [
                "f9bd9e62bdf28047",
                "4ebb953fc2da0575"
            ]
        ]
    },
    {
        "id": "9fec21ad22324992",
        "type": "inject",
        "z": "8ef2d550b8e4f725",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 330,
        "y": 620,
        "wires": [
            [
                "d4fc805e85e8896e"
            ]
        ]
    },
    {
        "id": "d4fc805e85e8896e",
        "type": "function",
        "z": "8ef2d550b8e4f725",
        "name": "获取设备通知边缘",
        "func": "let data = global.get(\"data\");\nlet common = global.get(\"common\");\n\nlet sid = common.guid(10);\n\nnode.warn(\"333333333333333333: \" + sid)\ncommon.eventEmitter.once(sid, function(abc) {\n    node.warn(abc)\n    // node.send([null, _msg])\n    // let recs = _msg.payload;\n    // if (recs.length > 0) {\n    //     let dev = recs[0];\n    //     let doms = data.domains;\n    //     let dom_id = dev.dom_id || \"default\";\n    //     let dom = doms[dom_id];\n    //     let edg_id = dom && dom.edg_id || \"ndiot-edg-default\";\n        \n    //     msg.topic = \"0/0/0/0/edg/\" + edg_id + \"/0/0\"\n    //     node.send([null, msg])\n    // }\n\n})\n\n\ncommon.eventEmitter.emit(sid, {aa:123})\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 620,
        "wires": [
            [],
            []
        ]
    }
]